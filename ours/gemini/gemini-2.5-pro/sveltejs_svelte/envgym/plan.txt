This is the adjusted environment setup plan, optimized for the specified hardware and containerized environment.

=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1.  DOWNLOADS NEEDED:
    -   **System Packages**: To be installed via a system package manager (e.g., `apt`, `apk`).
        -   **Git**: For version control, particularly for checks like `git status` post-build.
        -   **Build Essentials**: Common build tools (`make`, `g++`, etc.) which may be required for native Node.js modules like `@typescript/native-preview`.
        -   **Playwright System Dependencies**: A set of shared libraries required for Chromium to run in a headless Linux environment.
    -   **Node.js**: JavaScript runtime. The project requires version `>=18`. A `node:20` (LTS) linux/amd64 base Docker image is recommended, as it aligns with the `.nvmrc` (`lts/iron`) and provides the required runtime. The specified x86_64 architecture is fully supported.
    -   **pnpm**: Package manager. Version `^9.0` is required. It will be managed by `corepack`, which is included in the recommended Node.js base image.
    -   **Playwright**: For End-to-End testing. It will be installed as a dev dependency via pnpm. Browsers must be installed manually via `pnpm playwright install chromium`. The environment does not have a GPU, which is acceptable as Playwright's Chromium can run in headless mode without hardware acceleration.
    -   **Vite**: A build tool and dev server. Installed as a dev dependency.
    -   **TypeScript Native (tsgo)**: A native TypeScript compiler (`@typescript/native-preview`). Installed as a dev dependency.
    -   **Changesets**: For version management. Installed as a dev dependency.
    -   **Knip**: For detecting unused files. Installed as a dev dependency.
    -   **IDE & Extensions**: The recommendation for Visual Studio Code and its extensions is intended for developers working on their local machines, potentially connected to the container environment. These tools are not installed as part of the automated build/test environment itself. The project's `.vscode/` configuration files should be copied into the environment to support this workflow.

2.  FILES TO CREATE:
    *(Note: In a containerized workflow, these files are not created manually but are copied from the source directory (`/home/cc/EnvGym/data/sveltejs_svelte`) into the container.)*
    -   **`.editorconfig`**: (At project root) Defines and maintains consistent coding styles between different editors and IDEs.
        ```
        root = true

        [*]
        end_of_line = lf
        insert_final_newline = true
        indent_style = tab
        indent_size = 2
        charset = utf-8
        trim_trailing_whitespace = true

        [test/**/expected.css]
        insert_final_newline = false

        [package.json]
        indent_style = space
        ```
    -   **`pnpm-workspace.yaml`**: (At project root) Defines the monorepo workspaces for pnpm.
        ```yaml
        packages:
          - 'packages/*'
          - 'playgrounds/*'
        ```
    -   **`.nvmrc`**: (At project root) To enforce the Node.js version for developers using NVM (Node Version Manager).
        ```
        lts/iron
        ```
    -   **`.npmrc`**: (At project root) Configuration for the package manager, in this case to skip automatic browser downloads for Playwright.
        ```
        playwright_skip_browser_download=1
        ```
    -   **`.gitignore`**: (At project root) To exclude unnecessary files from version control.
        ```
        # Dependencies
        node_modules/
        .pnpm-store

        # Build artifacts
        dist
        build
        .svelte-kit
        .vercel
        compiler/
        types/

        # Testing & Coverage
        coverage
        test-results/
        playwright-report/
        playwright/.cache/
        *.lcov

        # Logs
        logs
        *.log
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        pnpm-debug.log*

        # Caches
        .eslintcache

        # IDE config
        .idea
        .vscode/*
        !.vscode/settings.json
        !.vscode/launch.json

        # OS generated files
        .DS_Store
        Thumbs.db

        # Environment variables
        .env
        .env.local
        .env.*.local
        .env.test

        # Temporary files
        tmp

        # Benchmark results
        benchmarking/compare/.results
        ```
    -   **`.gitattributes`**: (At project root) Provides attributes to paths for Git, used by GitHub's Linguist library to manage language statistics.
        ```
        /site/** -linguist-detectable
        /test/**/samples/** -linguist-detectable
        /**/*.svelte linguist-detectable
        ```
    -   **`.vscode/settings.json`**: (In `.vscode` directory) Recommended workspace settings for Visual Studio Code to ensure a consistent development environment.
        ```json
        {
        	"typescript.tsdk": "node_modules/typescript/lib"
        }
        ```
    -   **`.vscode/launch.json`**: (In `.vscode` directory) VS Code debug configuration for running the sandbox playground.
        ```json
        {
        	"version": "0.2.0",
        	"configurations": [
        		{
        			"type": "node",
        			"request": "launch",
        			"name": "Run sandbox",
        			"program": "${workspaceFolder}/playgrounds/sandbox/run.js",
        			"env": {
        				"NODE_OPTIONS": "--stack-trace-limit=10000"
        			}
        		}
        	]
        }
        ```
    -   **`tsconfig.json`**: (At project root) Base TypeScript configuration for the monorepo and IDE support.
        ```json
        {
          "compilerOptions": {
            "target": "ESNext",
            "module": "ESNext",
            "moduleResolution": "bundler",
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true,
            "forceConsistentCasingInFileNames": true,
            "resolveJsonModule": true,
            "allowJs": true,
            "checkJs": true,
            "noEmit": true
          },
          "include": ["packages/**/*.ts", "packages/**/*.js", "packages/**/*.svelte", "playgrounds/**/*.ts", "playgrounds/**/*.svelte", "vitest.config.ts"]
        }
        ```
    -   **`packages/svelte/tsconfig.runtime.json`**: (In `packages/svelte`) Specific TS config for checking the runtime source code to ensure browser compatibility.
        ```json
        {
        	"extends": "../../tsconfig.json",
        	"compilerOptions": {
        		// Ensure we don't use any methods that are not available in all supported browsers
        		// so that users don't need to polyfill them. e.g., array.at() was only added to Safari in 2022.
        		"target": "es2021",
        		"lib": ["es2021", "DOM", "DOM.Iterable"],
        		"types": [] // Prevent automatic inclusion of @types/node to ensure no Node.js APIs are used.
        	},
        	"include": ["src/"],
        	// Exclude compiler (can use newer APIs) and tests (can use Node.js APIs via Vitest).
        	"exclude": ["src/compiler/**/*", "src/**/*.test.ts"]
        }
        ```
    -   **`packages/svelte/tsconfig.generated.json`**: (In `packages/svelte`) Specific TS config for checking the generated type definition files.
        ```json
        {
          "compilerOptions": {
            "composite": true,
            "declaration": true,
            "declarationMap": true,
            "sourceMap": true,
            "skipLibCheck": true,
            "strict": true
          },
          "include": ["types/**/*.d.ts"]
        }
        ```
    -   **`packages/svelte/tests/types/tsconfig.json`**: (In `packages/svelte/tests/types`) TS config for running type-level tests.
        ```json
        {
          "extends": "../../../tsconfig.json",
          "compilerOptions": {
            "noEmit": true,
            "strict": true,
            "allowJs": false,
            "checkJs": false
          },
          "include": ["**/*.ts"]
        }
        ```
    -   **`packages/svelte/knip.json`**: (In `packages/svelte`) Configuration for Knip to find unused files, dependencies, and exports.
        ```json
        {
        	"$schema": "https://unpkg.com/knip@5/schema.json",
        	"entry": [
        		"tests/**/*.js",
        		"tests/**/*.ts",
        		"!tests/**/*.svelte",
        		"!tests/**/*.svelte.js",
        		"!tests/**/_output",
        		"!tests/runtime-browser/driver.js",
        		"!tests/runtime-browser/driver-ssr.js",
        		"!tests/types/component.ts"
        	],
        	"project": ["src/**"]
        }
        ```
    -   **`benchmarking/tsconfig.json`**: (In `benchmarking` directory) Specific TS config for type-checking the benchmarking scripts.
        ```json
        {
        	"compilerOptions": {
        		"moduleResolution": "Bundler",
        		"target": "ESNext",
        		"module": "ESNext",
        		"verbatimModuleSyntax": true,
        		"isolatedModules": true,
        		"resolveJsonModule": true,
        		"sourceMap": true,
        		"esModuleInterop": true,
        		"skipLibCheck": true,
        		"forceConsistentCasingInFileNames": true,
        		"allowJs": true,
        		"checkJs": true
        	},
        	"include": ["./run.js", "./utils.js", "./benchmarks"]
        }
        ```
    -   **`eslint.config.js`**: (At project root) Configuration for ESLint using the flat config format.
        ```javascript
        import svelte_config from '@sveltejs/eslint-config';
        import lube from 'eslint-plugin-lube';

        const no_compiler_imports = {
        	meta: {
        		type: /** @type {const} */ ('problem'),
        		docs: {
        			description:
        				'Enforce that there are no imports to the compiler in runtime code. ' +
        				'This prevents accidental inclusion of the compiler runtime and ' +
        				"ensures that TypeScript does not pick up more ambient types (for example from Node) that shouldn't be available in the browser."
        		}
        	},
        	create(context) {
        		return {
        			Program: () => {
        				// Do a simple string search because ESLint doesn't provide a way to check JSDoc comments.
        				// The string search could in theory yield false positives, but in practice it's unlikely.
        				const text = context.sourceCode.getText();
        				const idx = Math.max(text.indexOf('../compiler/'), text.indexOf('#compiler'));
        				if (idx !== -1) {
        					context.report({
        						loc: {
        							start: context.sourceCode.getLocFromIndex(idx),
        							end: context.sourceCode.getLocFromIndex(idx + 12)
        						},
        						message:
        							'References to compiler code are forbidden in runtime code (both for type and value imports)'
        					});
        				}
        			}
        		};
        	}
        };

        /** @type {import('eslint').Linter.FlatConfig[]} */
        export default [
        	...svelte_config,
        	{
        		languageOptions: {
        			parserOptions: {
        				projectService: true,
        				tsconfigRootDir: import.meta.dirname
        			}
        		},
        		plugins: {
        			lube,
        			custom: { rules: { no_compiler_imports } }
        		},
        		rules: {
        			'@typescript-eslint/await-thenable': 'error',
        			'@typescript-eslint/require-await': 'error',
        			'no-console': 'error',
        			'lube/svelte-naming-convention': ['error', { fixSameNames: true }],
        			'object-shorthand': 'off',
        			'@typescript-eslint/prefer-promise-reject-errors': 'off',
        			'no-var': 'off',
        			'@stylistic/quotes': 'off',
        			'@typescript-eslint/no-unused-vars': 'off',
        			'prefer-const': 'off'
        		}
        	},
        	{
        		files: ['**/*.svelte'],
        		rules: {
        			'@typescript-eslint/await-thenable': 'off',
        			'@typescript-eslint/prefer-promise-reject-errors': 'off',
        			'@typescript-eslint/require-await': 'off'
        		}
        	},
        	{
        		files: ['packages/svelte/src/**/*'],
        		ignores: ['packages/svelte/src/compiler/**/*'],
        		rules: {
        			'custom/no_compiler_imports': 'error',
        			'svelte/no-svelte-internal': 'off'
        		}
        	},
        	{
        		ignores: [
        			'**/*.d.ts',
        			'**/tests',
        			'packages/svelte/scripts/process-messages/templates/*.js',
        			'packages/svelte/scripts/_bundle.js',
        			'packages/svelte/src/compiler/errors.js',
        			'packages/svelte/src/internal/client/errors.js',
        			'packages/svelte/src/internal/client/warnings.js',
        			'packages/svelte/src/internal/shared/warnings.js',
        			'packages/svelte/compiler/index.js',
        			'benchmarking/**',
        			'coverage/**',
        			'playgrounds/sandbox/**',
        			'*.config.js',
        			'documentation',
        			'tmp/**'
        		]
        	}
        ];
        ```
    -   **`.prettierrc`**: (At project root) Configuration for Prettier code formatter.
        ```json
        {
        	"useTabs": true,
        	"singleQuote": true,
        	"trailingComma": "none",
        	"printWidth": 100,
        	"plugins": ["prettier-plugin-svelte"],
        	"overrides": [
        		{
        			"files": ["*.svelte"],
        			"options": {
        				"bracketSameLine": false
        			}
        		},
        		{
        			"files": ["README.md", "packages/*/README.md", "**/package.json"],
        			"options": {
        				"useTabs": false,
        				"tabWidth": 2
        			}
        		}
        	]
        }
        ```
    -   **`svelte.config.js`**: (At project root) Svelte compiler configuration, primarily for IDE and tooling support.
        ```javascript
        // we need this so the VS Code extension doesn't yell at us
        export default {
          compilerOptions: {
            experimental: {
              async: true
            }
          }
        };
        ```
    -   **`playgrounds/sandbox/svelte.config.js`**: (In `playgrounds/sandbox`) Svelte compiler configuration for the sandbox playground, disabling HMR.
        ```javascript
        export default {
          compilerOptions: {
            hmr: false,

            experimental: {
              async: true
            }
          }
        };
        ```
    -   **`vitest.config.ts`**: (At project root) Configuration for the Vitest test runner.
        ```typescript
        import * as fs from 'node:fs';
        import * as path from 'node:path';
        import { configDefaults, defineConfig } from 'vitest/config';

        const pkg = JSON.parse(fs.readFileSync('packages/svelte/package.json', 'utf8'));

        export default defineConfig({
          resolve: {
            alias: [
              {
                find: /^svelte\/?/,
                customResolver: (id, importer) => {
                  // For some reason this turns up as "undefined" instead of "svelte/"
                  const exported = pkg.exports[id === 'undefined' ? '.' : id.replace('undefined', './')];
                  if (!exported) return;

                  // When running the server version of the Svelte files,
                  // we also want to use the server export of the Svelte package
                  return path.resolve(
                    'packages/svelte',
                    importer?.includes('_output/server')
                      ? exported.default
                      : exported.browser ?? exported.default
                  );
                }
              }
            ]
          },
          test: {
            dir: '.',
            reporters: ['dot'],
            include: [
              'packages/svelte/**/*.test.ts',
              'packages/svelte/tests/*/test.ts',
              'packages/svelte/tests/runtime-browser/test-ssr.ts'
            ],
            exclude: [...configDefaults.exclude, '**/samples/**'],
            coverage: {
              provider: 'v8',
              reporter: ['lcov', 'html'],
              include: ['packages/svelte/src/**'],
              reportsDirectory: 'coverage',
              reportOnFailure: true
            }
          }
        });
        ```
    -   **`.changeset/config.json`**: (In `.changeset` directory) Configuration for Changesets version management.
        ```json
        {
        	"$schema": "https://unpkg.com/@changesets/config@2.3.0/schema.json",
        	"changelog": ["@svitejs/changesets-changelog-github-compact", { "repo": "sveltejs/svelte" }],
        	"commit": false,
        	"fixed": [],
        	"linked": [],
        	"access": "public",
        	"baseBranch": "main",
        	"bumpVersionsWithWorkspaceProtocolOnly": true,
        	"ignore": ["!(@sveltejs/*|svelte)"]
        }
        ```
    -   **`packages/svelte/rollup.config.js`**: (In `packages/svelte` directory) Rollup configuration for building the Svelte compiler.
        ```javascript
        import commonjs from '@rollup/plugin-commonjs';
        import resolve from '@rollup/plugin-node-resolve';
        import terser from '@rollup/plugin-terser';
        import { defineConfig } from 'rollup';

        // runs the version generation as a side-effect of importing
        import './scripts/generate-version.js';

        export default defineConfig({
        	input: 'src/compiler/index.js',
        	output: {
        		file: 'compiler/index.js',
        		format: 'umd',
        		name: 'svelte'
        	},
        	plugins: [resolve(), commonjs(), terser()]
        });
        ```
    -   **`packages/svelte/compiler/package.json`**: (In `packages/svelte/compiler` directory) Ensures Node.js treats the compiled output as CommonJS. Note: This file is generated by the build process, not created manually.
        ```json
        {
          "type": "commonjs"
        }
        ```

3.  NECESSARY TEST CASES IN THE CODEBASE:
    -   **Unit Tests (Vitest & JSDOM)**:
        -   Located in `packages/svelte/**/*.test.ts` and `packages/svelte/tests/*/test.ts`.
        -   Core logic tests covering functionality within `packages/svelte/src`.
        -   Compiler tests for AST generation, code output, and warning/error handling.
        -   Specific tests for Server-Side Rendering (SSR) located in files like `packages/svelte/tests/runtime-browser/test-ssr.ts`.
        -   Specific test suite for runes (`pnpm test runtime-runes`), which can be run with `SVELTE_NO_ASYNC=true` to test an alternative execution mode.
    -   **Integration Tests (Vitest & JSDOM)**:
        -   Parent-child component communication (props, events, context).
        -   Correct data flow through multiple layers of components.
        -   Tests for browser vs. server-specific exports and behavior.
        -   Compiler module resolution tests, ensuring `require('svelte/compiler')` works correctly in Node.js environments (facilitated by the build-generated `packages/svelte/compiler/package.json`).
    -   **End-to-End Tests (Playwright)**:
        -   Critical user flows using the compiled output in a real browser environment (Chromium is the primary CI target).
        -   Visual regression tests for key pages/components.
    -   **Static Analysis & Type Safety Checks**:
        -   **ESLint**: Enforces code quality and style rules (`pnpm lint`).
        -   **Prettier**: Ensures consistent code formatting (`pnpm format --check`), respecting rules from `.prettierrc` and `.editorconfig`.
        -   **TypeScript Type-Checking**: Validates the source code against its type definitions using multiple configurations (`pnpm check`). This includes a strict check on the runtime code (`packages/svelte/tsconfig.runtime.json`) to enforce ES2021 compatibility for broad browser support and to prevent the use of Node.js-specific APIs. This is supported by IDE settings in `.vscode/settings.json` to ensure the editor uses the same TypeScript version as the build scripts. This also covers type-checking the benchmarking scripts.
        -   **TypeScript Native (tsgo) Check**: An additional type-checking step using `@typescript/native-preview` to ensure compatibility (`cd packages/svelte && pnpm check:tsgo`).
        -   **Knip**: A check (`pnpm knip`) to find unused files, dependencies, and exports in the `packages/svelte` workspace, ensuring a clean and maintainable codebase.
        -   **Type Definition Tests**: A dedicated test suite in `packages/svelte/tests/types` that validates the correctness of the public-facing `.d.ts` files.
        -   **Generated Types Verification**: A crucial check, enforced in CI, ensuring that running the build process does not produce changes to the committed type definition files. The build will fail if `git status` is not clean after `pnpm build`. Any changes to generated types must be committed.
        -   **Tree-Shakeability Checks**: A script (`check-treeshakeability.js`) runs as part of the build process to ensure that unused code can be eliminated by bundlers.
        -   **Custom ESLint rule (`no_compiler_imports`)**: Prevents runtime code from importing compiler code.
    -   **Manual & Development Testing (Vite Playground)**:
        -   Located in `playgrounds/sandbox`.
        -   Provides a live development environment using Vite to test the local `svelte` package (`workspace:*`).
        -   Used for manual testing of features, bug fixes, and checking client-side and SSR behavior. Note that this playground is configured with Hot Module Replacement (HMR) disabled. VS Code users can use the "Run sandbox" launch configuration for easier debugging.
    -   **Performance Benchmarks**:
        -   A suite of benchmarks can be run via `pnpm bench` to measure performance of various operations. The benchmark code itself is type-checked for robustness.

4.  COMPLETE TODO LIST:
    1.  **Prepare the Environment**:
        -   Start with a `linux/amd64` base image, for example `node:20-bullseye`. This provides the correct Node.js runtime and OS.
        -   Set the working directory, e.g., `WORKDIR /app`.
        -   Update package lists and install necessary system dependencies. For a Debian-based image:
            ```bash
            apt-get update && apt-get install -y --no-install-recommends \
                git \
                build-essential \
                # Playwright dependencies for Chromium
                libnss3 libnspr4 libdbus-1-3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2
            ```

    2.  **Copy Source Code**:
        -   Copy the entire project source from the host working directory (`/home/cc/EnvGym/data/sveltejs_svelte`) into the container's working directory (`/app`).
            ```
            # In a Dockerfile context:
            COPY . .
            ```

    3.  **Configure Package Manager**:
        -   Enable `corepack` to ensure the correct version of `pnpm` is used, as defined in `package.json`.
            ```bash
            corepack enable
            ```

    4.  **Install Project Dependencies**:
        -   In the project root directory (`/app`), run the pnpm install command. This will install all dependencies from the lockfile without downloading Playwright browsers.
            ```bash
            pnpm install
            ```
        -   **Verification**: The command should complete successfully and a `node_modules` directory will be created.

    5.  **Install Playwright Browsers**:
        -   This is a mandatory step to run end-to-end tests. The CI environment only requires Chromium.
            ```bash
            pnpm playwright install chromium
            ```
        -   **Verification**: The command should download the specified browser successfully into Playwright's cache.

    6.  **Build the Project Packages**:
        -   Run the build script. This processes messages, bundles the compiler, generates type definitions, and checks for tree-shakeability.
            ```bash
            pnpm build
            ```
        -   **Verification**: The command should complete successfully. Check for build artifacts in `packages/svelte/compiler/`, including `index.js` and a `package.json` file.
        -   **Crucial Verification**: After building, the git working directory must be clean. This is a critical CI check.
            ```bash
            git status --porcelain
            # This command should produce no output.
            ```

    7.  **Run All Checks and Tests**:
        -   Execute the full suite of static analysis and tests to ensure code quality and correctness.
        -   **Lint & Format Check**:
            ```bash
            pnpm lint
            pnpm format --check
            ```
        -   **Type-Checking**:
            ```bash
            pnpm check
            ```
        -   **Knip Check**:
            ```bash
            pnpm knip
            ```
        -   **Unit & Integration Tests**:
            ```bash
            pnpm test
            ```
        -   **End-to-End Tests**:
            ```bash
            pnpm test:e2e
            ```
        -   **Verification**: All of the above commands should exit with code 0, indicating success.

    8.  **Run Optional Steps (If Needed)**:
        -   **TSGo Check**: Run the experimental TypeScript Native check.
            ```bash
            (cd packages/svelte && pnpm check:tsgo)
            ```
        -   **Benchmarks**: Check for performance regressions or improvements.
            ```bash
            pnpm bench
            ```
        -   **Manual Testing via Playground**: This step is for interactive development, not automated CI. It starts a live development server.
            ```bash
            # To run this, you would need to expose the container's port (e.g., 5173)
            pnpm --filter svelte-playgrounds-demo dev
            ```

    9.  **Final Environment Check (CI Summary)**:
        -   Run a single command that chains the most critical verification steps together, mimicking a CI pipeline.
            ```bash
            pnpm build && git status --porcelain | wc -l | grep -q '^0$' && pnpm lint && pnpm format --check && pnpm check && pnpm knip && pnpm test && pnpm test:e2e
            ```
        -   **Verification**: This entire chain of commands must complete without any errors for the environment to be considered fully operational and ready for development or pull requests. The `git status` check is explicitly included to enforce that the build produces no uncommitted changes.