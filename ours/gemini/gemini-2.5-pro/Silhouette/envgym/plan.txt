Here is the complete adjusted environment setup plan based on the provided hardware information.

=== ENVIRONMENT SETUP PLAN (ADJUSTED) ===

1.  DOWNLOADS NEEDED:
    *   **Operating System:** Ubuntu 20.04 or later (x86\_64 architecture) is required. The instructions have been adapted for an Ubuntu 20.04 base, which requires adding external repositories for required software versions.
    *   **Hardware/Kernel Virtualization:**
        *   KVM support is required for tested performance. If running in a container, it must be launched with access to the host's `/dev/kvm` device.
        *   The host kernel must have `FS_DAX` and `CONFIG_BLK_DEV_PMEM` support enabled. `FS_DAX` is a dependency for the WINEFS kernel module, and `CONFIG_BLK_DEV_PMEM` is required for the kernel to create persistent memory block devices (e.g., `/dev/pmem0`) used by PMFS.
    *   **CPU:** A CPU that supports Persistent Memory is required to run the NOVA and PMFS tests with native performance. Emulation is possible but will significantly degrade performance. The host must be able to provide at least two persistent memory devices (NVDIMMs) to the guest VM for full PMFS testing.
    *   **Disk Space:** Sufficient free disk space is required. The guest VM image is ~30 GB. The scalability tests may clone the VM image multiple times (e.g., up to 20 VMs), with each clone consuming ~5 GB, requiring an additional 100+ GB of free space.
    *   **Python:** Version 3.10.x, including `ctypes` and `readline` modules.
    *   **Git:** For cloning the source code repository and its submodules.
    *   **wget:** For downloading the virtual machine image.
    *   **LLVM Toolchain:** Version 15 is required for building custom LLVM passes and tools for tracing PM operations. The tracing logic is based on the Giri and Witcher projects.
        *   Packages: `llvm-15-dev`, `clang-15`.
        *   An environment variable `LLVM15_HOME` must be set to the LLVM 15 installation directory (e.g., `/usr/lib/llvm-15`) during the build phase.
    *   **Dependencies installed by `install_dep.sh`:**
        *   **Build Tools:** `build-essential` (including `make`, `g++`, `gcc`), `libssl-dev`, `zlib1g-dev`, `patch`, and other development libraries for compiling dependencies and project tools.
        *   **Linux Kernel Headers:** `linux-headers-$(uname -r)` for building the custom NOVA, PMFS, and WINEFS kernel modules.
        *   **QEMU:** `qemu-system-x86`.
        *   **Memcached:** The `memcached` service.
        *   **Python Packages:** `python3-pip` and pip packages including `pymemcache`, `memcache`, `psutil`, `pytz`, `qemu.qmp`, `intervaltree`, `aenum`, `netifaces`, `prettytable`, `tqdm`, `numpy`, and `matplotlib`.
    *   **Silhouette Source Code:**
        *   URL: `https://github.com/iaoing/Silhouette.git`
        *   Note: The repository includes submodules and vendored code from third-party projects, such as an MD5 implementation from `https://github.com/JieweiWei/md5`. These are fetched automatically during the submodule update step.
    *   **Silhouette Guest VM Image:**
        *   URL: `https://zenodo.org/records/14550794/files/silhouette_guest_vm.qcow2`
        *   Size: Approximately 30 GB.

2.  FILES TO CREATE:
    *   No new files need to be created manually.
    *   A backing file for the emulated persistent memory device (NVDIMM) needs to be created, for example: `/home/cc/EnvGym/data/Silhouette/pmem.img`.
    *   The build process will generate binaries and object files in various subdirectories. The evaluation scripts will further generate intermediate files for static analysis and instrumentation. Key generated artifacts include:
        *   **Static Analysis Tools:**
            *   `codebase/tools/disk_content/DumpDiskContent`
            *   `codebase/tools/src_info/DumpSrcInfo`
            *   `codebase/tools/struct_layout_ast/DumpStructLayout`
        *   **LLVM Passes and Helper Libraries:**
            *   `codebase/tools/disk_content/ctx.so`
            *   `codebase/tools/md5/md5.so`: A helper library for MD5 hashing, sourced from an external project.
            *   `codebase/tools/struct_layout_pass/DumpStructLayout.so`
            *   `trace/build-llvm15/libnogiri.so` and other LLVM pass `.so` files: These are the core instrumentation passes for tracing Persistent Memory (PM) operations, based on the Giri/Witcher projects.
        *   **Static Analysis Output (generated by evaluation scripts):** Before instrumentation, scripts use tools like `DumpSrcInfo` and `DumpStructLayout` to parse kernel module source code and generate information dumps (e.g., `xx.func.info`, `xx.struct.info`, `xx.struct.layout`). These files are then used as input for the next stages.
        *   **Workloads:**
            *   `workload/ace/`: During scalability evaluations, scripts in this directory (`ace.py`, `cmAdapterParallel.py`) are used to first generate workload definitions (`j-lang` files), then convert them to C++ source files, and finally compile them into executables (e.g., `j-lang-fstest`). This process is automated by the main evaluation scripts (e.g., `evaluation/scalability/seq2/run_all.sh`).
            *   `workload/custom_workload/base_ops/`: This directory will be populated with compiled custom workload executables (e.g., `create.exe`) by the build process.
        *   **Kernel Modules (uninstrumented baseline):**
            *   `thirdPart/nova-chipmunk-disable-chipmunk-bugs/nova.ko`
            *   `thirdPart/pmfs-chipmunk-disable-chipmunk-bugs/pmfs.ko`
            *   `thirdPart/winefs-chipmunk-disable-chipmunk-bugs/winefs.ko`
    *   During bug reproduction, the evaluation scripts will automatically configure the kernel module source code to inject a specific bug before compilation. This is achieved through one of two mechanisms:
        *   **Patching:** For some bugs, scripts like `enable_bug.sh` will apply a `patch.diff` file to the source code, and `disable_bug.sh` will revert it.
        *   **Kconfig:** For other bugs, a `.config` file is generated within the module's source directory (e.g., `thirdPart/nova-chipmunk-disable-chipmunk-bugs/.config`) to enable specific bug injection flags defined in the `Kconfig` file.
    *   The file `thirdPart/pmfs-chipmunk-disable-chipmunk-bugs/intel-setup-pmfs.sh` exists in the repository. It serves as a utility script that automates the process of loading the PMFS kernel module (`insmod pmfs.ko`) and mounting the PMFS file system on a persistent memory device (`mount -t pmfs -o init /dev/pmem0 /mnt/ramdisk`) inside the guest VM.
    *   **Scalability Test Results:** The scalability evaluation scripts generate a `result` directory for each sub-test (e.g., `evaluation/scalability/seq2/nova/mech2cp/result/`). This directory contains detailed raw data including crash plans (`result_cps`), time breakdowns (`result_elapsed_time`), validation outcomes (`result_validation`), and more. Running the `plot.sh` script (e.g., in `evaluation/scalability/seq2/`) will generate the final paper artifacts:
        *   `figure_1.pdf`
        *   `table_9.txt`
    *   The following files **must be modified** to reflect the new working directory (`/home/cc/EnvGym/data/Silhouette`):
        *   `Silhouette/codebase/scripts/fs_conf/*`: These files contain hardcoded paths that must be updated for the evaluation scripts to locate the VM image and other resources.
        *   `Silhouette/codebase/scripts/vm_mgr/vm_instance.py`: Modify QEMU arguments if the host does not support KVM or Persistent Memory.
    *   The following existing files will have their **permissions modified** by the `prepare.sh` script:
        *   `Silhouette/codebase/scripts/fs_conf/sshkey/fast25_ae_vm`
        *   `Silhouette/codebase/scripts/fs_conf/sshkey/fast25_ae_vm.pub`

3.  NECESSARY TEST CASES IN THE CODEBASE:
    *   The codebase includes comprehensive scripts for reproducing paper results. These serve as test cases for the environment setup.
    *   **Build Verification:** After the build step, manually check that the key compiled artifacts were created and are executable. This involves verifying the static analysis tools (e.g., `DumpSrcInfo`), LLVM passes (e.g., `libnogiri.so`), kernel modules, and custom workloads. A good test is to run the analysis tools with `--help` to ensure they are linked correctly against the LLVM libraries.
    *   **Initial VM and Persistent Memory Test:** Manually start the QEMU virtual machine with an emulated NVDIMM device. Verify SSH access and then, within the guest, confirm that the PMFS kernel module can be loaded and mounted on the persistent memory device. This validates the QEMU and NVDIMM configuration.
    *   **Bug Reproduction Test (Full Suite):**
        *   Script: `evaluation/bugs/reproduce_all.sh`
        *   Functionality: Reproduces all bugs found by Silhouette. This master script iterates through each `bugXX` subdirectory. For tests involving PMFS, the setup inside the guest VM involves mounting two persistent memory devices (`/dev/pmem0`, `/dev/pmem1`) at `/mnt/ramdisk` and `/mnt/scratch`. This process takes approximately 2 hours, with over 90% of the time spent on repeated VM setup for each bug to ensure a clean test environment.
    *   **Targeted Bug Reproduction Test (e.g., PMFS truncate bug):**
        *   Script: A single bug can be reproduced by navigating to its specific subdirectory (e.g., `evaluation/bugs/bug1`) and following the instructions in its local `readme.md` file.
        *   Functionality: This provides a much faster way to test a specific bug configuration (10-15 minutes). For example, `bug1` tests a known issue in PMFS related to the `truncate()` system call, which can cause a crash on mount after a failure. Successfully running this test is a strong indicator that the PMFS build and PM emulation environment is correctly configured.
    *   **Scalability Evaluation (Full Workload):**
        *   Scripts: `evaluation/scalability/seq1/run_all.sh`, `evaluation/scalability/seq2/run_all.sh`, `evaluation/scalability/seq3/run_all.sh`
        *   Functionality: These master scripts run a full workload evaluation across 9 different test combinations (NOVA/PMFS/WineFS filesystems with Silhouette/mech2cp, Invariant+Comb/mechcomb, and 2CP crash plan generation schemes). This process involves the on-the-fly generation of test cases using the ACE workload generator, which creates and compiles thousands of small test programs based on sequences of file system operations.
            *   **seq1:** Takes ~1.5 hours with 5 VMs (68 test cases).
            *   **seq2:** Takes ~4.5 hours with 20 VMs (4K test cases). This test generates the data for Figure 1 and Table 9 from the paper.
            *   **seq3:** A very long test with 20 VMs (50K test cases).
        *   Analysis Script: `evaluation/scalability/seq2/plot.sh` script analyzes the raw data from the `seq2` run and generates `figure_1.pdf` and `table_9.txt`.
    *   **Scalability Evaluation (Single Sub-test):**
        *   Scripts: e.g., `evaluation/scalability/seq2/nova/mech2cp/run_all.sh`
        *   Functionality: Allows running a single combination of filesystem and crash plan scheme for a given workload. For example, the `seq2/nova/mech2cp` test takes ~30 minutes with 20 VMs. This is useful for targeted testing but does not generate the final figures or tables; it only produces raw data in its local `result` directory.

4.  COMPLETE TODO LIST:
    *   **Step 1: Verify Host Environment Prerequisites**
        *   Open a terminal.
        *   Confirm OS is Ubuntu 20.04+ compatible: `lsb_release -a`
        *   Confirm Python version is 3.10.x: `python3.10 --version`
        *   Check for KVM support (output should be > 0): `egrep -c '(vmx|svm)' /proc/cpuinfo`. **Note for containerized environments:** To use KVM, the container must be launched with privileges to access the host's KVM device (e.g., `docker run --device /dev/kvm ...`).
        *   Check for Kernel DAX and PMEM support (output should be `...=y` or `=m` for both):
            ```shell
            grep CONFIG_FS_DAX /boot/config-$(uname -r)
            grep CONFIG_BLK_DEV_PMEM /boot/config-$(uname -r)
            ```
        *   Check for sufficient disk space (at least 150 GB recommended for the project directory and VM clones): `df -h /home/cc/EnvGym/data`
        *   Note: A CPU that supports Persistent Memory is required to run the NOVA and PMFS tests with native performance. Emulation is possible but may affect results.

    *   **Step 2: Clone Silhouette Repository and Submodules**
        *   Create the main project directory: `mkdir -p /home/cc/EnvGym/data/Silhouette`
        *   Navigate into the directory: `cd /home/cc/EnvGym/data/Silhouette`
        *   Clone the repository: `git clone https://github.com/iaoing/Silhouette.git`
        *   Navigate into the cloned repository: `cd Silhouette`
        *   Initialize and update Git submodules: `git submodule update --init --recursive`

    *   **Step 3: Download the Guest VM Image**
        *   Create a directory for the QEMU image: `mkdir -p /home/cc/EnvGym/data/Silhouette/qemu_imgs`
        *   Navigate into the new directory: `cd /home/cc/EnvGym/data/Silhouette/qemu_imgs`
        *   Download the VM image from Zenodo (~30 GB): `wget https://zenodo.org/records/14550794/files/silhouette_guest_vm.qcow2`
        *   Verification: Confirm the file `silhouette_guest_vm.qcow2` exists and is large (~30 GB) using `ls -lh`.

    *   **Step 4: Install Dependencies**
        *   Navigate to the cloned repository directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette`
        *   **Note:** The following commands are tailored for an Ubuntu 20.04 base, as it requires external repositories for Python 3.10 and LLVM 15. `sudo` may not be required if running as the root user (e.g., in a Docker container).
        *   **Install Core Build Tools and Add Repositories:**
            ```shell
            sudo apt-get update
            sudo apt-get install -y software-properties-common wget gnupg curl
            # Add PPA for Python 3.10
            sudo add-apt-repository -y ppa:deadsnakes/ppa
            # Add LLVM 15 repository
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
            sudo apt-get update
            ```
        *   **Install Specific Versions of Python, LLVM, and Headers:**
            ```shell
            sudo apt-get install -y python3.10 python3.10-dev python3.10-distutils
            sudo apt-get install -y llvm-15-dev clang-15
            sudo apt-get install -y linux-headers-$(uname -r)
            ```
        *   **Install pip for Python 3.10 and run the project's dependency script:**
            ```shell
            # Ensure pip is installed for Python 3.10
            curl https://bootstrap.pypa.io/get-pip.py | sudo python3.10
            # Run the project's dependency script which installs QEMU, build tools, and Python packages
            bash ./install_dep.sh
            ```

    *   **Step 5: Configure Build Environment and Build Tools, LLVM Passes, Kernel Modules, and Workloads**
        *   **Note:** This step compiles all the necessary prerequisite components: the custom analysis tools, the LLVM instrumentation passes, the baseline (uninstrumented, non-buggy) kernel modules, and custom workloads. The final, instrumented and potentially buggy kernel modules are built on-the-fly by the test scripts in later steps.
        *   Set the `LLVM15_HOME` environment variable. This is required for building several tools and passes. The standard path on Ubuntu is `/usr/lib/llvm-15`.
            ```shell
            export LLVM15_HOME=/usr/lib/llvm-15
            ```
        *   Navigate to the `tools` directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools`
        *   Compile all tools. The `LLVM15_HOME` variable must be set in the current shell.
            ```shell
            for d in */ ; do (cd "$d" && [ -f Makefile ] && make); done
            ```
        *   Navigate to the `trace` build directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/trace/build-llvm15`
        *   Compile the LLVM instrumentation passes (e.g., `libnogiri.so`): `make`
        *   Navigate to the NOVA module source directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/nova-chipmunk-disable-chipmunk-bugs`
        *   Compile the baseline NOVA kernel module: `make`
        *   Navigate to the PMFS module source directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/pmfs-chipmunk-disable-chipmunk-bugs`
        *   Compile the baseline PMFS kernel module: `make`
        *   Navigate to the WINEFS module source directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/winefs-chipmunk-disable-chipmunk-bugs`
        *   Compile the baseline WINEFS kernel module: `make`
        *   Navigate to the custom workload directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/workload/custom_workload/base_ops`
        *   Compile the custom workload executables: `make`
        *   **Verification:**
            *   Confirm the static analysis tools were compiled and are linked correctly by running them with `--help`.
                ```shell
                /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/src_info/DumpSrcInfo --help
                /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/struct_layout_ast/DumpStructLayout --help
                ```
            *   Confirm other key artifacts exist using `ls`:
                ```shell
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/disk_content/DumpDiskContent
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/disk_content/ctx.so
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/md5/md5.so
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/struct_layout_pass/DumpStructLayout.so
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/trace/build-llvm15/libnogiri.so
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/nova-chipmunk-disable-chipmunk-bugs/nova.ko
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/pmfs-chipmunk-disable-chipmunk-bugs/pmfs.ko
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/winefs-chipmunk-disable-chipmunk-bugs/winefs.ko
                ls /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/workload/custom_workload/base_ops/*.exe
                ```

    *   **Step 6: Prepare Environment**
        *   Navigate to the repository root: `cd /home/cc/EnvGym/data/Silhouette/Silhouette`
        *   Run the preparation script (requires sudo privileges): `bash ./prepare.sh`
        *   **Verification:**
            *   Confirm `memcached` is stopped and disabled: `systemctl is-active memcached`. The output should be `inactive`.
            *   Confirm SSH private key permissions are correct: `ls -l codebase/scripts/fs_conf/sshkey/fast25_ae_vm`. The permissions should start with `-rw-------`.

    *   **Step 7: Create NVDIMM Backing File for PMFS Testing**
        *   The PMFS tests require emulated persistent memory. Create a 64GB file to serve as the backing image for one NVDIMM device. Note that the full test suite requires two such devices.
            ```shell
            truncate -s 64G /home/cc/EnvGym/data/Silhouette/pmem.img
            ```
        *   Verification: Confirm the file `pmem.img` exists and is 64GB in size: `ls -lh /home/cc/EnvGym/data/Silhouette/pmem.img`.

    *   **Step 8: Test the VM and Persistent Memory Setup**
        *   **Note:** This command requires KVM support. If running in a container, ensure it was started with access to `/dev/kvm`. If KVM is unavailable, you must modify this command and the project script `codebase/scripts/vm_mgr/vm_instance.py` to remove KVM acceleration flags (`-enable-kvm`, `accel=kvm`) for emulation mode, which will be significantly slower.
        *   Start the VM with an attached NVDIMM device for testing.
            ```shell
            qemu-system-x86_64 \
              -machine pc-q35-focal,accel=kvm,nvdimm=on \
              -cpu host -smp cpus=1 -m 4G,slots=8,maxmem=128G \
              -object memory-backend-file,id=mem1,share=on,mem-path=/home/cc/EnvGym/data/Silhouette/pmem.img,size=64G \
              -device nvdimm,id=nvdimm1,memdev=mem1,label-size=2M \
              -enable-kvm \
              -drive file=/home/cc/EnvGym/data/Silhouette/qemu_imgs/silhouette_guest_vm.qcow2,format=qcow2,index=0,media=disk \
              -boot once=c -vnc :1 -net nic -net user,hostfwd=tcp::9001-:22 -daemonize
            ```
        *   Wait for 1 minute for the VM to boot.
        *   Copy the compiled PMFS module and setup script to the VM:
            ```shell
            scp -P 9001 /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/pmfs-chipmunk-disable-chipmunk-bugs/pmfs.ko bing@localhost:~
            scp -P 9001 /home/cc/EnvGym/data/Silhouette/Silhouette/thirdPart/pmfs-chipmunk-disable-chipmunk-bugs/intel-setup-pmfs.sh bing@localhost:~
            ```
        *   SSH into the VM. The password is `123456`.
            ```shell
            ssh -p 9001 bing@localhost
            ```
        *   Inside the VM, run the setup script with sudo and verify the mount.
            ```shell
            # Inside VM
            sudo bash ./intel-setup-pmfs.sh
            df -h /mnt/ramdisk
            ```
            A successful mount confirms the NVDIMM setup is working.
        *   Exit the SSH session: `exit`
        *   Terminate the QEMU VM process: `pkill qemu-system-x86_64`

    *   **Step 9: Run Bug Reproduction (Estimated Time: ~2 hours)**
        *   Navigate to the bug evaluation directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/bugs`
        *   Start the reproduction script in the background: `nohup bash ./reproduce_all.sh &`
        *   Verification: After the script completes, check the `readme.md` file within each `bugXX` subdirectory (e.g., `evaluation/bugs/bug1/readme.md`) for Silhouette's output and bug details.

    *   **Step 10: Run Scalability Evaluations (Optional)**
        *   **Option A: Test an Entire Workload (e.g., ACE-seq2, ~4.5 hours)**
            *   Navigate to the `seq2` test directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2`
            *   Clean up any old results from previous runs: `bash ./cleanup_all.sh`
            *   Start the test in the background: `nohup bash ./run_all.sh &`
            *   After the script completes (approx. 4.5 hours), generate the plots and tables: `bash ./plot.sh`
            *   **Verification:**
                *   Check for the generated table: `cat /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2/table_9.txt`
                *   Check for the generated PDF figure: `ls /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2/figure_1.pdf`.
                *   Check for raw result directories: `ls -d /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2/nova/mech2cp/result`.
        *   **Option B: Test a Single Sub-test of a Workload (e.g., ACE-seq2 NOVA with Silhouette scheme, ~30 mins)**
            *   Navigate to the specific test directory: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2/nova/mech2cp`
            *   Clean up any old results: `bash ./cleanup_all.sh`
            *   Start the test in the background: `nohup bash ./run_all.sh &`
            *   **Verification:**
                *   After completion, confirm the raw result directory exists: `ls -d /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2/nova/mech2cp/result`
                *   Inspect a raw result file: `cat /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/scalability/seq2/nova/mech2cp/result/result_elapsed_time/result_time.txt`

    *   **Step 11: Troubleshoot (If Errors Occur)**
        *   **General Cleanup for Failed Tests:**
            1.  Stop running scripts: `pkill -f run.sh; pkill -f run_all.sh; pkill -f reproduce_all.sh`
            2.  Run the general cleanup script: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation && bash ./cleanup_for_testing.sh`
            3.  For bug reproduction failures, reset the source code: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/bugs && bash ./disable_all_bugs.sh`
            4.  Optional: Clean up generated results: `cd /home/cc/EnvGym/data/Silhouette/Silhouette/evaluation/bugs && bash ./cleanup_all.sh`
        *   **Build Failures:**
            *   Ensure `make`, `g++`, `clang-15`, `llvm-15-dev`, and the correct `linux-headers` are correctly installed.
            *   If a build fails with an `Undefined LLVM15_HOME` error, ensure you have correctly set the `LLVM15_HOME` environment variable in your shell.
        *   **Debugging Static Analysis Tool Failures:**
            *   If an evaluation script fails during an "instrumentation" phase, the custom tools (e.g., `DumpSrcInfo`) may not be able to find LLVM shared libraries. Test the tool manually: `LD_LIBRARY_PATH=/usr/lib/llvm-15/lib /home/cc/EnvGym/data/Silhouette/Silhouette/codebase/tools/src_info/DumpSrcInfo --help`.
        *   **PMFS or NOVA Test Failures:**
            *   Perform the manual verification in **Step 8** to isolate issues with the NVDIMM devices.
            *   If the `intel-setup-pmfs.sh` script fails inside the VM, run the commands manually to get a specific error: `sudo insmod ./pmfs.ko` followed by `sudo mount -t pmfs -o init /dev/pmem0 /mnt/ramdisk`.
        *   **SSH Failures:** Manually inspect and clean up SSH configurations: check `~/.ssh/config` for any unexpected host entries.
        *   **Custom Path Failures:** Double-check that all configuration files under `Silhouette/codebase/scripts/fs_conf/` have been correctly updated with the path `/home/cc/EnvGym/data/Silhouette`.