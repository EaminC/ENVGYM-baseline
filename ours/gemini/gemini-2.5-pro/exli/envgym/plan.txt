=== ENVIRONMENT SETUP PLAN ===

1.  DOWNLOADS NEEDED:
    *   **For Both Workflows:**
        *   ExLi Project Source Code: The complete project repository, which includes `java/raninline/pom.xml`, `java/jacoco-extension/pom.xml`, and `poms/logback.xml`.
        *   (Optional but Recommended) ExLi Pre-generated Data (`exlidata`): A separate Git repository containing pre-generated test data. Highly recommended to skip the multi-day test generation process.
    *   **For Reproduction Workflow (Recommended):**
        *   Docker: Docker Desktop (for Windows/macOS) or Docker Engine (for Linux). The provided Docker version 28.1.1 is fully compatible.
        *   All other dependencies (Conda, Python, Java 8, Maven, ITest, etc.) are automatically managed within the Docker environment.
    *   **For Local Development Workflow (Alternative):**
        *   Conda: Anaconda or Miniconda. Required for managing the Python environment.
        *   Git: For cloning the repositories.
        *   SDKMAN!: A command-line tool for managing parallel versions of multiple Software Development Kits, including Java and Maven.
        *   The `java/install.sh` script will use SDKMAN! to install the required Java version (`8.0.302-open`) and Maven version (`3.8.6`). This is consistent with the Java 8 target and dependencies specified in the project's `pom.xml` files.
        *   Python >= 3.7 is required. The setup scripts will manage the specific version and dependencies.
        *   Key Python dependencies (managed by setup scripts): `seutil`, `xmltodict`, `tqdm`, `universalmutator`, and others for development/research like `pandas`, `seaborn`, and `black`.
        *   Java dependencies (managed automatically by Maven via `pom.xml` files): `javaparser-core`, `gson`, `jacoco`, `commons-text`, `xstream`, `maven-core`, `plexus-component-annotations`, `slf4j-api`, `logback-classic`, and JUnit for testing. These do not require manual download.

2.  FILES TO CREATE:
    *   **Files to Manually Create:** None. All necessary scripts and configuration files are included in the project repository.
    *   **Key Configuration Files Provided in the Repository:**
        *   `reproduce.sh`, `prepare-conda-env.sh`, `java/install.sh`, `python/setup.py`: Core scripts for setting up and running the tool.
        *   `java/.../pom.xml`: Maven project files that define Java dependencies and build configurations.
        *   `poms/logback.xml`: A configuration file for the Logback logging framework. It is configured by default to show only `ERROR` level messages on the console to keep the output clean. More detailed logs are saved to files specified at runtime.
    *   **Files/Directories Generated by the Workflow:** The setup and execution process will generate several directories and files within your working directory (`/home/cc/EnvGym/data/exli`). These are intentionally excluded from version control. Key generated locations include:
        *   `/home/cc/EnvGym/data/exli/target/`: Contains compiled Java artifacts (`.jar` files) after running the Maven build scripts.
        *   `/home/cc/EnvGym/data/exli/log/`: Contains detailed logs from the tool's execution. The level of detail in these files is typically higher than the console output.
        *   `/home/cc/EnvGym/data/exli/results/`: Stores structured output data, such as identified target statements and reports.
        *   `/home/cc/EnvGym/data/exli/all-tests/`, `/home/cc/EnvGym/data/exli/all-inline-tests/`, `/home/cc/EnvGym/data/exli/generated-tests/`: Directories where the generated test suites are saved.
        *   `__pycache__/`, `*.egg-info/`: Standard Python cache and build directories.
        *   `jacoco.exec`: JaCoCo coverage report files generated during testing.

3.  NECESSARY TEST CASES IN THE CODEBASE:
    *   None. The user is not required to write any test cases for the ExLi tool itself. The setup plan focuses on configuring the environment to *use* the tool to generate tests for other Java projects.

4.  COMPLETE TODO LIST:
    *   This guide provides two distinct workflows. The Docker workflow is recommended for exact reproduction of paper results. The Local Conda workflow is for users who wish to develop or modify the ExLi tool directly on their host machine.

---
### **Workflow A: Full Reproduction using Docker (Recommended)**
---

-   **Step 1: Verify Docker Installation and Service**
    *   Action: Confirm that Docker is installed and the service is running. The provided version 28.1.1 is fully supported.
    *   Verification: Open a terminal and run `docker --version`. You should see the Docker version information. Run `docker info` to ensure the service/daemon is active.

-   **Step 2: Clone the ExLi Project Repository**
    *   Action: Ensure the project repository is cloned into the specified working directory `/home/cc/EnvGym/data/exli`. All subsequent host-side commands should be run from this directory.
    *   Command: `git clone [PROJECT_GIT_URL] /home/cc/EnvGym/data/exli` (Replace `[PROJECT_GIT_URL]` with the actual Git URL) followed by `cd /home/cc/EnvGym/data/exli`.
    *   Verification: Your current working directory should be `/home/cc/EnvGym/data/exli`.

-   **Step 3: (Optional) Download Pre-generated Data for Full Reproduction**
    *   Action: From the project root (`/home/cc/EnvGym/data/exli`), clone the pre-generated data repository. This data will be used by the `reproduce.sh` script to avoid a multi-day test generation process.
    *   Command: `git clone https://pipiyu@bitbucket.org/sedata/exlidata.git`
    *   Verification: A directory named `exlidata` should now exist at `/home/cc/EnvGym/data/exli/exlidata`.

-   **Step 4: Build the Docker Image**
    *   Action: From the project root (`/home/cc/EnvGym/data/exli`), build the Docker image. This process reads the `Dockerfile`, installs all dependencies, and builds the Java components. The `x86_64` architecture is fully supported, and this CPU-based process does not require a GPU.
    *   Command: `docker build -t exli .`
    *   Verification: After the build completes successfully, run `docker images`. You should see an image named `exli` in the list.

-   **Step 5: Run the Docker Container**
    *   Action: Start an interactive session inside the newly created Docker container. This will log you in as the `itdocker` user.
    *   Command: `docker run -it exli`
    *   Verification: Your terminal prompt should change, indicating you are now inside the container (e.g., `itdocker@<container_id>:~$`).

-   **Step 6: Activate the Conda Environment**
    *   Action: The `exli` Conda environment was created during the image build process. You only need to activate it.
    *   Command (inside the container): `conda activate exli`
    *   Verification: Your terminal prompt should now be prefixed with `(exli)`, for example: `(exli) itdocker@<container_id>:~$`.

-   **Step 7: Navigate to the ExLi Python Directory**
    *   Action: The ExLi project was cloned into `/home/itdocker/exli` during the build. Navigate to the python scripts directory to run commands.
    *   Command (inside the container): `cd /home/itdocker/exli/python`
    *   Verification: Run `pwd`. The output should be `/home/itdocker/exli/python`.

-   **Step 8: Execute a Task**
    *   At this point, the environment is ready. You can either perform a quick verification run or launch the full experiment reproduction. Note that console output is minimal by default (ERROR level only). For detailed progress, inspect the log file specified by the `--log_path` argument.
    *   **Option A: Quick Verification Run**
        *   Action: Execute the main commands for a single example project to confirm the tool is working correctly.
        *   Command 1 (Find target statements): `python -m exli.main find_target_stmts --project_name=Bernardo-MG_velocity-config-tool --sha=26226f5 --target_stmts_path=${HOME}/exli/results/target-stmt/Bernardo-MG_velocity-config-tool-26226f5.txt`
        *   Verification 1: `ls -l ${HOME}/exli/results/target-stmt/Bernardo-MG_velocity-config-tool-26226f5.txt` (This should list the file).
        *   Command 2 (Generate tests): `python -m exli.main run --project_name=Bernardo-MG_velocity-config-tool --sha=26226f5 --randoop=True --randoop_tl=100 --dev=True --evosuite=True --evosuite_tl=120 --seed=42 --log_path=${HOME}/exli/log/raninline.log`
        *   Verification 2: Check that the output directory and log file were created: `ls -d ${HOME}/exli/all-tests/Bernardo-MG_velocity-config-tool-26226f5` and `ls -l ${HOME}/exli/log/raninline.log`.
    *   **Option B: Full Experiment Reproduction**
        *   Action: Run the main reproduction script to replicate the results from the paper.
        *   Command (inside the container): `bash reproduce.sh`
        *   Verification: Monitor the script's output for progress through its multiple stages. Detailed logs will be generated within the `log/` directory.

---
### **Workflow B: Local Development Setup using Conda (Alternative)**
---

-   **Step 1: Install Prerequisites**
    *   Action: Install Conda (Miniconda or Anaconda), Git, and SDKMAN! on your host machine.
    *   Verification: Run `conda --version`, `git --version`, and `sdk version` in your terminal to confirm they are installed and available in your system's PATH.

-   **Step 2: Clone the ExLi Project Repository**
    *   Action: Ensure the project repository is cloned into the specified working directory `/home/cc/EnvGym/data/exli`. All subsequent host-side commands should be run from this directory.
    *   Command: `git clone [PROJECT_GIT_URL] /home/cc/EnvGym/data/exli` (Replace `[PROJECT_GIT_URL]` with the actual Git URL) followed by `cd /home/cc/EnvGym/data/exli`.
    *   Verification: Your current working directory should be `/home/cc/EnvGym/data/exli`.

-   **Step 3: (Optional) Download Pre-generated Data**
    *   Action: From the project root (`/home/cc/EnvGym/data/exli`), clone the pre-generated data repository.
    *   Command: `git clone https://pipiyu@bitbucket.org/sedata/exlidata.git`
    *   Verification: A directory named `exlidata` should exist at `/home/cc/EnvGym/data/exli/exlidata`.

-   **Step 4: Install, Build, and Configure Java Components**
    *   **4.1. Install Java/Maven and Build Projects**
        *   Action: From the project root (`/home/cc/EnvGym/data/exli`), run the provided script to automatically download the correct Java and Maven versions and build the Java projects.
        *   Command: `bash java/install.sh`
        *   Verification: The script should complete successfully. Confirm the JAR files exist: `ls java/raninline/target/raninline-*.jar` and `ls java/jacoco-extension/target/jacoco-extension-*.jar`.
    *   **4.2. Install the Jacoco Maven Extension**
        *   Action: Copy the `jacoco-extension` JAR into your SDKMAN-managed Maven installation's extension directory. This enables automatic test coverage collection.
        *   Command: `cp java/jacoco-extension/target/jacoco-extension-*.jar $(sdk home maven 3.8.6)/lib/ext/`
        *   Verification: Check that the file was copied successfully: `ls $(sdk home maven 3.8.6)/lib/ext/jacoco-extension-*.jar`.
        *   **Note:** This extension will now run on *every* `mvn test` command using this Maven installation. If you need to disable it, you must manually remove the JAR file from the `lib/ext` directory.

-   **Step 5: Create Conda Environment and Install Python Package**
    *   Action: Use the provided script to create a dedicated Conda environment. Then, install the `exli` Python package in editable mode with all dependencies.
    *   Command 1 (Navigate to Python directory): `cd python`
    *   Command 2 (Create environment): `bash prepare-conda-env.sh` (You can optionally pass a Python version, e.g., `bash prepare-conda-env.sh 3.9`)
    *   Command 3 (Install package): After the environment is activated by the script, run `pip install -e .[dev,research]`
    *   Verification 1: The script should complete without errors, and your terminal prompt should be prefixed with `(exli)`, indicating the environment is active.
    *   Verification 2: Run `pip list | grep exli-research`. You should see the `exli-research` package listed.

-   **Step 6: Execute a Task**
    *   At this point, the local environment is ready. You can run a quick verification. Ensure the `exli` conda environment is active.
    *   **Quick Verification Run**
        *   Action: From the `/home/cc/EnvGym/data/exli/python/` directory, execute the main commands for a single project. The paths below are absolute to prevent errors.
        *   Command 1 (Find target statements): `python -m exli.main find_target_stmts --project_name=Bernardo-MG_velocity-config-tool --sha=26226f5 --target_stmts_path=/home/cc/EnvGym/data/exli/results/target-stmt/Bernardo-MG_velocity-config-tool-26226f5.txt`
        *   Verification 1: `ls -l /home/cc/EnvGym/data/exli/results/target-stmt/Bernardo-MG_velocity-config-tool-26226f5.txt` (This should list the file).
        *   Command 2 (Generate tests): `python -m exli.main run --project_name=Bernardo-MG_velocity-config-tool --sha=26226f5 --randoop=True --randoop_tl=100 --dev=True --evosuite=True --evosuite_tl=120 --seed=42 --log_path=/home/cc/EnvGym/data/exli/log/raninline.log`
        *   Verification 2: Check that the output directory and log file were created: `ls -d /home/cc/EnvGym/data/exli/all-tests/Bernardo-MG_velocity-config-tool-26226f5` and `ls -l /home/cc/EnvGym/data/exli/log/raninline.log`.
    *   **Developer Tip: Adjusting Log Verbosity**
        *   The console output is minimal by default. For debugging, you may want more detailed logs.
        *   Action: Open `/home/cc/EnvGym/data/exli/poms/logback.xml` and change `<root level="ERROR">` to `<root level="INFO">` or `<root level="DEBUG">`.
        *   You do not need to rebuild the Java projects; changes to this resource file will be picked up on the next run.
    *   **Note on Full Reproduction:** The `reproduce.sh` script is written with the Docker environment's file structure in mind. Running it outside of Docker may require modifying its internal paths.

-   **Conclusion: Environment Setup Complete**
    *   The environment is now configured. You can proceed to run experiments or develop the tool.