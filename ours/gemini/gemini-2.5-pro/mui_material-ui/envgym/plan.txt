This plan consists of two files: `Dockerfile` and `nginx.conf`. These should be placed in the working directory: `/home/cc/EnvGym/data/mui_material-ui`.

### **`Dockerfile`**

```dockerfile
#
# Adjusted Environment Plan: Dockerfile for mui/material-ui
#
# This multi-stage build plan is optimized for the provided hardware and project structure.
# - Target Architecture: Explicitly set to linux/amd64 for compatibility.
# - CPU Optimization: Capitalizes on the high CPU count (96 cores) for parallel dependency installation and project compilation.
# - GPU: Uses standard base images, avoiding nvidia/cuda as no GPU is present.
# - BuildKit: Leverages BuildKit features like multi-stage builds and improved layer caching.
# - Paths: Assumes all paths are relative to the working directory /home/cc/EnvGym/data/mui_material-ui.
#

# --- Stage 1: Builder ---
# This stage installs dependencies and builds the project artifacts.
# It uses a Node.js LTS image compatible with the linux/amd64 architecture.
FROM --platform=linux/amd64 node:20-bookworm-slim AS builder

# Set the working directory inside the container.
WORKDIR /app

# Copy package manifests and lockfile first to leverage Docker layer caching.
# This prevents re-installing dependencies on every source code change.
COPY package.json yarn.lock ./

# The material-ui repository is a monorepo. We need the top-level package.json
# from each workspace to be present for yarn to construct the dependency tree correctly.
# Copying the packages directory structure is necessary before installation.
COPY packages/ packages/

# Install dependencies using Yarn.
# This CPU-intensive step will be accelerated by the high core count (96) of the host machine.
RUN yarn install --frozen-lockfile --ignore-scripts

# Copy the rest of the source code into the container.
COPY . .

# Build the project, including the documentation site.
# This is a highly parallelizable, CPU-bound task that will significantly benefit from 96 cores.
RUN yarn docs:build


# --- Stage 2: Production ---
# This stage creates a lightweight final image to serve the built documentation.
# It uses a minimal NGINX image, which is linux/amd64 compatible and requires no GPU.
FROM --platform=linux/amd64 nginx:1.25-alpine

# Copy the built static documentation files from the 'builder' stage.
# The output of `yarn docs:build` for the Next.js site is in the 'docs/build' directory.
COPY --from=builder /app/docs/build /usr/share/nginx/html

# Copy the custom NGINX configuration file.
# This is required to correctly handle client-side routing for the Single Page Application (SPA).
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 for the NGINX web server.
EXPOSE 80

# Command to run NGINX in the foreground when the container starts.
CMD ["nginx", "-g", "daemon off;"]

```

### **`nginx.conf`**

```nginx
#
# Adjusted Environment Plan: NGINX Configuration
#
# This configuration file is designed to serve the static documentation site
# built from the mui/material-ui repository.
# It ensures that all requests are correctly routed to index.html to support
# client-side routing (a standard requirement for modern JavaScript applications).
#

server {
  # Listen on port 80, the standard port for HTTP.
  listen 80;
  server_name localhost;

  # Define the root directory for web files.
  # This path must match the destination of the COPY command in the Dockerfile's production stage.
  root /usr/share/nginx/html;

  # Set the default file to serve.
  index index.html;

  location / {
    # This rule is critical for Single Page Applications (SPAs).
    # It first tries to serve the requested file as-is (e.g., /styles.css).
    # If not found, it tries to serve it as a directory (e.g., /about/).
    # If that also fails, it falls back to serving /index.html,
    # allowing the client-side JavaScript router to handle the URL.
    try_files $uri $uri/ /index.html;
  }

  # Optional: Add custom headers for security or caching policies.
  # add_header X-Frame-Options "SAMEORIGIN" always;
  # add_header X-XSS-Protection "1; mode=block" always;
  # add_header X-Content-Type-Options "nosniff" always;
}
```