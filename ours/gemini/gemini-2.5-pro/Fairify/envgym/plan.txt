Based on the provided hardware and environment information, the original setup plan has been adjusted to a containerized workflow using Docker. This ensures maximum compatibility, reproducibility, and leverages the specified `linux/amd64` architecture without requiring manual installation of dependencies on a host OS. The plan now focuses on building a Docker image and running the experiments within isolated containers.

Here is the complete adjusted plan:

=== ADJUSTED ENVIRONMENT SETUP PLAN (DOCKER) ===

1.  **DOWNLOADS AND ASSETS:**
    *   **Project Artifact (Code, Datasets, and Models):** The complete artifact is required on the host machine to build the Docker image. It can be obtained in two ways:
        -   **Git (Recommended):** A distributed version control system for cloning the latest version of the repository.
            -   URL: `https://github.com/sumonbis/Fairify`
        -   **Zenodo (Archived Version):** A specific, versioned snapshot of the artifact is available via a DOI.
            -   DOI: `10.5281/zenodo.7579939`
        -   **Note:** The artifact includes all necessary Python source code, datasets (`adult.data`, `GermanCredit.csv`, `bank-additional-full.csv`), and pre-trained benchmark models (`.h5` files). No separate downloads are needed.
    *   **Docker:** The Docker engine is the primary prerequisite for this plan. Version 28.1.1 or newer is sufficient. The plan is tailored for a Linux environment with an `x86_64` architecture, which is fully compatible.
    *   **Docker Base Image:** The environment will be built on top of the `python:3.7-slim` official Docker image. This provides the required Python 3.7.x version in a minimal Linux environment.
    *   **System Dependencies (within Docker):**
        -   **C++ Build Tools:** `build-essential` will be installed inside the Docker image using `apt-get` to handle the compilation of any required Python package dependencies.
        -   **Bash Shell:** Standard in the `python:3.7-slim` base image.
    *   **Python Packages:** All packages listed in `requirements.txt` (including `tensorflow==2.5.0`, `z3-solver`, `aif360`) will be installed via `pip` inside the Docker image.
        -   **Hardware Note:** The `tensorflow==2.5.0` package supports both CPU and GPU execution. As no GPU is available, it will automatically run in CPU-only mode. This may result in longer experiment execution times compared to a GPU-enabled system.
    *   **Jupyter Notebook (Optional):** Can be added to the `requirements.txt` file or installed in a separate Docker image if needed for development or data exploration.

2.  **FILES TO CREATE/CONFIGURE:**
    -   **`Dockerfile` (Manual Creation Required):** A file named `Dockerfile` must be created in the root of the project directory (`/home/cc/EnvGym/data/Fairify`). This file will contain the instructions to build the self-contained environment.
    -   **Project Directory Structure (Handled by `COPY`):** The project relies on a specific directory structure cloned from the repository. This structure will be copied into the Docker image.
        -   **Example Structure:** Paths like `targeted/GC/Verify-GC.py`, `src/BM/Verify-BM.py`, `targeted2/AC/Verify-AC.py`, `targeted2/BM/Verify-BM.py`, and `targeted2/GC/Verify-GC.py` will exist inside the container's working directory (`/app`).
    -   **Informational Files:** Files like `data/adult/README.md`, `relaxed/AC/res/readme.md`, `src/AC/res-race/readme.md`, etc., will be copied into the image for completeness but require no action.
    -   **Generated Result Files:** Result files (`.csv`) will be generated by the scripts running inside the container. To ensure these files persist after the container exits, a Docker volume mount will be used to map the results directories from the container back to the host filesystem.
        -   **Results Directories:** The scripts will write to directories like `relaxed/GC/res/`, `stress/AC/res/`, `targeted/AC/res/`, `targeted/BM/res/`, `targeted/GC/res/`, `targeted2/AC/res/`, `targeted2/BM/res/`, `targeted2/GC/res/`, `src/BM/res/`, `src/AC/res-race/`, `src/AC/res-sex/`, and `src/GC/res-sex/`.

3.  **NECESSARY TEST CASES IN THE CODEBASE:**
    -   **Docker Image Build Test:** The `docker build` command should complete successfully without any errors, indicating that all dependencies were installed correctly.
    -   **Python Interpreter Test:** Confirm the Python version inside the container by running `docker run --rm fairify-env python --version`. The output should be `Python 3.7.x`.
    -   **Dependency Installation Test:** After building the image, run `docker run --rm fairify-env pip list` to verify that all packages from `requirements.txt` are installed.
    -   **Dependency Import Test:** Verify that core libraries can be imported successfully within the container: `docker run --rm fairify-env python -c "import tensorflow; import z3; import aif360"`.
    -   **Repository Files Test:** Verify that key files were copied into the image by checking for a specific file's existence: `docker run --rm fairify-env ls /app/requirements.txt`.
    -   **Pre-packaged Data and Model Test:** Verify data and models exist within the container: `docker run --rm fairify-env ls /app/datasets/GermanCredit/GermanCredit.csv /app/models/GC/model-1.h5`.
    -   **Directory Structure Test:** Verify that the necessary subdirectories for experiments exist: `docker run --rm fairify-env ls /app/src/GC/Verify-GC.py /app/stress/AC/Verify-AC.py`.
    -   **Script Execution Test:** Verify that the main execution scripts are executable: `docker run --rm -w /app/targeted fairify-env ./fairify-targeted.sh GC`. The test passes if the script outputs "Started running verification for GC models." without immediate errors like 'permission denied' or 'file not found'.
    -   **Result Generation Test:** Run an experiment command with a volume mount for a brief period (and then stop it). Verify that the corresponding results directory and a `.csv` file have been created on the *host* machine.

4.  **COMPLETE TODO LIST:**
    1.  **Install Docker:**
        -   Ensure the Docker engine is installed and running on your host system.
        -   Verify by running: `docker --version`

    2.  **Download the Project Artifact:**
        -   Open your terminal on the host machine.
        -   Clone the repository from GitHub (or download and extract the Zenodo archive).
            ```bash
            git clone https://github.com/sumonbis/Fairify
            ```
        -   **Verification:** A directory named `Fairify` should be created.

    3.  **Navigate to Project Directory:**
        -   Change your current directory to the project's root:
            ```bash
            cd Fairify/
            ```
        -   **Note:** All subsequent commands should be run from this directory (`/home/cc/EnvGym/data/Fairify`).

    4.  **Create the Dockerfile:**
        -   Create a new file named `Dockerfile` in the `Fairify/` directory with the following content:
            ```dockerfile
            # Use the official Python 3.7 image as the base
            FROM python:3.7-slim

            # Set the working directory inside the container
            WORKDIR /app

            # Install C++ build tools required for some Python packages
            RUN apt-get update && apt-get install -y build-essential && \
                rm -rf /var/lib/apt/lists/*

            # Copy only the requirements file first to leverage Docker layer caching
            COPY requirements.txt .

            # Upgrade pip and install the Python dependencies
            RUN pip install --no-cache-dir --upgrade pip
            RUN pip install --no-cache-dir -r requirements.txt

            # Copy the entire project context into the working directory
            COPY . .

            # Make all shell scripts in the project executable
            RUN find . -name "*.sh" -exec chmod +x {} \;
            ```

    5.  **Build the Docker Image:**
        -   From the `Fairify/` directory, run the `docker build` command. This will execute the steps in the `Dockerfile`, creating a self-contained image named `fairify-env`.
            ```bash
            docker build -t fairify-env .
            ```
        -   **Note:** This step may take a considerable amount of time as it will download the base image and install all dependencies like TensorFlow.
        -   **Verification:** Run `docker images`. You should see `fairify-env` in the list of available images.

    6.  **Final Environment Verification:**
        -   Run the following commands to test the containerized environment:
        -   Check Python version:
            ```bash
            docker run --rm fairify-env python --version
            ```
        -   Check core package imports and TensorFlow version:
            ```bash
            docker run --rm fairify-env python -c "import tensorflow; print(f'TensorFlow version: {tensorflow.__version__}'); import z3; import aif360"
            ```
            This should execute without errors and confirm TensorFlow version `2.5.0`.

    7.  **Run the Fairify Tool:**
        -   The environment is now ready. Run experiments using `docker run`. The commands below use volume mounts (`-v`) to save the results generated inside the container back to your host machine's project directory. The working directory (`-w`) is set for each experiment to match the script's expectations.
        -   The `<dataset>` argument can be `AC`, `GC`, or `BM`.

        -   **Experiment 1: Main Verification**
            -   **Command:**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/src fairify-env ./fairify.sh <dataset>
                ```
            -   **Example (German Credit):**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/src fairify-env ./fairify.sh GC
                ```
            -   **Verification:** Check for new `.csv` files on your host machine in `src/GC/res/` or `src/GC/res-sex/`.
            -   *Note: Each model runs for 30 minutes.*

        -   **Experiment 2: Stress Test**
            -   **Command:**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/stress fairify-env ./fairify-stress.sh <dataset>
                ```
            -   **Example (Adult Census):**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/stress fairify-env ./fairify-stress.sh AC
                ```
            -   **Verification:** Check for new `.csv` files on your host in `stress/AC/res/`.
            -   *Note: Each model runs for 1 hour.*

        -   **Experiment 3: Relaxed Query Verification**
            -   **Command:**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/relaxed fairify-env ./fairify-relaxed.sh <dataset>
                ```
            -   **Example (Bank Marketing):**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/relaxed fairify-env ./fairify-relaxed.sh BM
                ```
            -   **Verification:** Check for new `.csv` files on your host in `relaxed/BM/res/`.

        -   **Experiment 4: Targeted Query Verification (`targeted` and `targeted2`)**
            -   **Command (`targeted`):**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/targeted fairify-env ./fairify-targeted.sh <dataset>
                ```
            -   **Command (`targeted2`):**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/targeted2 fairify-env ./fairify-targeted.sh <dataset>
                ```
            -   **Example (`targeted` on German Credit):**
                ```bash
                docker run --rm -it -v $(pwd):/app -w /app/targeted fairify-env ./fairify-targeted.sh GC
                ```
            -   **Verification:** Check for new `.csv` files on your host in the corresponding directory, e.g., `targeted/GC/res/`.