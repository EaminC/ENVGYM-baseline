=== ENVIRONMENT SETUP PLAN ===

1.  DOWNLOADS NEEDED:
    *   **Git:** Latest stable version for cloning the source code repository. This is a standard package available via system package managers (e.g., `apt-get install git`).
    *   **Java Development Kit (JDK):** Version 21 is required to run the complete build, including Java 21-specific integration tests. JDK 17 is also supported for core development, but some tests will be skipped. A JDK version of 9 or higher is implicitly required for working with Java Platform Module System (JPMS) features.
        *   **Note:** The project uses advanced Gradle features and plugins (like ErrorProne) that interact with compiler internals, making a modern, well-supported JDK crucial for a stable build experience. The build is configured with the Gradle Foojay Toolchains convention, which can automatically download a suitable JDK. However, a manual installation is still recommended for environment consistency.
        *   **Tool Version Managers (Recommended):** For easier management of Java versions in a command-line environment, consider using a tool like `sdkman`. The project repository may contain a `.tool-versions` file (for `asdf`) which can be adapted for `sdkman`.
        *   **System Requirement:** At least 4GB of RAM is recommended, as the Gradle build is configured to use up to 2GB of heap space (`-Xmx2048m`). The provided multi-core CPU will be leveraged automatically by Gradle for parallel task execution, speeding up the build.
    *   **Android SDK:** Required for building and testing Android-specific modules. This must be installed using the standalone command-line tools.
        *   **Required Components:** Based on the build configuration (`mockito-integration-tests/android-tests/build.gradle.kts`), you must install **Android SDK Platform 33**.
        *   **Required API Levels for Testing:** Install system images for API levels **26** and **33** to match the CI test environment (`minSdk = 26`, `targetSdk = 33`). Since the environment is `x86_64`, the `default;x86_64` system images should be used.
    *   **GraalVM (Optional):** Required for running GraalVM native image tests. The CI pipeline uses GraalVM for Java 21.
        *   **Version Requirement:** The GraalVM native build tools plugin (`org.graalvm.buildtools.native:0.11.0`) requires **JDK 17 or newer** to run.
    *   **Integrated Development Environment (IDE) (Not Applicable):** The target environment is a command-line based system. IDEs and their associated plugins are not applicable for this setup. All verification will be performed using Gradle commands.
        *   **EditorConfig & Checkstyle:** While IDE integration is not relevant, the project's code style is enforced at build time through `.editorconfig` settings (via the Spotless plugin) and Checkstyle rules (`config/checkstyle/checkstyle.xml`). All code must conform to these standards for the build to succeed.
    *   **JDK Mission Control (JMC) (Not Applicable):** JMC is a GUI-based tool and cannot be used directly in this environment. However, Java Flight Recorder (JFR) recordings can be generated during the build. These `.jfr` files can then be copied from the environment and analyzed on a separate machine that has JMC installed.
    *   **Mockito Source Code:** To be downloaded via Git from the official repository.

2.  FILES TO CREATE:
    *   **`local.properties` (Optional):** This file can be created in the project's root directory (`/home/cc/EnvGym/data/mockito_mockito`) to specify the location of the Android SDK. This is an alternative to setting a system-wide `ANDROID_HOME` environment variable, which is the recommended approach for scripted environments.
        *   **Example content for `local.properties`:**
            ```properties
            # Example path in a Linux environment
            sdk.dir=/opt/android-sdk
            ```
    *   **`.tool-versions` (Optional):** If you use a version manager like `asdf`, you can create or use this file in the project root to pin the exact Java version for development, ensuring consistency.
    *   **No other new configuration files need to be created manually.** The project repository contains all necessary build and project configuration files, including files like `AndroidManifest.xml` for Android-specific modules and the `LICENSE` file defining the project's MIT License.
        *   **Note on Build-Generated Files:** The build process will generate temporary configuration files and build outputs (e.g., `build/`, `.gradle/`). These are managed by the build script and should not be created or modified by hand. The project's `.gitignore` file correctly excludes these from version control. An exception is the GraalVM native image configuration located under `src/test/resources/META-INF/native-image/`. These files are generated by a special task using a tracing agent and are intended to be checked into source control.
        *   **Included Configuration:** The repository contains all necessary Gradle scripts (`build.gradle.kts`, `settings.gradle.kts`), version catalogs (`gradle/libs.versions.toml`), and custom build logic in `buildSrc` to define the project structure. It also includes an **`.editorconfig`** file and a **`.gitignore`** file. It contains test-specific configuration files, such as `junit-platform.properties` in multiple modules. Furthermore, it includes static analysis configurations, such as the Checkstyle rules in `config/checkstyle/checkstyle.xml` and a Java Flight Recorder (JFR) profiling configuration in `config/jfr/jfr_config.jfc`. The build scripts for modules like `mockito-errorprone` and `inline-mocks-tests` automatically configure necessary JVM arguments (e.g., `--add-exports` or `--illegal-access=deny`) for compilation and testing across different JDK versions.

3.  NECESSARY TEST CASES IN THE CODEBASE:
    *   **Execution of Existing Test Suite:** The primary verification is to run the project's entire existing test suite using the Gradle build command (`./gradlew build`). This will execute a comprehensive set of tests and static analysis checks across all modules. A successful build implies that all tests and checks have passed.
    *   **Code Formatting Check (Spotless):** Run `./gradlew spotlessCheck` to verify formatting. If it fails, run `./gradlew spotlessApply` to fix issues. This check is mandatory.
    *   **Code Style Rule Check (Checkstyle):** These checks are automatically executed as part of `./gradlew build` or `./gradlew check`.
    *   **New Unit Test Creation:** To confirm the development environment is fully functional, create a new test file programmatically and run the build.
        *   **Example:** Create a new Java class `org.mockito.NewFeatureTest.java` with the following content:
            ```java
            import org.junit.jupiter.api.Test;
            import java.util.List;
            import static org.junit.jupiter.api.Assertions.assertEquals;
            import static org.mockito.Mockito.*;

            class NewFeatureTest {
                @Test
                void testMyNewFeature() {
                    List<String> mockedList = mock(List.class);
                    when(mockedList.get(0)).thenReturn("first");
                    assertEquals("first", mockedList.get(0));
                    verify(mockedList).get(0);
                }
            }
            ```
    *   **Verification of OSGi Metadata:** A successful `./gradlew build` confirms that the OSGi metadata is valid.
    *   **Verification of Custom ErrorProne Checks (Advanced):** Temporarily introduce a code pattern that should be flagged and confirm that `./gradlew build` fails with a specific ErrorProne compilation error.
    *   **Execution of Android Tests:** If the Android SDK is configured, run the Android-specific instrumented tests on a headless emulator (API 26 or 33 recommended). The command is `./gradlew :mockito-integration-tests:android-tests:connectedCheck`.
    *   **Execution of GraalVM Native Tests:** If GraalVM (with JDK 17+) is configured, run the native image tests. The command is `./gradlew :mockito-integration-tests:graalvm-tests:nativeTest`.
    *   **Execution of Other Test Suites:** All other specific test suites listed in the original plan (e.g., Groovy, Kotlin, JPMS, OSGi, JUnit 5 extensions, parallel tests, memory tests) are executed via their respective Gradle commands (e.g., `./gradlew :mockito-integration-tests:groovy-inline-tests:test`). These are fully compatible with the command-line environment.
    *   **Execution with JFR Profiling (Advanced):** To analyze performance, run `./gradlew build -Pjfr`. This will produce a `.jfr` file in the build directory, which can be copied and analyzed on a machine with JDK Mission Control.
    *   **Regeneration of GraalVM Native Image Configuration (Advanced):** To update the configuration, run `./gradlew :mockito-integration-tests:graalvm-tests:test -PenableGraalTracingAgent`. This will update files in `src/test/resources/META-INF/native-image/`, which should then be committed.
    *   **Execution with Specific Mockito Extensions (Advanced):** The test suite can be run with different Mockito extensions by setting environment variables.
        *   **Example for inline mock maker:** `MOCK_MAKER=org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker ./gradlew build`
        *   **Example for proxy mock maker:** `MOCK_MAKER=org.mockito.proxy.ProxyMockMaker ./gradlew build`
    *   **Execution Simulating Java 11 (Advanced):** Run tests with a specific system property: `./gradlew test -DSIMULATE_JAVA11=true`

4.  COMPLETE TODO LIST:
    *   **Step 1: Install Prerequisites**
        *   Install Git and a base JDK using the system's package manager (e.g., `apt-get update && apt-get install -y git openjdk-21-jdk`). For more flexible version management, use a command-line tool like `sdkman`.
        *   Download and install the Android SDK command-line tools.
        *   Set the `ANDROID_HOME` environment variable to the SDK installation path (e.g., `export ANDROID_HOME=/opt/android-sdk`). Add `$ANDROID_HOME/cmdline-tools/latest/bin` and `$ANDROID_HOME/platform-tools` to your `PATH`.
        *   Accept SDK licenses: `yes | sdkmanager --licenses`
        *   Install required SDK components: `sdkmanager "platforms;android-33" "platform-tools"`
        *   Install emulator and system images: `sdkmanager "emulator" "system-images;android-33;default;x86_64" "system-images;android-26;default;x86_64"`
        *   (Optional) Install GraalVM for Java 21 if you intend to run native image tests.
        *   **Verification:** Open a new terminal.
            *   Run `git --version`, `java -version`, and `sdkmanager --version`. The commands should execute and display the correct versions.
            *   Ensure the `JAVA_HOME` and `ANDROID_HOME` environment variables are set correctly.

    *   **Step 2: Clone the Mockito Repository**
        *   The project source is expected to be in the working directory `/home/cc/EnvGym/data/mockito_mockito`. If not present, clone it:
        *   `git clone https://github.com/mockito/mockito.git /home/cc/EnvGym/data/mockito_mockito`
        *   Change into the project directory: `cd /home/cc/EnvGym/data/mockito_mockito`
        *   **Verification:** The directory should be populated with the project's source code, including `settings.gradle.kts` and `.editorconfig`.

    *   **Step 3: Build the Project and Run Verification Checks**
        *   In your terminal, ensure you are in the root project directory (`/home/cc/EnvGym/data/mockito_mockito`).
        *   Execute the build command: `./gradlew build`
        *   **Note:** This command uses the Gradle Wrapper, which will automatically download the correct Gradle version. Gradle will automatically utilize the available CPU cores to run tasks in parallel.
        *   **Verification:** The process should finish with a `BUILD SUCCESSFUL` message. This comprehensive command compiles, tests, and runs all static analysis checks (Spotless, Checkstyle, ErrorProne).
        *   Before committing changes, run `./gradlew check` to execute all verification tasks. To fix formatting, run `./gradlew spotlessApply`.

    *   **Step 4: Create and Run a New Test Case**
        *   From the project root, programmatically create a new test file:
            ```bash
            mkdir -p mockito-core/src/test/java/org/mockito/
            cat <<EOF > mockito-core/src/test/java/org/mockito/MyFirstMockitoContributionTest.java
            package org.mockito;

            import org.junit.jupiter.api.Test;
            import java.util.List;
            import static org.junit.jupiter.api.Assertions.assertEquals;
            import static org.mockito.Mockito.*;

            class MyFirstMockitoContributionTest {
                @Test
                void testMyNewFeature() {
                    List<String> mockedList = mock(List.class);
                    when(mockedList.get(0)).thenReturn("first");
                    assertEquals("first", mockedList.get(0));
                    verify(mockedList).get(0);
                }
            }
            EOF
            ```
        *   Run the tests for the core module to verify: `./gradlew :mockito-core:test`
        *   **Verification:** The test run should complete with a `BUILD SUCCESSFUL` message, indicating the new test was compiled and passed.

    *   **Step 5: Run Android Instrumented Tests (Optional but Recommended)**
        *   This step is only available if the Android SDK was configured in Step 1.
        *   Create an Android Virtual Device (AVD): `echo "no" | avdmanager create avd -n test_avd -k "system-images;android-33;default;x86_64" --force`
        *   Start the emulator in the background headlessly: `emulator -avd test_avd -no-window -no-audio &`
        *   Wait for the emulator to boot completely (this may take a few minutes).
        *   Run the Android tests: `./gradlew :mockito-integration-tests:android-tests:connectedCheck`
        *   **Verification:** The command should execute all Android instrumented tests on the emulator and finish with a `BUILD SUCCESSFUL` message.

    *   **Step 6: Run Specific Integration Test Suites (Optional)**
        *   Validate individual parts of the project by running their specific test tasks. These commands should be run from the project root (`/home/cc/EnvGym/data/mockito_mockito`).
        *   **JUnit 5 Extension Tests:** `./gradlew :mockito-integration-tests:junit-jupiter-extension-tests:test`
        *   **JUnit 5 Inline Mock Maker Tests:** `./gradlew :mockito-integration-tests:junit-jupiter-inline-mock-maker-extension-tests:test`
        *   **JUnit 5 Parallel Tests:** `./gradlew :mockito-integration-tests:junit-jupiter-parallel-tests:test`
        *   **Programmatic Mock Maker Tests:** `./gradlew :mockito-integration-tests:programmatic-tests:test`
        *   **JPMS (Module) Tests:** `./gradlew :mockito-integration-tests:module-named-tests:test`
        *   **Java 9 Module Tests:** `./gradlew :mockito-integration-tests:module-tests:test`
        *   **OSGi Tests:** `./gradlew :mockito-integration-tests:osgi-tests:test`
        *   **Groovy Inline Tests:** `./gradlew :mockito-integration-tests:groovy-inline-tests:test`
        *   **General Groovy Tests:** `./gradlew :mockito-integration-tests:groovy-tests:test`
        *   **Kotlin Coroutines Tests:** `./gradlew :mockito-integration-tests:kotlin-release-coroutines-tests:test`
        *   **General Kotlin Tests:** `./gradlew :mockito-integration-tests:kotlin-tests:test`
        *   **Inline Mocks Tests:** `./gradlew :mockito-integration-tests:inline-mocks-tests:test`
        *   **Memory Usage Tests:** `./gradlew :mockito-integration-tests:memory-tests:test`
        *   **Java 21 Tests (Requires JDK 21):** `./gradlew :mockito-integration-tests:java-21-tests:test`
        *   **Verification:** For each command, the build should finish with a `BUILD SUCCESSFUL` message.

    *   **Step 7: Run GraalVM Native Tests (Optional)**
        *   This step is only available if GraalVM was installed in Step 1 and you are using JDK 17+.
        *   Ensure your `JAVA_HOME` points to the GraalVM installation and it is on your system's `PATH`.
        *   Run the command: `./gradlew :mockito-integration-tests:graalvm-tests:nativeTest`
        *   **Verification:** The native tests should compile and execute, finishing with a `BUILD SUCCESSFUL` message.

    *   **Step 8: Run Advanced Test Configurations (Optional)**
        *   To replicate specific CI environments, use environment variables. For example, to test with the inline mock maker:
        *   `MOCK_MAKER=org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker ./gradlew build`
        *   **Verification:** The build should complete successfully.

    *   **Step 9: Run with JFR Profiling (Advanced, Optional)**
        *   Run the command: `./gradlew build -Pjfr`
        *   **Verification:** The build should complete successfully, and a JFR recording file (e.g., `build/jfr/recording.jfr`) should be created. This file can be copied out of the environment for analysis with JMC.

    *   **Step 10: Update GraalVM Native Image Configuration (Advanced)**
        *   If your contributions affect features that rely on reflection, run the tracing agent:
        *   `./gradlew :mockito-integration-tests:graalvm-tests:test -PenableGraalTracingAgent`
        *   **Verification:** The command should complete successfully and may modify files under `src/test/resources/META-INF/native-image/`. Review and commit these changes.