This is the adjusted environment setup plan, tailored to your specified hardware and environment.

=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1.  DOWNLOADS NEEDED:
    *   **CMake**: Version 3.16 or higher. A cross-platform build system generator.
    *   **Meson**: Version 0.54.1 or higher. An alternative open source build system.
    *   **Ninja**: A small build system with a focus on speed, used as the primary backend for Meson and some CMake configurations.
    *   **Bazelisk**: A wrapper for Bazel that automatically manages and invokes the correct Bazel version for a project. This is the recommended way to run Bazel.
    *   **Conan**: Version 1.x (1.63 or higher) and 2.x (2.1 or higher). A C/C++ package manager. Both major versions are used in CI and should be tested.
    *   **C++ Compiler**: A modern C++14 compliant compiler for the x86_64 architecture.
        *   **Minimum Versions**: GCC 7, Clang 5.
        *   **CI Versions (Linux)**: To replicate the Linux CI environment on an Ubuntu-based system, a wide range of compilers are used. This may require adding repositories for older versions (e.g., from `focal`).
            *   **GCC**: `g++-9`, `g++-10`, `g++-11`, `g++-12`, `g++-13`
            *   **Clang**: `clang++-6.0`, `clang++-7`, `clang++-8`, `clang++-9`, `clang++-10`, `clang++-11`, `clang++-12`, `clang++-13`, `clang++-14`, `clang++-15`
        *   **Fuzzing Toolchain**: Building fuzzers requires a modern Clang compiler (version 8 or higher recommended) that includes LibFuzzer support. Sanitizers (`-fsanitize=address,undefined`) are also used, which are well-supported by Clang.
    *   **Git**: For version control. The project uses a `.gitattributes` file to manage line endings.
    *   **Python 3**: Version 3.7 or higher with `pip` is required for running the project's internal test suite, helper scripts, and installing Python-based tools. The interpreter must be available in the system's PATH.
    *   **IDE (Optional)**: While not required, development is supported in common C++ IDEs. Project files for these are ignored by version control (e.g., `.idea/` for CLion, `.vscode/` for VS Code). Generating a `compile_commands.json` file is recommended for best-in-class language support.
    *   **Doxygen (Optional)**: Version 1.9.1 or higher. A documentation generator for C++. Required to build the project's API documentation.
    *   **Graphviz (Optional)**: Required by Doxygen to generate dependency graphs and diagrams. The `dot` executable must be in the system's PATH.
    *   **Clang-Tidy (Optional)**: Version 15 or higher. A clang-based C++ "linter" tool for static analysis. Required to replicate CI static analysis checks.
    *   **Clang-Format (Optional)**: Version 15 or higher. A tool to automatically format C++ code. Required to replicate CI formatting checks.
    *   **Valgrind (Optional)**: A memory debugging and profiling tool for Linux. Required for advanced memory checking tests.
    *   **lcov (Optional)**: A tool for generating HTML code coverage reports from `gcov` data. Required to replicate CI coverage reporting.
    *   **ccache (Optional)**: A compiler cache to speed up recompilation. Used by the fuzzer build script if available.
    *   **codecov (Optional)**: A Python package (`pip install codecov`) for uploading coverage reports to the Codecov service.
    *   **guardonce (Optional)**: A Python package (`pip install guardonce`) for validating header guard conventions.

2.  FILES TO CREATE:
    *   **File Path**: `/home/cc/EnvGym/verify_catch2/CMakeLists.txt`
    *   **Description**: A CMake configuration file to build a simple test executable that links against the installed Catch2 library.
    *   **Content**:
        ```cmake
        cmake_minimum_required(VERSION 3.16)
        project(Catch2Verification CXX)

        set(CMAKE_CXX_STANDARD 14)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # Find the installed Catch2 package
        # Pass -DCMAKE_PREFIX_PATH=/path/to/install/dir during configuration
        find_package(Catch2 3 REQUIRED)

        add_executable(run_verification_test test.cpp)

        # Link against the Catch2WithMain library which provides the main() function
        target_link_libraries(run_verification_test PRIVATE Catch2::Catch2WithMain)
        ```

    *   **File Path**: `/home/cc/EnvGym/verify_catch2/meson.build`
    *   **Description**: A Meson configuration file to build a simple test executable.
    *   **Content**:
        ```meson
        project('catch2-verification', 'cpp', version: '1.0')

        # Find the installed Catch2 dependency using pkg-config
        catch2_dep = dependency('catch2-with-main', version: '>=3.0.0')

        executable(
          'run_verification_test_meson',
          'test.cpp',
          dependencies: catch2_dep,
          # C++ standard can be controlled via the CXXFLAGS environment variable
        )
        ```

    *   **File Path**: `/home/cc/EnvGym/verify_catch2/MODULE.bazel`
    *   **Description**: A Bazel module file for the verification project. It uses an override to depend on the local Catch2 source code.
    *   **Content**:
        ```bzl
        module(name = "catch2_verification")

        bazel_dep(name = "rules_cc", version = "0.1.1")

        # Override the catch2 dependency to use the local clone instead of
        # fetching it from a registry.
        local_path_override(
            module_name = "catch2",
            path = "/home/cc/EnvGym/data/catchorg_Catch2",
        )
        ```

    *   **File Path**: `/home/cc/EnvGym/verify_catch2/BUILD.bazel`
    *   **Description**: A Bazel build file to define a test target that consumes the Catch2 library.
    *   **Content**:
        ```bzl
        load("@rules_cc//cc:defs.bzl", "cc_test")

        cc_test(
            name = "run_verification_test_bazel",
            srcs = ["test.cpp"],
            # Depend on the catch2_main target which includes the main() implementation
            deps = ["@catch2//:catch2_main"],
        )
        ```

    *   **File Path**: `/home/cc/EnvGym/verify_catch2_conan/conanfile.txt`
    *   **Description**: A Conan requirements file for a verification project that consumes the locally built Catch2 Conan package.
    *   **Content**:
        ```txt
        [requires]
        # Replace X.Y.Z with the version of Catch2 you are building
        catch2/X.Y.Z@user/testing

        [generators]
        CMakeDeps
        CMakeToolchain
        ```

    *   **File Path**: `/home/cc/EnvGym/verify_catch2_conan/CMakeLists.txt`
    *   **Description**: A CMake configuration file for the Conan verification project.
    *   **Content**:
        ```cmake
        cmake_minimum_required(VERSION 3.16)
        project(Catch2ConanVerification CXX)

        set(CMAKE_CXX_STANDARD 14)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # Conan will generate the necessary FindCatch2.cmake files
        find_package(catch2 REQUIRED)

        add_executable(run_verification_test_conan test.cpp)

        # Link against the target provided by the Conan package
        target_link_libraries(run_verification_test_conan PRIVATE catch2::catch2main)
        ```

    *   **File Path**: `/home/cc/EnvGym/verify_catch2/test.cpp` and `/home/cc/EnvGym/verify_catch2_conan/test.cpp`
    *   **Description**: A simple C++ source file containing a test case using Catch2 macros. This is used by all verification projects.
    *   **Content**:
        ```cpp
        #include <catch2/catch_test_macros.hpp>

        unsigned int Factorial( unsigned int number ) {
            return number <= 1 ? number : Factorial(number-1)*number;
        }

        TEST_CASE( "Factorials are computed", "[factorial]" ) {
            REQUIRE( Factorial(1) == 1 );
            REQUIRE( Factorial(2) == 2 );
            REQUIRE( Factorial(3) == 6 );
            REQUIRE( Factorial(10) == 3628800 );
        }
        ```
    *   **File Path**: `.gitattributes` (in repository root)
    *   **Description**: This file is part of the repository and configures how Git handles line endings for different file types. It ensures consistent Unix-style line endings (LF). It does not need to be created.
    *   **Content**:
        ```
        * text=auto
        *.cpp text
        *.h text
        *.hpp text
        *.sln text eol=crlf
        *.py text eol=lf
        single_include/**/*.hpp eol=lf
        LICENCE.txt eol=lf
        ```
    *   **File Path**: `codecov.yml` (in repository root)
    *   **Description**: This file is part of the repository and configures the Codecov service. It does not need to be created.
    *   **Content**:
        ```yaml
        coverage:
          precision: 2
          round: nearest
          range: "60...90"
          status:
            project:
              default:
                threshold: 2%
            patch:
              default:
                target: 80%
          ignore:
            - "**/external/clara.hpp"
            - "tests"
        codecov:
          branch: devel
          max_report_age: off
        comment:
          layout: "diff"
        ```
    *   **File Path**: `Doxyfile` (in repository root)
    *   **Description**: This file is part of the repository and configures the Doxygen documentation generator. It does not need to be created.
    *   **Content**:
        ```ini
        PROJECT_NAME           = Catch2
        OUTPUT_DIRECTORY       = docs/doxygen
        INPUT                  = src/catch2
        RECURSIVE              = YES
        EXTRACT_ALL            = YES
        GENERATE_HTML          = YES
        GENERATE_LATEX         = NO
        HAVE_DOT               = YES
        INCLUDE_GRAPH          = YES
        INCLUDED_BY_GRAPH      = YES
        WARN_LOGFILE           = doxygen.errors
        ```
    *   **File Path**: `CMakeUserPresets.json` (in repository root, optional)
    *   **Description**: This file can be created by developers to specify their own local build configurations.
    *   **Content**:
        ```json
        {
          "version": 3,
          "vendor": {
            "cmake.org/BasicCMake/v1": {
              "cacheVariables": {
                "CMAKE_C_COMPILER": "clang",
                "CMAKE_CXX_COMPILER": "clang++"
              }
            }
          },
          "configurePresets": [
            {
              "name": "my-local-debug",
              "inherits": "basic-tests",
              "displayName": "My Local Debug Build",
              "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Debug"
              }
            }
          ]
        }
        ```
    *   **File Path**: `compile_commands.json` (in build directory)
    *   **Description**: This file is generated by the build system (e.g., via `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON`) and is crucial for IDEs and language analysis tools.

3.  NECESSARY TEST CASES IN THE CODEBASE:
    *   **Test Case 1: Build and Install the Library**
    *   **Test Case 2: Internal Test Suite Execution**
    *   **Test Case 3: Basic CMake Build Matrix Verification (Linux CI)**
    *   **Test Case 4: Meson Build Matrix Verification**
    *   **Test Case 5: External Project Integration**
    *   **Test Case 6: Bazel Build Matrix Verification** (Linux `gcc11`/`gcc9`/`gcc13`/`clang13` configurations)
    *   **Test Case 7: Complex CMake Build Verification (Linux CI)**
    *   **Test Case 8: Static Analysis with Clang-Tidy**
    *   **Test Case 9: Conan Package Build Matrix Verification**
    *   **Test Case 10: Codebase Integrity and Style Checks**
    *   **Test Case 11: Developer Convenience Script Verification** (`buildAndTest.sh`)
    *   **Test Case 12: Fuzzer Build Verification**
    *   **Test Case 13: Code Coverage Generation and Verification** (`lcov`)
    *   **Test Case 14: Documentation Generation**
    *   **Test Case 15: Approval Test Verification (Optional)**

4.  COMPLETE TODO LIST:
    *   **Step 1: Install Prerequisites**
        *   Action: Install CMake, Meson, Ninja, Bazelisk, C++ compilers, Git, Python 3, and other required tools.
            ```bash
            # On an Ubuntu-based system (e.g., ubuntu:20.04), first update sources
            apt-get update

            # Add repository for older compilers if needed on a newer base
            # apt-add-repository 'deb http://azure.archive.ubuntu.com/ubuntu/ focal main universe'
            # apt-get update

            # Install build tools, compilers, and optional dependencies
            apt-get install -y --no-install-recommends \
                build-essential git python3 python3-pip cmake meson ninja-build valgrind \
                g++-9 g++-10 g++-11 g++-12 g++-13 \
                clang-6.0 clang-7 clang-9 clang-10 clang-11 clang-12 clang-13 clang-14 clang-15 \
                clang-tidy-15 clang-format-15 \
                lcov doxygen graphviz

            # Install Python-based tools
            pip3 install conan 'guardonce>=0.5' 'codecov>=2.1'

            # Install Bazelisk (recommended way to run Bazel)
            apt-get install -y curl
            curl -L https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 -o /usr/local/bin/bazelisk
            chmod +x /usr/local/bin/bazelisk
            ```
        *   Verification: Run `cmake --version`, `meson --version`, `ninja --version`, `bazelisk version`, `conan --version`, `g++-11 --version`, `clang++-14 --version`, `clang-tidy-15 --version`, `git --version`, `python3 --version`, `lcov --version`, `doxygen --version`, and `dot -V`. Ensure versions meet requirements.

    *   **Step 2: Verify Source Code Location**
        *   Action: The project source code is expected to be in `/home/cc/EnvGym/data/catchorg_Catch2`. Navigate to this directory.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            ```
        *   Verification: The current directory contains project files like `CMakeLists.txt`, `meson.build`, and `MODULE.bazel`.

    ---
    ### **Path 0: Quick Start with Build Script**
    ---
    *   **Step 3-0: Execute the Build Script**
        *   Action: For a simple, standard debug build, use the provided convenience script from the repository root.
            ```bash
            sh ./tools/scripts/buildAndTest.sh
            ```
        *   Verification: The script runs through all stages (amalgamation, configure, build, test) without errors. The final output from CTest reports "100% tests passed, 0 tests failed".

    ---
    ### **Path A: Building with CMake**
    ---

    *   **Step 3A: Configure the Build (CMake)**
        *   Action: Use a CMake preset to configure the project, enabling `CMAKE_EXPORT_COMPILE_COMMANDS` for IDE support.
            ```bash
            cmake --preset basic-tests -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
            ```
        *   Verification: CMake runs without errors. A `build` directory is created containing a `compile_commands.json` file.

    *   **Step 4A: Compile the Project (CMake)**
        *   Action: Run the build command from the repository root.
            ```bash
            cmake --build build --config Release
            ```
        *   Verification: The compilation completes without errors.

    *   **Step 5A: Run the Internal Test Suite (CTest)**
        *   Action: Execute the test suite using CTest.
            ```bash
            ctest --test-dir build --output-on-failure
            ```
        *   Verification: CTest runs and reports "100% tests passed, 0 tests failed".

    *   **Step 6A: Install the Library (CMake)**
        *   Action: Define an installation path and run the install target.
            ```bash
            INSTALL_DIR_CMAKE="/home/cc/EnvGym/install/catch2_cmake"
            cmake --install build --prefix "$INSTALL_DIR_CMAKE"
            ```
        *   Verification: The directory `$INSTALL_DIR_CMAKE` contains `include/`, `lib/`, and `share/` subdirectories.

    *   **Step 7A: Verify Installation with an External Project (CMake)**
        *   Action: Create and build the CMake verification project.
            ```bash
            mkdir -p /home/cc/EnvGym/verify_catch2 && cd /home/cc/EnvGym/verify_catch2
            # Create the CMakeLists.txt and test.cpp files from section 2
            mkdir build-cmake && cd build-cmake
            cmake .. -DCMAKE_PREFIX_PATH="$INSTALL_DIR_CMAKE"
            cmake --build .
            ```
        *   Verification: The project builds successfully, creating `run_verification_test`.

    *   **Step 8A: Run the Verification Test (CMake)**
        *   Action: Execute the newly built test program.
            ```bash
            ./run_verification_test
            ```
        *   Verification: The program runs and reports that all tests passed.

    ---
    ### **Path B: Building with Meson (CI Matrix)**
    ---

    *   **Step 3B: Configure and Build (Meson)**
        *   Action: From the repository root, run Meson builds to replicate the CI matrix.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2

            # Example: g++-11, C++17, debug build
            export CXX=g++-11 CXXFLAGS="-std=c++17"
            meson setup build-gpp17-dbg -Dbuildtype=debug
            meson compile -C build-gpp17-dbg

            # Example: clang++-11, C++14, release build
            export CXX=clang++-11 CXXFLAGS="-std=c++14"
            meson setup build-clang14-rel -Dbuildtype=release
            meson compile -C build-clang14-rel
            ```
        *   Verification: Each Meson configuration and build completes without errors.

    *   **Step 4B: Run the Internal Test Suite (Meson)**
        *   Action: Execute the test suite for each configured build directory.
            ```bash
            meson test -C build-gpp17-dbg --verbose
            meson test -C build-clang14-rel --verbose
            ```
        *   Verification: Meson runs the tests and reports that all tests passed.

    *   **Step 5B: Install the Library (Meson)**
        *   Action: Define an installation path and run the install target.
            ```bash
            INSTALL_DIR_MESON="/home/cc/EnvGym/install/catch2_meson"
            meson install -C build-clang14-rel --prefix "$INSTALL_DIR_MESON"
            ```
        *   Verification: The directory `$INSTALL_DIR_MESON` contains `include/`, `lib/`, and `lib/pkgconfig`.

    *   **Step 6B: Verify Installation with an External Project (Meson)**
        *   Action: Create and build the Meson verification project.
            ```bash
            cd /home/cc/EnvGym/verify_catch2
            # Create the meson.build and test.cpp files from section 2
            export PKG_CONFIG_PATH="$INSTALL_DIR_MESON/lib/pkgconfig" CXXFLAGS="-std=c++14"
            meson setup build-meson
            meson compile -C build-meson
            ```
        *   Verification: The project builds successfully, creating `run_verification_test_meson`.

    *   **Step 7B: Run the Verification Test (Meson)**
        *   Action: Execute the newly built test program.
            ```bash
            ./build-meson/run_verification_test_meson
            ```
        *   Verification: The program runs and reports that all tests passed.

    ---
    ### **Path C: Building with Bazelisk/Bazel**
    ---

    *   **Step 3C: Build the Library (Bazelisk Matrix)**
        *   Action: From the repository root, build all targets using different configurations.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2

            # The default on Linux is 'gcc11' config (C++2a)
            bazelisk build --compilation_mode=opt //...

            # Explicitly test other configs
            bazelisk build --config=gcc9 --compilation_mode=dbg //...
            bazelisk build --config=clang13 --compilation_mode=dbg //...
            ```
        *   Verification: Each Bazelisk build command completes successfully.

    *   **Step 4C: Run the Internal Test Suite (Bazelisk)**
        *   Action: Run all defined test targets within the repository.
            ```bash
            bazelisk test //...
            ```
        *   Verification: Bazelisk runs the tests and reports that all tests passed.

    *   **Step 5C: Verify Integration with an External Project (Bazelisk)**
        *   Action: Create and build the Bazel verification project.
            ```bash
            cd /home/cc/EnvGym/verify_catch2
            # Create MODULE.bazel, BUILD.bazel, and test.cpp from section 2.
            # The path in MODULE.bazel is already set correctly.
            bazelisk build //:run_verification_test_bazel
            ```
        *   Verification: The project builds successfully.

    *   **Step 6C: Run the Verification Test (Bazelisk)**
        *   Action: Execute the test target using Bazel's test runner.
            ```bash
            bazelisk test //:run_verification_test_bazel
            ```
        *   Verification: The program runs and reports that all tests passed.

    ---
    ### **Path D: Consuming the Library with Conan**
    ---

    *   **Step 3D: Create the Conan Package**
        *   Action: From the repository root, create a local Conan package.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            pip install "conan<2"
            conan create . --user=user --channel=testing
            ```
        *   Verification: The command completes successfully, exporting the package to the local cache.

    *   **Step 4D: Verify Installation with an External Project (Conan)**
        *   Action: Create and configure the Conan verification project.
            ```bash
            mkdir -p /home/cc/EnvGym/verify_catch2_conan && cd /home/cc/EnvGym/verify_catch2_conan
            # Create conanfile.txt, CMakeLists.txt, test.cpp from section 2.
            # Update conanfile.txt with the correct package version.
            conan install . --output-folder=build --build=missing
            ```
        *   Verification: Conan resolves dependencies and generates CMake files in the `build` directory.

    *   **Step 5D: Build the Verification Project (Conan/CMake)**
        *   Action: Use CMake with the Conan-generated toolchain to build the project.
            ```bash
            cd build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            ```
        *   Verification: The project builds successfully.

    *   **Step 6D: Run the Verification Test (Conan)**
        *   Action: Execute the newly built test program.
            ```bash
            ./run_verification_test_conan
            ```
        *   Verification: The program runs and reports that all tests passed.

    ---
    ### **Path E: Replicating Linux CI Scenarios**
    ---

    *   **Step 3E: Configure and Build Complex Scenarios (CMake)**
        *   Action: From the repository root, use the `all-tests` preset for a full development build. This requires generating amalgamated files first.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            python3 ./tools/scripts/generateAmalgamatedFiles.py
            cmake --preset all-tests -G Ninja -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_CXX_STANDARD=14
            cmake --build build
            ```
        *   Verification: All steps complete successfully.

    *   **Step 4E: Run Tests for Complex Scenarios**
        *   Action: Run CTest from the build directory.
            ```bash
            ctest --test-dir build --output-on-failure
            ```
        *   Verification: CTest runs and reports "100% tests passed, 0 tests failed".

    *   **Step 5E: Run Static Analysis (Clang-Tidy)**
        *   Action: Configure a build that only runs clang-tidy.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            cmake -S . -B build-tidy -G Ninja \
                  -DCMAKE_CXX_COMPILER=clang++-15 \
                  -DCMAKE_CXX_CLANG_TIDY="clang-tidy-15;-use-color" \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/true \
                  -DCMAKE_CXX_LINK_EXECUTABLE=/usr/bin/true
            cmake --build build-tidy
            ```
        *   Verification: The build process runs clang-tidy and completes without reporting linting errors.

    *   **Step 6E: Configure and Build Basic CI Matrix (CMake)**
        *   Action: From the repository root, replicate a build from the `linux-simple-builds.yml` workflow.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            # Example: g++-9, C++14, Release build
            cmake --preset basic-tests -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_CXX_STANDARD=14
            cmake --build build
            ctest --test-dir build --output-on-failure
            ```
        *   Verification: The build and test cycle completes successfully for each combination in the CI matrix.

    ---
    ### **Path F: Replicating Conan CI Scenarios**
    ---

    *   **Step 1F: Test with Conan 1.x**
        *   Action: From the repository root, use Conan 1.x to create and test the package.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            pip install "conan>=1.63,<2"
            conan create . -tf .conan/test_package
            ```
        *   Verification: The command completes successfully, reporting that `test_package` tests passed.

    *   **Step 2F: Test with Conan 2.x**
        *   Action: Use Conan 2.x to create and test the package.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            pip install "conan>=2.1,<3"
            conan profile detect
            conan create . -tf .conan/test_package
            ```
        *   Verification: The command completes successfully, reporting that `test_package` tests passed.

    ---
    ### **Path G: Replicating Codebase Validation Checks (CI)**
    ---

    *   **Step 1G: Run Header Guard and Style Checks**
        *   Action: From the repository root, run the project's validation scripts.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            checkguard -r src/catch2/ -p "name | append _INCLUDED | upper"
            ./tools/scripts/checkDuplicateFilenames.py
            ./tools/scripts/checkLicense.py
            find src -iname "*.hpp" -o -iname "*.cpp" | xargs clang-format-15 --dry-run -Werror
            ```
        *   Verification: All commands complete with a zero exit code and no error output.

    *   **Step 2G: Run Line Ending Check**
        *   Action: Use `git ls-files --eol` to inspect line endings.
            ```bash
            git ls-files --eol -- tools/scripts/generateAmalgamatedFiles.py
            ```
        *   Verification: The output should show `w/lf`, confirming Unix-style line endings.

    ---
    ### **Path H: Building Fuzzers**
    ---

    *   **Step 1H: Build Fuzzers using the Convenience Script**
        *   Action: Run the provided script from the repository root.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            sh ./fuzzing/build_fuzzers.sh
            ```
        *   Verification: The script completes successfully. A `build-fuzzers` directory is created with fuzzer executables.

    ---
    ### **Path I: Generating Code Coverage Reports**
    ---

    *   **Step 1I: Configure and Build with Coverage**
        *   Action: Configure the project using CMake with coverage flags enabled.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            cmake -S . -B build-coverage -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCATCH_ENABLE_COVERAGE=On
            cmake --build build-coverage
            ```
        *   Verification: The project builds successfully.

    *   **Step 2I: Run Tests and Generate Report**
        *   Action: Run the test suite and use `lcov` to generate an HTML report.
            ```bash
            cd build-coverage
            ctest --output-on-failure
            lcov --capture --directory . --output-file coverage.info
            lcov --remove coverage.info '*/tests/*' '*/external/*' --output-file coverage.info.cleaned
            genhtml coverage.info.cleaned --output-directory coverage_report
            ```
        *   Verification: A `coverage_report` directory is created containing an `index.html` file.

    ---
    ### **Path J: Generating API Documentation**
    ---

    *   **Step 1J: Generate API Documentation**
        *   Action: From the repository root, run the `doxygen` command.
            ```bash
            cd /home/cc/EnvGym/data/catchorg_Catch2
            doxygen
            ```
        *   Verification: The command completes successfully. A `docs/doxygen/html` directory is created. The `doxygen.errors` log file should not contain any errors.