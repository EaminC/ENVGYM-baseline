{
  "timestamp": "20250829_183736",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756492656",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 2.56kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/ubuntu:22.04\n#2 DONE 0.1s\n\n#3 [internal] load .dockerignore\n#3 transferring context: 2B done\n#3 DONE 0.0s\n\n#4 [ 1/25] FROM docker.io/library/ubuntu:22.04@sha256:1aa979d85661c488ce030ac292876cf6ed04535d3a237e49f61542d8e5de5ae0\n#4 DONE 0.0s\n\n#5 [ 2/25] RUN apt-get update &&     apt-get install -y --no-install-recommends     git     curl     ca-certificates     gnupg     lsb-release     software-properties-common     openjdk-17-jre     chromium-browser     jq     unzip     xdg-utils     xvfb     python3     libasound2     libdbus-glib-1-2     firefox     &&     rm -rf /var/lib/apt/lists/*\n#5 CACHED\n\n#6 [15/25] RUN echo \"Testing xvfb-run availability...\" && /usr/bin/xvfb-run --help\n#6 CACHED\n\n#7 [14/25] RUN mkdir -p /root/.mozilla/firefox &&     echo -e '[Profile0]\\nName=default\\nIsRelative=1\\nPath=default-release\\n\\n[General]\\nStartWithLastProfile=1\\nVersion=2' > /root/.mozilla/firefox/profiles.ini &&     mkdir -p /root/.mozilla/firefox/default-release &&     echo -e 'user_pref(\"extensions.webextensions.restrictedDomains\", \"\");\\nuser_pref(\"privacy.resistFingerprinting.block_mozAddonManager\", true);' >> /root/.mozilla/firefox/default-release/prefs.js\n#7 CACHED\n\n#8 [ 5/25] WORKDIR /darkreader\n#8 CACHED\n\n#9 [ 7/25] RUN mkdir -p tasks && echo '{\"type\":\"module\"}' > tasks/package.json && jq . tasks/package.json\n#9 CACHED\n\n#10 [12/25] RUN npm install --jobs=96 --ignore-scripts && [ -d \"node_modules\" ] && echo \"Success\"\n#10 CACHED\n\n#11 [ 6/25] RUN git clone https://github.com/darkreader/darkreader.git .\n#11 CACHED\n\n#12 [ 4/25] RUN curl -fsSL https://deno.land/install.sh | sh\n#12 CACHED\n\n#13 [ 3/25] RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - &&     apt-get install -y nodejs\n#13 CACHED\n\n#14 [11/25] RUN mkdir -p test/website && cat > test/website/index.html <<'EOF'\n#14 CACHED\n\n#15 [13/25] RUN npm run test:unit\n#15 CACHED\n\n#16 [ 8/25] RUN mkdir -p tests && echo '{\"type\":\"module\"}' > tests/package.json && jq . tests/package.json\n#16 CACHED\n\n#17 [ 9/25] RUN echo '\"lts/*\"' > .nvmrc\n#17 CACHED\n\n#18 [10/25] RUN touch .env\n#18 CACHED\n\n#19 [16/25] RUN echo \"Testing npm availability...\" && /usr/bin/npm --version\n#19 CACHED\n\n#20 [17/25] RUN echo \"Testing Firefox binary...\" && /usr/bin/firefox --version\n#20 0.223 Testing Firefox binary...\n#20 0.224 \n#20 0.224 Command '/usr/bin/firefox' requires the firefox snap to be installed.\n#20 0.224 Please install it with:\n#20 0.224 \n#20 0.224 snap install firefox\n#20 0.224 \n#20 ERROR: process \"/bin/sh -c echo \\\"Testing Firefox binary...\\\" && /usr/bin/firefox --version\" did not complete successfully: exit code: 1\n------\n > [17/25] RUN echo \"Testing Firefox binary...\" && /usr/bin/firefox --version:\n0.223 Testing Firefox binary...\n0.224 \n0.224 Command '/usr/bin/firefox' requires the firefox snap to be installed.\n0.224 Please install it with:\n0.224 \n0.224 snap install firefox\n0.224 \n------\nenvgym.dockerfile:53\n--------------------\n  51 |     RUN echo \"Testing xvfb-run availability...\" && /usr/bin/xvfb-run --help\n  52 |     RUN echo \"Testing npm availability...\" && /usr/bin/npm --version\n  53 | >>> RUN echo \"Testing Firefox binary...\" && /usr/bin/firefox --version\n  54 |     RUN echo \"Testing Chromium binary...\" && /usr/bin/chromium-browser --version\n  55 |     RUN /usr/bin/xvfb-run -a --server-args='-screen 0 1024x768x24' TEST_WORKERS=96 /usr/bin/npm run test:browser\n--------------------\nERROR: failed to solve: process \"/bin/sh -c echo \\\"Testing Firefox binary...\\\" && /usr/bin/firefox --version\" did not complete successfully: exit code: 1\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}