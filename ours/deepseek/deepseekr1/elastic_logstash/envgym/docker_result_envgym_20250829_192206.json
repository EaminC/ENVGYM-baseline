{
  "timestamp": "20250829_192206",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756495325",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 632B done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/ubuntu:latest\n#2 DONE 0.2s\n\n#3 [internal] load .dockerignore\n#3 transferring context: 60B done\n#3 DONE 0.0s\n\n#4 [1/7] FROM docker.io/library/ubuntu:latest@sha256:7c06e91f61fa88c08cc74f7e1b7c69ae24910d745357e0dfe1d2c0322aaf20f9\n#4 DONE 0.0s\n\n#5 [internal] load build context\n#5 transferring context: 417.59kB 0.1s done\n#5 DONE 0.1s\n\n#6 [2/7] RUN apt-get update &&     DEBIAN_FRONTEND=noninteractive apt-get install -y     build-essential     cmake     git     wget     python3     python3-pip     libboost-all-dev     libeigen3-dev     libgmp-dev     libmpfr-dev     tcl-dev     tk-dev     libreadline-dev     bison     flex     && rm -rf /var/lib/apt/lists/*\n#6 CACHED\n\n#7 [3/7] WORKDIR /app\n#7 CACHED\n\n#8 [4/7] COPY . .\n#8 DONE 0.2s\n\n#9 [5/7] RUN pip3 install --no-cache-dir -r requirements.txt\n#9 0.480 error: externally-managed-environment\n#9 0.480 \n#9 0.480 × This environment is externally managed\n#9 0.480 ╰─> To install Python packages system-wide, try apt install\n#9 0.480     python3-xyz, where xyz is the package you are trying to\n#9 0.480     install.\n#9 0.480     \n#9 0.480     If you wish to install a non-Debian-packaged Python package,\n#9 0.480     create a virtual environment using python3 -m venv path/to/venv.\n#9 0.480     Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n#9 0.480     sure you have python3-full installed.\n#9 0.480     \n#9 0.480     If you wish to install a non-Debian packaged Python application,\n#9 0.480     it may be easiest to use pipx install xyz, which will manage a\n#9 0.480     virtual environment for you. Make sure you have pipx installed.\n#9 0.480     \n#9 0.480     See /usr/share/doc/python3.12/README.venv for more information.\n#9 0.480 \n#9 0.480 note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\n#9 0.480 hint: See PEP 668 for the detailed specification.\n#9 ERROR: process \"/bin/sh -c pip3 install --no-cache-dir -r requirements.txt\" did not complete successfully: exit code: 1\n------\n > [5/7] RUN pip3 install --no-cache-dir -r requirements.txt:\n0.480     sure you have python3-full installed.\n0.480     \n0.480     If you wish to install a non-Debian packaged Python application,\n0.480     it may be easiest to use pipx install xyz, which will manage a\n0.480     virtual environment for you. Make sure you have pipx installed.\n0.480     \n0.480     See /usr/share/doc/python3.12/README.venv for more information.\n0.480 \n0.480 note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\n0.480 hint: See PEP 668 for the detailed specification.\n------\nenvgym.dockerfile:25\n--------------------\n  23 |     COPY . .\n  24 |     \n  25 | >>> RUN pip3 install --no-cache-dir -r requirements.txt\n  26 |     \n  27 |     RUN mkdir build && \\\n--------------------\nERROR: failed to solve: process \"/bin/sh -c pip3 install --no-cache-dir -r requirements.txt\" did not complete successfully: exit code: 1\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}