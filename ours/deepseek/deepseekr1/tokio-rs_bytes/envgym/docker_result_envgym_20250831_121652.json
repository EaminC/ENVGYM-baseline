{
  "timestamp": "20250831_121652",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756642576",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 1.12kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/ubuntu:22.04\n#2 DONE 0.2s\n\n#3 [internal] load .dockerignore\n#3 transferring context: 2B done\n#3 DONE 0.0s\n\n#4 [ 1/11] FROM docker.io/library/ubuntu:22.04@sha256:1aa979d85661c488ce030ac292876cf6ed04535d3a237e49f61542d8e5de5ae0\n#4 DONE 0.0s\n\n#5 [internal] load build context\n#5 transferring context: 235.06kB 0.0s done\n#5 DONE 0.0s\n\n#6 [ 2/11] WORKDIR /home/cc/EnvGym/data/tokio-rs_bytes\n#6 CACHED\n\n#7 [ 3/11] RUN apt-get update &&     apt-get install -y git     gcc-i686-linux-gnu     gcc-arm-linux-gnueabihf     gcc-powerpc-linux-gnu     gcc-powerpc64-linux-gnu     curl     build-essential\n#7 CACHED\n\n#8 [ 4/11] RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n#8 CACHED\n\n#9 [ 5/11] RUN rustup toolchain install nightly-2024-09-15 &&     rustup target add thumbv6m-none-eabi thumbv7m-none-eabi wasm32-unknown-unknown i686-unknown-linux-gnu armv7-unknown-linux-gnueabihf powerpc-unknown-linux-gnu powerpc64-unknown-linux-gnu wasm32-wasip1\n#9 CACHED\n\n#10 [ 6/11] COPY . .\n#10 DONE 0.0s\n\n#11 [ 7/11] RUN if [ ! -f Cargo.toml ]; then     echo '[dependencies]' > Cargo.toml &&     echo 'bytes = { version = \"1.10.1\", default-features = false }' >> Cargo.toml;     fi\n#11 DONE 0.3s\n\n#12 [ 8/11] RUN mkdir -p src &&     if [ ! -f src/main.rs ]; then     echo 'use bytes::{Bytes, BytesMut, Buf, BufMut};' > src/main.rs;     fi\n#12 DONE 0.4s\n\n#13 [ 9/11] RUN cargo install cargo-hack\n#13 0.492     Updating crates.io index\n#13 0.550  Downloading crates ...\n#13 0.600   Downloaded cargo-hack v0.6.37\n#13 0.628   Installing cargo-hack v0.6.37\n#13 0.658     Updating crates.io index\n#13 0.884      Locking 53 packages to latest compatible versions\n#13 0.897  Downloading crates ...\n#13 0.950   Downloaded cfg-if v1.0.3\n#13 0.960   Downloaded anyhow v1.0.99\n#13 0.967   Downloaded cfg_aliases v0.2.1\n#13 0.971   Downloaded equivalent v1.0.2\n#13 0.972   Downloaded ctrlc v3.4.7\n#13 0.985   Downloaded same-file v1.0.6\n#13 0.991   Downloaded toml_writer v1.0.2\n#13 0.997   Downloaded serde_spanned v1.0.0\n#13 1.000   Downloaded itoa v1.0.15\n#13 1.007   Downloaded termcolor v1.4.1\n#13 1.012   Downloaded toml_datetime v0.7.0\n#13 1.021   Downloaded lexopt v0.3.1\n#13 1.023   Downloaded quote v1.0.40\n#13 1.027   Downloaded toml_parser v1.0.2\n#13 1.031   Downloaded bitflags v2.9.3\n#13 1.035   Downloaded indexmap v2.11.0\n#13 1.043   Downloaded ryu v1.0.20\n#13 1.045   Downloaded unicode-ident v1.0.18\n#13 1.051   Downloaded proc-macro2 v1.0.101\n#13 1.055   Downloaded toml v0.9.5\n#13 1.059   Downloaded toml_edit v0.23.4\n#13 1.062   Downloaded serde_derive v1.0.219\n#13 1.068   Downloaded cargo-config2 v0.1.35\n#13 1.075   Downloaded serde v1.0.219\n#13 1.078   Downloaded memchr v2.7.5\n#13 1.091   Downloaded hashbrown v0.15.5\n#13 1.115   Downloaded serde_json v1.0.143\n#13 1.132   Downloaded winnow v0.7.13\n#13 1.165   Downloaded syn v2.0.106\n#13 1.185   Downloaded nix v0.30.1\n#13 1.236   Downloaded libc v0.2.175\n#13 1.283    Compiling serde v1.0.219\n#13 1.283    Compiling proc-macro2 v1.0.101\n#13 1.283    Compiling unicode-ident v1.0.18\n#13 1.283    Compiling winnow v0.7.13\n#13 1.283    Compiling libc v0.2.175\n#13 1.283    Compiling cfg_aliases v0.2.1\n#13 1.283    Compiling cfg-if v1.0.3\n#13 1.283    Compiling equivalent v1.0.2\n#13 1.283    Compiling bitflags v2.9.3\n#13 1.283    Compiling anyhow v1.0.99\n#13 1.283    Compiling serde_json v1.0.143\n#13 1.283    Compiling hashbrown v0.15.5\n#13 1.283    Compiling memchr v2.7.5\n#13 1.285    Compiling toml_writer v1.0.2\n#13 1.285    Compiling ryu v1.0.20\n#13 1.288    Compiling itoa v1.0.15\n#13 1.288    Compiling termcolor v1.4.1\n#13 1.289    Compiling lexopt v0.3.1\n#13 1.289    Compiling same-file v1.0.6\n#13 1.323    Compiling nix v0.30.1\n#13 1.847    Compiling indexmap v2.11.0\n#13 1.894    Compiling quote v1.0.40\n#13 2.012    Compiling syn v2.0.106\n#13 2.677    Compiling toml_parser v1.0.2\n#13 3.192    Compiling serde_derive v1.0.219\n#13 3.475    Compiling toml_datetime v0.7.0\n#13 3.475    Compiling serde_spanned v1.0.0\n#13 3.628    Compiling toml v0.9.5\n#13 3.628    Compiling toml_edit v0.23.4\n#13 3.697    Compiling ctrlc v3.4.7\n#13 4.963    Compiling cargo-config2 v0.1.35\n#13 13.79    Compiling cargo-hack v0.6.37\n#13 32.91     Finished `release` profile [optimized] target(s) in 32.44s\n#13 32.93   Installing /root/.cargo/bin/cargo-hack\n#13 32.93    Installed package `cargo-hack v0.6.37` (executable `cargo-hack`)\n#13 DONE 33.0s\n\n#14 [10/11] RUN cargo build --verbose\n#14 0.445     Updating crates.io index\n#14 0.667      Locking 55 packages to latest compatible versions\n#14 0.715    Compiling bytes v1.10.1 (/home/cc/EnvGym/data/tokio-rs_bytes)\n#14 0.715      Running `/root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name bytes --edition=2021 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(loom)' --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values(\"default\", \"extra-platforms\", \"serde\", \"std\"))' -C metadata=fb05704f97f0389b -C extra-filename=-9a31ee18cc68bcaf --out-dir /home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps -C incremental=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/incremental -L dependency=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps`\n#14 1.200      Running `/root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name bytes --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(loom)' --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values(\"default\", \"extra-platforms\", \"serde\", \"std\"))' -C metadata=0f8502e4a356aeca -C extra-filename=-aa1f6d108491a16b --out-dir /home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps -C incremental=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/incremental -L dependency=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps --extern bytes=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps/libbytes-9a31ee18cc68bcaf.rlib`\n#14 1.235 warning: unused imports: `BufMut`, `Buf`, `BytesMut`, and `Bytes`\n#14 1.235  --> src/main.rs:1:13\n#14 1.235   |\n#14 1.235 1 | use bytes::{Bytes, BytesMut, Buf, BufMut};\n#14 1.235   |             ^^^^^  ^^^^^^^^  ^^^  ^^^^^^\n#14 1.235   |\n#14 1.235   = note: `#[warn(unused_imports)]` on by default\n#14 1.235 \n#14 1.235 error[E0601]: `main` function not found in crate `bytes`\n#14 1.235  --> src/main.rs:1:43\n#14 1.235   |\n#14 1.235 1 | use bytes::{Bytes, BytesMut, Buf, BufMut};\n#14 1.235   |                                           ^ consider adding a `main` function to `src/main.rs`\n#14 1.235 \n#14 1.235 For more information about this error, try `rustc --explain E0601`.\n#14 1.239 warning: `bytes` (bin \"bytes\") generated 1 warning\n#14 1.239 error: could not compile `bytes` (bin \"bytes\") due to 1 previous error; 1 warning emitted\n#14 1.239 \n#14 1.239 Caused by:\n#14 1.239   process didn't exit successfully: `/root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name bytes --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(loom)' --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values(\"default\", \"extra-platforms\", \"serde\", \"std\"))' -C metadata=0f8502e4a356aeca -C extra-filename=-aa1f6d108491a16b --out-dir /home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps -C incremental=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/incremental -L dependency=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps --extern bytes=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps/libbytes-9a31ee18cc68bcaf.rlib` (exit status: 1)\n#14 ERROR: process \"/bin/sh -c cargo build --verbose\" did not complete successfully: exit code: 101\n------\n > [10/11] RUN cargo build --verbose:\n1.235   |\n1.235 1 | use bytes::{Bytes, BytesMut, Buf, BufMut};\n1.235   |                                           ^ consider adding a `main` function to `src/main.rs`\n1.235 \n1.235 For more information about this error, try `rustc --explain E0601`.\n1.239 warning: `bytes` (bin \"bytes\") generated 1 warning\n1.239 error: could not compile `bytes` (bin \"bytes\") due to 1 previous error; 1 warning emitted\n1.239 \n1.239 Caused by:\n1.239   process didn't exit successfully: `/root/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name bytes --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(loom)' --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values(\"default\", \"extra-platforms\", \"serde\", \"std\"))' -C metadata=0f8502e4a356aeca -C extra-filename=-aa1f6d108491a16b --out-dir /home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps -C incremental=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/incremental -L dependency=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps --extern bytes=/home/cc/EnvGym/data/tokio-rs_bytes/target/debug/deps/libbytes-9a31ee18cc68bcaf.rlib` (exit status: 1)\n------\nenvgym.dockerfile:34\n--------------------\n  32 |     RUN cargo install cargo-hack\n  33 |     \n  34 | >>> RUN cargo build --verbose\n  35 |     \n  36 |     RUN cargo clean && \\\n--------------------\nERROR: failed to solve: process \"/bin/sh -c cargo build --verbose\" did not complete successfully: exit code: 101\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}