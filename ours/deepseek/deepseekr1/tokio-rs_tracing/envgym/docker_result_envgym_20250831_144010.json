{
  "timestamp": "20250831_144010",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756651087",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 1.98kB done\n#1 DONE 0.0s\n\n#2 resolve image config for docker-image://docker.io/docker/dockerfile:1.4\n#2 DONE 0.1s\n\n#3 docker-image://docker.io/docker/dockerfile:1.4@sha256:9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc\n#3 CACHED\n\n#4 [internal] load .dockerignore\n#4 transferring context: 2B done\n#4 DONE 0.0s\n\n#5 [internal] load metadata for docker.io/library/rust:latest\n#5 DONE 0.1s\n\n#6 [stage-0  1/13] FROM docker.io/library/rust:latest@sha256:3329e2de3e9ff2d58da56e95ef99a3180a4e76336a676f3fe2b88f0b0d6bcfbf\n#6 resolve docker.io/library/rust:latest@sha256:3329e2de3e9ff2d58da56e95ef99a3180a4e76336a676f3fe2b88f0b0d6bcfbf done\n#6 DONE 0.0s\n\n#7 [internal] load build context\n#7 transferring context: 3.17MB 0.0s done\n#7 DONE 0.1s\n\n#8 [stage-0  2/13] RUN apt-get update &&     apt-get install -y pkg-config libssl-dev chromium &&     apt-get clean &&     rm -rf /var/lib/apt/lists/*\n#8 CACHED\n\n#9 [stage-0  3/13] WORKDIR /workspace\n#9 CACHED\n\n#10 [stage-0  4/13] COPY . .\n#10 DONE 0.1s\n\n#11 [stage-0  5/13] RUN --mount=type=cache,target=/usr/local/cargo/registry     rustup component add rustfmt clippy &&     rustup target add wasm32-unknown-unknown &&     rustup toolchain install nightly &&     cargo install cargo-hack cargo-minimal-versions wasm-pack cargo-nextest\n#11 0.388 info: downloading component 'rustfmt'\n#11 0.489 info: installing component 'rustfmt'\n#11 0.905 info: downloading component 'clippy'\n#11 1.018 info: installing component 'clippy'\n#11 1.597 info: downloading component 'rust-std' for 'wasm32-unknown-unknown'\n#11 3.518 info: installing component 'rust-std' for 'wasm32-unknown-unknown'\n#11 5.101 info: syncing channel updates for 'nightly-x86_64-unknown-linux-gnu'\n#11 5.246 info: latest update on 2025-08-31, rust version 1.91.0-nightly (523d3999d 2025-08-30)\n#11 5.246 info: downloading component 'cargo'\n#11 6.332 info: downloading component 'rust-std'\n#11 6.646 info: downloading component 'rustc'\n#11 13.14 info: installing component 'cargo'\n#11 13.92 info: installing component 'rust-std'\n#11 16.01 info: installing component 'rustc'\n#11 21.27 \n#11 21.28   nightly-x86_64-unknown-linux-gnu installed - rustc 1.91.0-nightly (523d3999d 2025-08-30)\n#11 21.28 \n#11 21.28 info: checking for self-update\n#11 21.41     Updating crates.io index\n#11 21.55   Installing cargo-hack v0.6.37\n#11 21.58     Updating crates.io index\n#11 21.73      Locking 53 packages to latest compatible versions\n#11 21.79    Compiling serde v1.0.219\n#11 21.79    Compiling proc-macro2 v1.0.101\n#11 21.79    Compiling unicode-ident v1.0.18\n#11 21.79    Compiling winnow v0.7.13\n#11 21.79    Compiling cfg_aliases v0.2.1\n#11 21.79    Compiling libc v0.2.175\n#11 21.79    Compiling equivalent v1.0.2\n#11 21.79    Compiling anyhow v1.0.99\n#11 21.79    Compiling serde_json v1.0.143\n#11 21.79    Compiling cfg-if v1.0.3\n#11 21.79    Compiling hashbrown v0.15.5\n#11 21.79    Compiling bitflags v2.9.3\n#11 21.79    Compiling itoa v1.0.15\n#11 21.79    Compiling memchr v2.7.5\n#11 21.79    Compiling toml_writer v1.0.2\n#11 21.79    Compiling ryu v1.0.20\n#11 21.79    Compiling same-file v1.0.6\n#11 21.80    Compiling lexopt v0.3.1\n#11 21.80    Compiling termcolor v1.4.1\n#11 21.83    Compiling nix v0.30.1\n#11 22.33    Compiling indexmap v2.11.0\n#11 22.37    Compiling quote v1.0.40\n#11 22.49    Compiling syn v2.0.106\n#11 23.23    Compiling toml_parser v1.0.2\n#11 23.69    Compiling serde_derive v1.0.219\n#11 23.86    Compiling toml_datetime v0.7.0\n#11 23.86    Compiling serde_spanned v1.0.0\n#11 24.01    Compiling toml v0.9.5\n#11 24.01    Compiling toml_edit v0.23.4\n#11 24.08    Compiling ctrlc v3.4.7\n#11 25.35    Compiling cargo-config2 v0.1.35\n#11 34.18    Compiling cargo-hack v0.6.37\n#11 52.93     Finished `release` profile [optimized] target(s) in 31.54s\n#11 52.95   Installing /usr/local/cargo/bin/cargo-hack\n#11 52.95    Installed package `cargo-hack v0.6.37` (executable `cargo-hack`)\n#11 52.96   Installing cargo-minimal-versions v0.1.31\n#11 53.00     Updating crates.io index\n#11 53.17      Locking 51 packages to latest compatible versions\n#11 53.40    Compiling libc v0.2.175\n#11 53.40    Compiling cfg_aliases v0.2.1\n#11 53.40    Compiling serde v1.0.219\n#11 53.40    Compiling bitflags v2.9.3\n#11 53.40    Compiling equivalent v1.0.2\n#11 53.40    Compiling winnow v0.7.13\n#11 53.40    Compiling cfg-if v1.0.3\n#11 53.40    Compiling anyhow v1.0.99\n#11 53.40    Compiling hashbrown v0.15.5\n#11 53.40    Compiling semver v1.0.26\n#11 53.40    Compiling serde_json v1.0.143\n#11 53.40    Compiling toml_datetime v0.7.0\n#11 53.40    Compiling toml_writer v1.0.2\n#11 53.40    Compiling ryu v1.0.20\n#11 53.40    Compiling itoa v1.0.15\n#11 53.40    Compiling memchr v2.7.5\n#11 53.41    Compiling termcolor v1.4.1\n#11 53.41    Compiling lexopt v0.3.1\n#11 53.41    Compiling same-file v1.0.6\n#11 53.44    Compiling nix v0.30.1\n#11 53.94    Compiling indexmap v2.11.0\n#11 54.77    Compiling toml_parser v1.0.2\n#11 55.08    Compiling toml_edit v0.23.4\n#11 55.64    Compiling ctrlc v3.4.7\n#11 56.77    Compiling cargo-minimal-versions v0.1.31\n#11 65.22     Finished `release` profile [optimized] target(s) in 43.83s\n#11 65.24   Installing /usr/local/cargo/bin/cargo-minimal-versions\n#11 65.24    Installed package `cargo-minimal-versions v0.1.31` (executable `cargo-minimal-versions`)\n#11 65.26   Installing wasm-pack v0.13.1\n#11 65.29     Updating crates.io index\n#11 66.06      Locking 248 packages to latest compatible versions\n#11 66.07       Adding cargo_metadata v0.15.4 (available: v0.22.0)\n#11 66.09       Adding console v0.15.11 (available: v0.16.0)\n#11 66.09       Adding dialoguer v0.10.4 (available: v0.12.0)\n#11 66.10       Adding env_logger v0.10.2 (available: v0.11.8)\n#11 66.10       Adding human-panic v1.2.3 (available: v2.0.3)\n#11 66.14       Adding siphasher v0.3.11 (available: v1.0.1)\n#11 66.14       Adding strsim v0.10.0 (available: v0.11.1)\n#11 66.15       Adding toml v0.7.8 (available: v0.9.5)\n#11 66.16       Adding ureq v2.12.1 (available: v3.1.0)\n#11 66.16       Adding which v4.4.2 (available: v8.0.0)\n#11 66.26    Compiling proc-macro2 v1.0.101\n#11 66.26    Compiling unicode-ident v1.0.18\n#11 66.26    Compiling libc v0.2.175\n#11 66.26    Compiling shlex v1.3.0\n#11 66.26    Compiling cfg-if v1.0.3\n#11 66.26    Compiling serde v1.0.219\n#11 66.26    Compiling pkg-config v0.3.32\n#11 66.26    Compiling stable_deref_trait v1.2.0\n#11 66.26    Compiling version_check v0.9.5\n#11 66.26    Compiling typenum v1.18.0\n#11 66.26    Compiling writeable v0.6.1\n#11 66.26    Compiling bitflags v2.9.3\n#11 66.26    Compiling litemap v0.8.0\n#11 66.26    Compiling autocfg v1.5.0\n#11 66.26    Compiling equivalent v1.0.2\n#11 66.26    Compiling memchr v2.7.5\n#11 66.26    Compiling getrandom v0.3.3\n#11 66.26    Compiling hashbrown v0.15.5\n#11 66.26    Compiling subtle v2.6.1\n#11 66.27    Compiling log v0.4.27\n#11 66.27    Compiling smallvec v1.15.1\n#11 66.27    Compiling icu_properties_data v2.0.1\n#11 66.28    Compiling icu_normalizer_data v2.0.0\n#11 66.28    Compiling adler2 v2.0.1\n#11 66.28    Compiling crc32fast v1.5.0\n#11 66.28    Compiling rustix v1.0.8\n#11 66.28    Compiling once_cell v1.21.3\n#11 66.29    Compiling linux-raw-sys v0.9.4\n#11 66.29    Compiling utf8parse v0.2.2\n#11 66.30    Compiling byteorder v1.5.0\n#11 66.30    Compiling untrusted v0.9.0\n#11 66.30    Compiling serde_json v1.0.143\n#11 66.30    Compiling zstd-safe v7.2.4\n#11 66.31    Compiling rustix v0.38.44\n#11 66.32    Compiling utf8_iter v1.0.4\n#11 66.32    Compiling linux-raw-sys v0.4.15\n#11 66.32    Compiling anstyle v1.0.11\n#11 66.32    Compiling is_terminal_polyfill v1.70.1\n#11 66.32    Compiling colorchoice v1.0.4\n#11 66.32    Compiling percent-encoding v2.3.2\n#11 66.33    Compiling object v0.36.7\n#11 66.33    Compiling anstyle-query v1.1.4\n#11 66.33    Compiling ryu v1.0.20\n#11 66.34    Compiling crc-catalog v2.4.0\n#11 66.34    Compiling itoa v1.0.15\n#11 66.35    Compiling cpufeatures v0.2.17\n#11 66.35    Compiling rustls v0.23.31\n#11 66.35    Compiling thiserror v2.0.16\n#11 66.35    Compiling powerfmt v0.2.0\n#11 66.36    Compiling semver v1.0.26\n#11 66.36    Compiling anyhow v1.0.99\n#11 66.36    Compiling parking_lot_core v0.9.11\n#11 66.36    Compiling toml_write v0.1.2\n#11 66.37    Compiling zip v2.4.2\n#11 66.37    Compiling camino v1.1.12\n#11 66.37    Compiling gimli v0.31.1\n#11 66.38    Compiling time-core v0.1.4\n#11 66.38    Compiling bumpalo v3.19.0\n#11 66.38    Compiling num-conv v0.1.0\n#11 66.38    Compiling simd-adler32 v0.3.7\n#11 66.38    Compiling thiserror v1.0.69\n#11 66.39    Compiling base64 v0.22.1\n#11 66.39    Compiling scopeguard v1.2.0\n#11 66.39    Compiling rustc-demangle v0.1.26\n#11 66.40    Compiling strsim v0.11.1\n#11 66.40    Compiling unicode-width v0.2.1\n#11 66.40    Compiling winnow v0.5.40\n#11 66.40    Compiling clap_lex v0.7.5\n#11 66.41    Compiling deflate64 v0.1.9\n#11 66.41    Compiling fastrand v2.3.0\n#11 66.41    Compiling constant_time_eq v0.3.1\n#11 66.41    Compiling heck v0.5.0\n#11 66.42    Compiling same-file v1.0.6\n#11 66.42    Compiling iana-time-zone v0.1.63\n#11 66.42    Compiling shell-words v1.1.0\n#11 66.44    Compiling hex v0.4.3\n#11 66.44    Compiling either v1.15.0\n#11 66.44    Compiling is_executable v0.1.2\n#11 66.44    Compiling siphasher v0.3.11\n#11 66.45    Compiling home v0.5.11\n#11 66.45    Compiling glob v0.3.3\n#11 66.45    Compiling strsim v0.10.0\n#11 66.45    Compiling path-clean v1.0.1\n#11 66.51    Compiling miniz_oxide v0.8.9\n#11 66.51    Compiling anstyle-parse v0.2.7\n#11 66.52    Compiling generic-array v0.14.7\n#11 66.52    Compiling crc v3.3.0\n#11 66.52    Compiling form_urlencoded v1.2.2\n#11 66.52    Compiling env_logger v0.10.2\n#11 66.54    Compiling num-traits v0.2.19\n#11 66.54    Compiling lock_api v0.4.13\n#11 66.54    Compiling deranged v0.4.0\n#11 66.57    Compiling walkdir v2.5.0\n#11 66.64    Compiling anstream v0.6.20\n#11 66.69    Compiling zopfli v0.8.2\n#11 66.72    Compiling lzma-rs v0.3.0\n#11 66.82    Compiling clap_builder v4.5.46\n#11 66.92    Compiling indexmap v2.11.0\n#11 66.98    Compiling flate2 v1.1.2\n#11 67.02    Compiling quote v1.0.40\n#11 67.15    Compiling syn v2.0.106\n#11 67.19    Compiling jobserver v0.1.34\n#11 67.20    Compiling getrandom v0.2.16\n#11 67.20    Compiling dirs-sys-next v0.1.2\n#11 67.20    Compiling filetime v0.2.26\n#11 67.20    Compiling socks v0.3.4\n#11 67.20    Compiling console v0.15.11\n#11 67.26    Compiling time v0.3.41\n#11 67.30    Compiling uuid v1.18.0\n#11 67.32    Compiling chrono v0.4.41\n#11 67.33    Compiling dirs-next v2.0.0\n#11 67.34    Compiling cc v1.2.34\n#11 67.36    Compiling parking_lot v0.12.4\n#11 67.58    Compiling crypto-common v0.1.6\n#11 67.58    Compiling block-buffer v0.10.4\n#11 67.58    Compiling inout v0.1.4\n#11 67.65    Compiling cipher v0.4.4\n#11 67.66    Compiling digest v0.10.7\n#11 67.80    Compiling hmac v0.12.1\n#11 67.80    Compiling sha1 v0.10.6\n#11 67.80    Compiling aes v0.8.4\n#11 67.87    Compiling pbkdf2 v0.12.2\n#11 68.14    Compiling zstd-sys v2.0.15+zstd.1.5.7\n#11 68.14    Compiling ring v0.17.14\n#11 68.14    Compiling lzma-sys v0.1.20\n#11 68.14    Compiling bzip2-sys v0.1.13+1.0.8\n#11 68.16    Compiling xattr v1.5.1\n#11 68.16    Compiling tempfile v3.21.0\n#11 68.17    Compiling fs4 v0.6.6\n#11 68.17    Compiling which v4.4.2\n#11 68.24    Compiling tar v0.4.44\n#11 68.31    Compiling addr2line v0.24.2\n#11 68.42    Compiling bzip2 v0.5.2\n#11 68.59    Compiling xz2 v0.1.7\n#11 69.80    Compiling synstructure v0.13.2\n#11 69.91    Compiling backtrace v0.3.75\n#11 70.11    Compiling serde_derive v1.0.219\n#11 70.11    Compiling zerofrom-derive v0.1.6\n#11 70.11    Compiling yoke-derive v0.8.0\n#11 70.11    Compiling displaydoc v0.2.5\n#11 70.11    Compiling zerovec-derive v0.11.1\n#11 70.11    Compiling zeroize_derive v1.4.2\n#11 70.11    Compiling thiserror-impl v2.0.16\n#11 70.11    Compiling thiserror-impl v1.0.69\n#11 70.11    Compiling clap_derive v4.5.45\n#11 70.64    Compiling zeroize v1.8.1\n#11 70.73    Compiling rustls-pki-types v1.12.0\n#11 70.73    Compiling dialoguer v0.10.4\n#11 70.99    Compiling webpki-roots v1.0.2\n#11 71.01    Compiling zerofrom v0.1.6\n#11 71.05    Compiling webpki-roots v0.26.11\n#11 71.08    Compiling yoke v0.8.0\n#11 71.20    Compiling zerovec v0.11.4\n#11 71.20    Compiling zerotrie v0.2.2\n#11 71.47    Compiling clap v4.5.46\n#11 71.97    Compiling tinystr v0.8.1\n#11 71.97    Compiling potential_utf v0.1.3\n#11 72.03    Compiling icu_collections v2.0.0\n#11 72.08    Compiling icu_locale_core v2.0.0\n#11 72.52    Compiling icu_provider v2.0.0\n#11 72.70    Compiling icu_properties v2.0.1\n#11 72.70    Compiling icu_normalizer v2.0.0\n#11 73.38    Compiling idna_adapter v1.2.1\n#11 73.43    Compiling idna v1.1.0\n#11 73.99    Compiling serde_spanned v0.6.9\n#11 73.99    Compiling toml_datetime v0.6.11\n#11 73.99    Compiling url v2.5.7\n#11 73.99    Compiling cargo-platform v0.1.9\n#11 73.99    Compiling os_info v3.12.0\n#11 73.99    Compiling serde_ignored v0.1.12\n#11 74.01    Compiling rustls-webpki v0.103.4\n#11 74.13    Compiling toml_edit v0.22.27\n#11 74.13    Compiling toml_edit v0.19.15\n#11 74.75    Compiling cargo_metadata v0.15.4\n#11 74.84    Compiling toml v0.8.23\n#11 75.16    Compiling human-panic v1.2.3\n#11 75.61    Compiling toml v0.7.8\n#11 76.86    Compiling zstd v0.13.3\n#11 77.52    Compiling ureq v2.12.1\n#11 78.14    Compiling binary-install v0.4.1\n#11 78.36    Compiling wasm-pack v0.13.1\n#11 81.61     Finished `release` profile [optimized] target(s) in 1m 00s\n#11 81.67   Installing /usr/local/cargo/bin/wasm-pack\n#11 81.67    Installed package `wasm-pack v0.13.1` (executable `wasm-pack`)\n#11 81.74   Installing cargo-nextest v0.9.103\n#11 81.78     Updating crates.io index\n#11 82.87      Locking 388 packages to latest compatible versions\n#11 82.92       Adding dialoguer v0.11.0 (available: v0.12.0)\n#11 82.94       Adding idna_adapter v1.0.0 (available: v1.2.1)\n#11 83.30    Compiling proc-macro2 v1.0.101\n#11 83.30    Compiling unicode-ident v1.0.18\n#11 83.30    Compiling libc v0.2.175\n#11 83.30    Compiling serde v1.0.219\n#11 83.30    Compiling cfg-if v1.0.3\n#11 83.30    Compiling memchr v2.7.5\n#11 83.30    Compiling once_cell v1.21.3\n#11 83.30    Compiling log v0.4.27\n#11 83.30    Compiling pin-project-lite v0.2.16\n#11 83.30    Compiling allocator-api2 v0.2.21\n#11 83.30    Compiling itoa v1.0.15\n#11 83.30    Compiling foldhash v0.1.5\n#11 83.31    Compiling bitflags v2.9.3\n#11 83.31    Compiling equivalent v1.0.2\n#11 83.31    Compiling futures-core v0.3.31\n#11 83.31    Compiling smallvec v1.15.1\n#11 83.31    Compiling rustix v1.0.8\n#11 83.31    Compiling getrandom v0.3.3\n#11 83.31    Compiling shlex v1.3.0\n#11 83.31    Compiling autocfg v1.5.0\n#11 83.31    Compiling linux-raw-sys v0.9.4\n#11 83.32    Compiling bytes v1.10.1\n#11 83.32    Compiling futures-sink v0.3.31\n#11 83.32    Compiling slab v0.4.11\n#11 83.32    Compiling unicode-width v0.2.1\n#11 83.32    Compiling version_check v0.9.5\n#11 83.32    Compiling pin-utils v0.1.0\n#11 83.32    Compiling ryu v1.0.20\n#11 83.32    Compiling percent-encoding v2.3.2\n#11 83.32    Compiling futures-io v0.3.31\n#11 83.32    Compiling serde_json v1.0.143\n#11 83.32    Compiling fnv v1.0.7\n#11 83.32    Compiling futures-task v0.3.31\n#11 83.33    Compiling winnow v0.7.13\n#11 83.33    Compiling camino v1.1.12\n#11 83.33    Compiling zeroize v1.8.1\n#11 83.33    Compiling adler2 v2.0.1\n#11 83.33    Compiling target-lexicon v0.13.2\n#11 83.33    Compiling utf8_iter v1.0.4\n#11 83.33    Compiling zerocopy v0.8.26\n#11 83.34    Compiling semver v1.0.26\n#11 83.34    Compiling typeid v1.0.3\n#11 83.34    Compiling object v0.36.7\n#11 83.34    Compiling idna_adapter v1.0.0\n#11 83.34    Compiling httparse v1.10.1\n#11 83.34    Compiling gimli v0.31.1\n#11 83.35    Compiling thiserror v2.0.16\n#11 83.35    Compiling guppy-workspace-hack v0.1.0\n#11 83.35    Compiling signal-hook v0.3.18\n#11 83.35    Compiling untrusted v0.9.0\n#11 83.36    Compiling typenum v1.18.0\n#11 83.36    Compiling owo-colors v4.2.2\n#11 83.37    Compiling toml_write v0.1.2\n#11 83.37    Compiling try-lock v0.2.5\n#11 83.37    Compiling atomic-waker v1.1.2\n#11 83.38    Compiling pkg-config v0.3.32\n#11 83.38    Compiling tower-service v0.3.3\n#11 83.38    Compiling rustc-demangle v0.1.26\n#11 83.39    Compiling fastrand v2.3.0\n#11 83.39    Compiling rustls v0.23.31\n#11 83.40    Compiling target-spec v3.5.0\n#11 83.40    Compiling regex-syntax v0.8.6\n#11 83.40    Compiling portable-atomic v1.11.1\n#11 83.41    Compiling subtle v2.6.1\n#11 83.41    Compiling thiserror v1.0.69\n#11 83.41    Compiling base64 v0.22.1\n#11 83.42    Compiling nextest-workspace-hack v0.1.0\n#11 83.42    Compiling ipnet v2.11.0\n#11 83.42    Compiling crc32fast v1.5.0\n#11 83.43    Compiling parking_lot_core v0.9.11\n#11 83.43    Compiling unicode-xid v0.2.6\n#11 83.44    Compiling unicode-linebreak v0.1.5\n#11 83.45    Compiling tower-layer v0.3.3\n#11 83.46    Compiling is_ci v1.2.0\n#11 83.46    Compiling lazy_static v1.5.0\n#11 83.46    Compiling either v1.15.0\n#11 83.46    Compiling unicode-segmentation v1.12.0\n#11 83.47    Compiling fixedbitset v0.5.7\n#11 83.47    Compiling cfg_aliases v0.2.1\n#11 83.47    Compiling scopeguard v1.2.0\n#11 83.48    Compiling rustix v0.38.44\n#11 83.49    Compiling pulldown-cmark v0.13.0\n#11 83.49    Compiling debug-ignore v1.0.5\n#11 83.50    Compiling supports-hyperlinks v3.1.0\n#11 83.50    Compiling supports-unicode v3.0.0\n#11 83.50    Compiling iri-string v0.7.8\n#11 83.51    Compiling utf8parse v0.2.2\n#11 83.51    Compiling unicode-width v0.1.14\n#11 83.51    Compiling zstd-safe v7.2.4\n#11 83.52    Compiling colorchoice v1.0.4\n#11 83.52    Compiling eyre v0.6.12\n#11 83.52    Compiling linux-raw-sys v0.4.15\n#11 83.61    Compiling futures-channel v0.3.31\n#11 83.61    Compiling form_urlencoded v1.2.2\n#11 83.62    Compiling rustls-pki-types v1.12.0\n#11 83.62    Compiling sync_wrapper v1.0.2\n#11 83.62    Compiling thread_local v1.1.9\n#11 83.63    Compiling self_update v0.42.0\n#11 83.63    Compiling color-spantrace v0.3.0\n#11 83.64    Compiling tinyvec_macros v0.1.1\n#11 83.64    Compiling litrs v0.4.2\n#11 83.64    Compiling static_assertions v1.1.0\n#11 83.69    Compiling hashbrown v0.15.5\n#11 83.69    Compiling tracing-core v0.1.34\n#11 83.70    Compiling idna v1.1.0\n#11 83.71    Compiling textwrap v0.16.2\n#11 83.71    Compiling unicase v2.8.1\n#11 83.71    Compiling nested v0.1.1\n#11 83.71    Compiling anstyle-query v1.1.4\n#11 83.71    Compiling anstyle v1.0.11\n#11 83.72    Compiling number_prefix v0.4.0\n#11 83.74    Compiling is_terminal_polyfill v1.70.1\n#11 83.77    Compiling num-traits v0.2.19\n#11 83.78    Compiling miniz_oxide v0.8.9\n#11 83.79    Compiling generic-array v0.14.7\n#11 83.79    Compiling lock_api v0.4.13\n#11 83.79    Compiling ahash v0.8.12\n#11 83.80    Compiling supports-color v3.0.2\n#11 83.81    Compiling sharded-slab v0.1.7\n#11 83.82    Compiling iana-time-zone v0.1.63\n#11 83.82    Compiling humantime v2.2.0\n#11 83.83    Compiling heck v0.5.0\n#11 83.83    Compiling shell-words v1.1.0\n#11 83.83    Compiling strsim v0.11.1\n#11 83.90    Compiling aho-corasick v1.1.3\n#11 83.90    Compiling want v0.3.1\n#11 83.92    Compiling bstr v1.12.0\n#11 83.92    Compiling quick-xml v0.37.5\n#11 83.94    Compiling nix v0.30.1\n#11 83.95    Compiling anstyle-parse v0.2.7\n#11 83.96    Compiling vte v0.14.1\n#11 83.98    Compiling tinyvec v1.10.0\n#11 83.98    Compiling cpufeatures v0.2.17\n#11 83.99    Compiling rustc-hash v2.1.1\n#11 83.99    Compiling clap_lex v0.7.5\n#11 84.00    Compiling recursion v0.5.4\n#11 84.00    Compiling urlencoding v2.1.3\n#11 84.02    Compiling unit-prefix v0.5.1\n#11 84.16    Compiling convert_case v0.7.1\n#11 84.16    Compiling itertools v0.14.0\n#11 84.17    Compiling toml_writer v1.0.2\n#11 84.18    Compiling indenter v0.3.4\n#11 84.20    Compiling shared_thread v0.2.0\n#11 84.23    Compiling xxhash-rust v0.8.15\n#11 84.23    Compiling hex v0.4.3\n#11 84.24    Compiling indent_write v2.2.0\n#11 84.25    Compiling home v0.5.11\n#11 84.25    Compiling swrite v0.1.0\n#11 84.25    Compiling enable-ansi-support v0.2.1\n#11 84.27    Compiling http v1.3.1\n#11 84.28    Compiling tracing-log v0.2.0\n#11 84.29    Compiling webpki-roots v1.0.2\n#11 84.30    Compiling document-features v0.2.11\n#11 84.30    Compiling strip-ansi-escapes v0.2.1\n#11 84.31    Compiling anstream v0.6.20\n#11 84.35    Compiling flate2 v1.1.2\n#11 84.48    Compiling iddqd v0.3.11\n#11 84.54    Compiling unicode-normalization v0.1.24\n#11 84.57    Compiling cfg-expr v0.20.2\n#11 84.59    Compiling tracing-subscriber v0.3.20\n#11 84.61    Compiling quote v1.0.40\n#11 84.68    Compiling cargo-nextest v0.9.103\n#11 84.74    Compiling syn v2.0.106\n#11 85.02    Compiling ordered-float v2.10.1\n#11 85.02    Compiling chrono v0.4.41\n#11 85.04    Compiling jobserver v0.1.34\n#11 85.08    Compiling http-body v1.0.1\n#11 85.15    Compiling http-body-util v0.1.3\n#11 85.19    Compiling cc v1.2.34\n#11 85.20    Compiling toml_parser v1.0.2\n#11 85.23    Compiling crypto-common v0.1.6\n#11 85.23    Compiling block-buffer v0.10.4\n#11 85.31    Compiling digest v0.10.7\n#11 85.43    Compiling sha2 v0.10.9\n#11 85.51    Compiling regex-automata v0.4.10\n#11 85.58    Compiling signal-hook-registry v1.4.6\n#11 85.58    Compiling mio v1.0.4\n#11 85.58    Compiling socket2 v0.6.0\n#11 85.58    Compiling getrandom v0.2.16\n#11 85.58    Compiling console v0.15.11\n#11 85.59    Compiling os_pipe v1.2.2\n#11 85.59    Compiling filetime v0.2.26\n#11 85.60    Compiling console v0.16.0\n#11 85.74    Compiling uuid v1.18.0\n#11 85.74    Compiling rand_core v0.9.3\n#11 85.83    Compiling parking_lot v0.12.4\n#11 85.87    Compiling tempfile v3.21.0\n#11 85.87    Compiling terminal_size v0.4.3\n#11 85.87    Compiling xattr v1.5.1\n#11 85.94    Compiling clap_builder v4.5.46\n#11 85.95    Compiling ppv-lite86 v0.2.21\n#11 85.96    Compiling sigchld v0.2.4\n#11 85.96    Compiling signal-hook-mio v0.2.4\n#11 85.97    Compiling newtype-uuid v1.3.0\n#11 85.97    Compiling indicatif v0.17.11\n#11 85.99    Compiling indicatif v0.18.0\n#11 86.01    Compiling tar v0.4.44\n#11 86.02    Compiling addr2line v0.24.2\n#11 86.06    Compiling ring v0.17.14\n#11 86.06    Compiling zstd-sys v2.0.15+zstd.1.5.7\n#11 86.07    Compiling shared_child v1.1.1\n#11 86.12    Compiling self-replace v1.5.0\n#11 86.12    Compiling atomicwrites v0.4.4\n#11 86.17    Compiling duct v1.1.0\n#11 86.33    Compiling rand_chacha v0.9.0\n#11 86.48    Compiling rand v0.9.2\n#11 87.77    Compiling serde_derive v1.0.219\n#11 87.77    Compiling tokio-macros v2.5.0\n#11 87.77    Compiling futures-macro v0.3.31\n#11 87.77    Compiling tracing-attributes v0.1.30\n#11 87.77    Compiling thiserror-impl v2.0.16\n#11 87.77    Compiling thiserror-impl v1.0.69\n#11 87.77    Compiling miette-derive v7.6.0\n#11 87.77    Compiling derive_more-impl v2.0.1\n#11 87.77    Compiling pin-project-internal v1.1.10\n#11 87.77    Compiling derive-where v1.6.0\n#11 87.77    Compiling clap_derive v4.5.45\n#11 87.78    Compiling backtrace v0.3.75\n#11 87.82    Compiling regex v1.11.2\n#11 87.82    Compiling globset v0.4.16\n#11 88.25    Compiling backtrace-ext v0.2.1\n#11 88.40    Compiling tokio v1.47.1\n#11 88.54    Compiling derive_more v2.0.1\n#11 88.55    Compiling futures-util v0.3.31\n#11 88.58    Compiling crossterm v0.29.0\n#11 88.82    Compiling pin-project v1.1.10\n#11 88.84    Compiling tracing v0.1.41\n#11 88.92    Compiling miette v7.6.0\n#11 88.94    Compiling dialoguer v0.11.0\n#11 88.97    Compiling tracing-error v0.2.1\n#11 89.16    Compiling color-eyre v0.6.5\n#11 89.43    Compiling clap v4.5.46\n#11 90.73    Compiling futures-executor v0.3.31\n#11 90.73    Compiling future-queue v0.4.0\n#11 90.82    Compiling futures v0.3.31\n#11 91.87    Compiling indexmap v2.11.0\n#11 91.87    Compiling url v2.5.7\n#11 91.87    Compiling serde_spanned v0.6.9\n#11 91.87    Compiling toml_datetime v0.6.11\n#11 91.87    Compiling erased-serde v0.4.6\n#11 91.88    Compiling serde-value v0.7.0\n#11 91.88    Compiling toml_datetime v0.7.0\n#11 91.88    Compiling serde_spanned v1.0.0\n#11 91.88    Compiling cargo-platform v0.2.0\n#11 91.88    Compiling smol_str v0.3.2\n#11 91.88    Compiling serde_urlencoded v0.7.1\n#11 91.88    Compiling serde_ignored v0.1.12\n#11 91.88    Compiling humantime-serde v1.1.1\n#11 91.88    Compiling serde_path_to_error v0.1.17\n#11 92.08    Compiling tokio-util v0.7.16\n#11 92.08    Compiling tower v0.5.2\n#11 92.08    Compiling async-scoped v0.9.0\n#11 92.08    Compiling tokio-stream v0.1.17\n#11 92.19    Compiling pathdiff v0.2.3\n#11 92.19    Compiling camino-tempfile v1.4.1\n#11 92.30    Compiling serde-untagged v0.1.8\n#11 92.44    Compiling tower-http v0.6.6\n#11 92.56    Compiling toml_edit v0.22.27\n#11 92.56    Compiling h2 v0.4.12\n#11 92.56    Compiling petgraph v0.8.2\n#11 92.56    Compiling toml v0.9.5\n#11 92.56    Compiling quick-junit v0.5.1\n#11 92.56    Compiling toml_edit v0.23.4\n#11 92.59    Compiling rustls-webpki v0.103.4\n#11 92.67    Compiling mukti-metadata v0.3.0\n#11 93.08    Compiling nextest-metadata v0.12.2\n#11 93.08    Compiling target-spec-miette v0.4.4\n#11 93.12    Compiling config v0.15.15\n#11 94.37    Compiling toml v0.8.23\n#11 94.77    Compiling cargo-util-schemas v0.8.2\n#11 95.15    Compiling hyper v1.7.0\n#11 95.73    Compiling cargo_metadata v0.21.0\n#11 96.02    Compiling hyper-util v0.1.16\n#11 96.23    Compiling zstd v0.13.3\n#11 96.31    Compiling tokio-rustls v0.26.2\n#11 96.59    Compiling guppy v0.17.20\n#11 96.99    Compiling hyper-rustls v0.27.7\n#11 97.16    Compiling reqwest v0.12.23\n#11 98.10    Compiling nextest-filtering v0.16.0\n#11 99.10    Compiling nextest-runner v0.86.0\n#11 112.4     Finished `release` profile [optimized] target(s) in 1m 31s\n#11 112.5   Installing /usr/local/cargo/bin/cargo-nextest\n#11 112.5    Installed package `cargo-nextest v0.9.103` (executable `cargo-nextest`)\n#11 112.6      Summary Successfully installed cargo-hack, cargo-minimal-versions, wasm-pack, cargo-nextest!\n#11 DONE 112.8s\n\n#12 [stage-0  6/13] RUN --mount=type=cache,target=/usr/local/cargo/registry     --mount=type=cache,target=target     cargo build --workspace\n#12 0.370     Updating crates.io index\n#12 1.219      Locking 332 packages to latest compatible versions\n#12 1.222       Adding ahash v0.7.8 (available: v0.8.12)\n#12 1.246       Adding criterion v0.3.6 (available: v0.7.0)\n#12 1.249       Adding crossterm v0.28.1 (available: v0.29.0)\n#12 1.255       Adding futures v0.1.31 (available: v0.3.31)\n#12 1.262       Adding http v0.2.12 (available: v1.3.1)\n#12 1.269       Adding hyper v0.14.32 (available: v1.7.0)\n#12 1.272       Adding inferno v0.11.21 (available: v0.12.3)\n#12 1.278       Adding lru v0.7.8 (available: v0.16.0)\n#12 1.279       Adding mio v0.6.23 (available: v1.0.4)\n#12 1.290       Adding rand v0.7.3 (available: v0.9.2)\n#12 1.321       Adding snafu v0.6.10 (available: v0.8.8)\n#12 1.333       Adding tokio v0.1.22 (available: v1.47.1)\n#12 1.338       Adding tower v0.4.13 (available: v0.5.2)\n#12 1.340       Adding unicode-width v0.2.0 (available: v0.2.1)\n#12 1.445     Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.08s\n#12 DONE 1.5s\n\n#13 [stage-0  7/13] RUN --mount=type=cache,target=/usr/local/cargo/registry     --mount=type=cache,target=target     cargo test --workspace -- --show-output\n#13 0.549     Finished `test` profile [unoptimized + debuginfo] target(s) in 0.15s\n#13 0.578      Running unittests src/lib.rs (target/debug/deps/tracing-923b47c8b5a17290)\n#13 0.580 \n#13 0.580 running 1 test\n#13 0.580 test span::test::test_record_backwards_compat ... ok\n#13 0.580 \n#13 0.580 successes:\n#13 0.580 \n#13 0.580 successes:\n#13 0.580     span::test::test_record_backwards_compat\n#13 0.580 \n#13 0.580 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 0.580 \n#13 0.581      Running tests/enabled.rs (target/debug/deps/enabled-bd0f7fa6f9ef314d)\n#13 0.583 \n#13 0.583 running 2 tests\n#13 0.584 test level_and_target ... ok\n#13 0.584 test span_and_event ... ok\n#13 0.584 \n#13 0.584 successes:\n#13 0.584 \n#13 0.584 ---- level_and_target stdout ----\n#13 0.584 [level_and_target] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> true\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> true\n#13 0.584 [level_and_target] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Error,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:22,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895028, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Error,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:22,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895028, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> true\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Error,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:22,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895028, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Error,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:22,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895028, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Error,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:22,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895028, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> true\n#13 0.584 [level_and_target] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:23,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895040, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:23,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895040, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> false\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:23,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895040, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:23,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895040, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> false\n#13 0.584 \n#13 0.584 ---- span_and_event stdout ----\n#13 0.584 [level_and_target] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> true\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:21,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895010, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [level_and_target] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:47\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:47,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895058, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:47\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:47,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895058, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> false\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:47\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:47,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895058, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:47\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:47,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895058, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> false\n#13 0.584 [level_and_target] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:48,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895070, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:48,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895070, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [level_and_target] enabled -> false\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:48,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895070, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:48,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895070, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:48,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895070, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:48,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895070, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:49\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:49,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895088, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(SPAN | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:49\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:49,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895088, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(SPAN | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:49\",\n#13 0.584     target: \"enabled\",\n#13 0.584     level: Level(\n#13 0.584         Trace,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:49,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca3895088, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(SPAN | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:52\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:52,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca38950a0, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(SPAN | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:52\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:52,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca38950a0, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(SPAN | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:52\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:52,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca38950a0, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(SPAN | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] register_callsite: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:53\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:53,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca38950b8, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:53\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:53,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca38950b8, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 [span_and_event] enabled: Metadata {\n#13 0.584     name: \"enabled tracing/tests/enabled.rs:53\",\n#13 0.584     target: \"debug_module\",\n#13 0.584     level: Level(\n#13 0.584         Debug,\n#13 0.584     ),\n#13 0.584     module_path: \"enabled\",\n#13 0.584     location: tracing/tests/enabled.rs:53,\n#13 0.584     fields: {},\n#13 0.584     callsite: Identifier(Pointer { addr: 0x563ca38950b8, metadata: DynMetadata(0x563ca3885900) }),\n#13 0.584     kind: Kind(EVENT | HINT),\n#13 0.584 }\n#13 0.584 [span_and_event] enabled -> true\n#13 0.584 \n#13 0.584 \n#13 0.584 successes:\n#13 0.584     level_and_target\n#13 0.584     span_and_event\n#13 0.584 \n#13 0.584 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 0.584 \n#13 0.584      Running tests/event.rs (target/debug/deps/event-5b5e69cada366cbb)\n#13 0.586 \n#13 0.586 running 23 tests\n#13 0.588 test borrowed_field ... ok\n#13 0.588 test both_shorthands ... ok\n#13 0.588 test display_shorthand ... ok\n#13 0.588 test dotted_field_name ... ok\n#13 0.588 test debug_shorthand ... ok\n#13 0.588 test event_with_message ... ok\n#13 0.626 test move_field_out_of_struct ... ok\n#13 0.626 test moved_field ... ok\n#13 0.626 test keyword_ident_in_field_name ... ok\n#13 0.627 test explicit_child ... ok\n#13 0.627 test one_with_everything ... ok\n#13 0.628 test option_ref_mut_values ... ok\n#13 0.628 test constant_field_name ... ok\n#13 0.628 test event_without_message ... ok\n#13 0.628 test nonzeroi32_event_without_message ... ok\n#13 0.628 test option_ref_values ... ok\n#13 0.628 test string_field ... ok\n#13 0.629 test option_values ... ok\n#13 0.629 test message_without_delims ... ok\n#13 0.629 test explicit_child_at_levels ... ok\n#13 0.629 test raw_ident_in_field_name ... ok\n#13 0.630 test wrapping_event_without_message ... ok\n#13 0.630 test string_message_without_delims ... ok\n#13 0.630 \n#13 0.630 successes:\n#13 0.638 \n#13 0.638 ---- borrowed_field stdout ----\n#13 0.638 [borrowed_field] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [borrowed_field] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [borrowed_field] enabled -> true\n#13 0.638 [borrowed_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [borrowed_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [borrowed_field] enabled -> true\n#13 0.638 [borrowed_field] event: event tracing/tests/event.rs:227;\n#13 0.638 \n#13 0.638 ---- both_shorthands stdout ----\n#13 0.638 [borrowed_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [borrowed_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [borrowed_field] enabled -> true\n#13 0.638 [both_shorthands] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [both_shorthands] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [both_shorthands] enabled -> true\n#13 0.638 [both_shorthands] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [both_shorthands] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [both_shorthands] enabled -> true\n#13 0.638 [both_shorthands] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [both_shorthands] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [both_shorthands] enabled -> true\n#13 0.638 [both_shorthands] event: event tracing/tests/event.rs:330;\n#13 0.638 \n#13 0.638 ---- display_shorthand stdout ----\n#13 0.638 [display_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled -> true\n#13 0.638 [display_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled -> true\n#13 0.638 [display_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled -> true\n#13 0.638 [display_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [display_shorthand] enabled -> true\n#13 0.638 [display_shorthand] event: event tracing/tests/event.rs:289;\n#13 0.638 \n#13 0.638 ---- dotted_field_name stdout ----\n#13 0.638 [dotted_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled -> true\n#13 0.638 [dotted_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled -> true\n#13 0.638 [dotted_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled -> true\n#13 0.638 [dotted_field_name] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled -> true\n#13 0.638 [dotted_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled -> true\n#13 0.638 [dotted_field_name] event: event tracing/tests/event.rs:205;\n#13 0.638 \n#13 0.638 ---- debug_shorthand stdout ----\n#13 0.638 [dotted_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [dotted_field_name] enabled -> true\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [debug_shorthand] event: event tracing/tests/event.rs:309;\n#13 0.638 \n#13 0.638 ---- event_with_message stdout ----\n#13 0.638 [debug_shorthand] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [debug_shorthand] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [event_with_message] event: event tracing/tests/event.rs:72;\n#13 0.638 \n#13 0.638 ---- move_field_out_of_struct stdout ----\n#13 0.638 [event_with_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_with_message] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [move_field_out_of_struct] event: event tracing/tests/event.rs:269;\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child_at_levels] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child_at_levels] enabled -> true\n#13 0.638 [nonzeroi32_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled -> true\n#13 0.638 [one_with_everything] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [one_with_everything] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [one_with_everything] enabled -> true\n#13 0.638 [option_ref_mut_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_mut_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_mut_values] enabled -> true\n#13 0.638 [option_ref_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_values] enabled -> true\n#13 0.638 [option_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_values] enabled -> true\n#13 0.638 [string_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_field] enabled -> true\n#13 0.638 [raw_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [raw_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [raw_ident_in_field_name] enabled -> true\n#13 0.638 [string_message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_message_without_delims] enabled -> true\n#13 0.638 [wrapping_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [wrapping_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [wrapping_event_without_message] enabled -> true\n#13 0.638 [move_field_out_of_struct] event: event tracing/tests/event.rs:270;\n#13 0.638 \n#13 0.638 ---- moved_field stdout ----\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child_at_levels] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child_at_levels] enabled -> true\n#13 0.638 [nonzeroi32_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled -> true\n#13 0.638 [one_with_everything] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [one_with_everything] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [one_with_everything] enabled -> true\n#13 0.638 [option_ref_mut_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_mut_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_mut_values] enabled -> true\n#13 0.638 [option_ref_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_values] enabled -> true\n#13 0.638 [option_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_values] enabled -> true\n#13 0.638 [string_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_field] enabled -> true\n#13 0.638 [raw_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [raw_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [raw_ident_in_field_name] enabled -> true\n#13 0.638 [string_message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_message_without_delims] enabled -> true\n#13 0.638 [wrapping_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [wrapping_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [wrapping_event_without_message] enabled -> true\n#13 0.638 [moved_field] event: event tracing/tests/event.rs:184;\n#13 0.638 \n#13 0.638 ---- keyword_ident_in_field_name stdout ----\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:330\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:330,\n#13 0.638     fields: {display_field, debug_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:227\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:227,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"fake\",\n#13 0.638     target: \"tracing_mock::field\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"tracing_mock::field\",\n#13 0.638     location: tracing-mock/src/field.rs:610,\n#13 0.638     fields: {fake_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child_at_levels] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child_at_levels] enabled -> true\n#13 0.638 [nonzeroi32_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled -> true\n#13 0.638 [one_with_everything] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [one_with_everything] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [one_with_everything] enabled -> true\n#13 0.638 [option_ref_mut_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_mut_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_mut_values] enabled -> true\n#13 0.638 [option_ref_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_ref_values] enabled -> true\n#13 0.638 [option_values] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_values] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [option_values] enabled -> true\n#13 0.638 [string_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_field] enabled -> true\n#13 0.638 [string_message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [string_message_without_delims] enabled -> true\n#13 0.638 [wrapping_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [wrapping_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [wrapping_event_without_message] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] event: event tracing/tests/event.rs:618;\n#13 0.638 \n#13 0.638 ---- explicit_child stdout ----\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:541\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:541,\n#13 0.638     fields: {message, foo, constant string, foo.bar},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab280, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:101\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:101,\n#13 0.638     fields: {message, answer, question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab070, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:50\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:50,\n#13 0.638     fields: {answer, to_question},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab010, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:618\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Error,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:618,\n#13 0.638     fields: {message, crate},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab340, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0b8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab370, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:269\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:269,\n#13 0.638     fields: {x, y},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab388, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:72\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:72,\n#13 0.638     fields: {message},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab058, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:309\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:309,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab118, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [moved_field] enabled -> true\n#13 0.638 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [keyword_ident_in_field_name] enabled -> true\n#13 0.638 [event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [event_without_message] enabled -> true\n#13 0.638 [message_without_delims] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [message_without_delims] enabled -> true\n#13 0.638 [constant_field_name] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [constant_field_name] enabled -> true\n#13 0.638 [explicit_child] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:205\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:205,\n#13 0.638     fields: {foo.bar, foo.baz},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab0d0, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [explicit_child] enabled -> true\n#13 0.638 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [move_field_out_of_struct] enabled -> true\n#13 0.638 [moved_field] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:289\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Trace,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:289,\n#13 0.638     fields: {my_field},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled -> true\n#13 0.639 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled -> true\n#13 0.639 [event_without_message] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled -> true\n#13 0.639 [message_without_delims] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled -> true\n#13 0.639 [constant_field_name] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled -> true\n#13 0.639 [explicit_child] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:289\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:289,\n#13 0.639     fields: {my_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab100, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled -> true\n#13 0.639 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled -> true\n#13 0.639 [moved_field] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled -> true\n#13 0.639 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled -> true\n#13 0.639 [event_without_message] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled -> true\n#13 0.639 [message_without_delims] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled -> true\n#13 0.639 [constant_field_name] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled -> true\n#13 0.639 [explicit_child] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:330\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:330,\n#13 0.639     fields: {display_field, debug_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab130, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled -> true\n#13 0.639 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled -> true\n#13 0.639 [moved_field] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled -> true\n#13 0.639 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled -> true\n#13 0.639 [event_without_message] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled -> true\n#13 0.639 [message_without_delims] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled -> true\n#13 0.639 [constant_field_name] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled -> true\n#13 0.639 [explicit_child] register_callsite: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled: Metadata {\n#13 0.639     name: \"event tracing/tests/event.rs:227\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Info,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:227,\n#13 0.639     fields: {foo},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab0e8, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled -> true\n#13 0.639 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled -> true\n#13 0.639 [moved_field] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [moved_field] enabled -> true\n#13 0.639 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled -> true\n#13 0.639 [event_without_message] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled -> true\n#13 0.639 [message_without_delims] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled -> true\n#13 0.639 [constant_field_name] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled -> true\n#13 0.639 [explicit_child] register_callsite: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled: Metadata {\n#13 0.639     name: \"fake\",\n#13 0.639     target: \"tracing_mock::field\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"tracing_mock::field\",\n#13 0.639     location: tracing-mock/src/field.rs:610,\n#13 0.639     fields: {fake_field},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab3a0, metadata: DynMetadata(0x55f8035a3578) }),\n#13 0.639     kind: Kind(EVENT),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled -> true\n#13 0.639 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [move_field_out_of_struct] enabled -> true\n#13 0.639 [moved_field] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [moved_field] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [moved_field] enabled -> true\n#13 0.639 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [keyword_ident_in_field_name] enabled -> true\n#13 0.639 [event_without_message] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [event_without_message] enabled -> true\n#13 0.639 [message_without_delims] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [message_without_delims] enabled -> true\n#13 0.639 [constant_field_name] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [constant_field_name] enabled -> true\n#13 0.639 [explicit_child] register_callsite: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled: Metadata {\n#13 0.639     name: \"foo\",\n#13 0.639     target: \"event\",\n#13 0.639     level: Level(\n#13 0.639         Trace,\n#13 0.639     ),\n#13 0.639     module_path: \"event\",\n#13 0.639     location: tracing/tests/event.rs:346,\n#13 0.639     fields: {},\n#13 0.639     callsite: Identifier(Pointer { addr: 0x55f8035ab148, metadata: DynMetadata(0x55f803599928) }),\n#13 0.639     kind: Kind(SPAN),\n#13 0.639 }\n#13 0.639 [explicit_child] enabled -> true\n#13 0.639 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.639     name: \"f\n#13 0.639 [output clipped, log limit 200KiB/s reached]\n#13 0.641      Running tests/filter_caching_is_lexically_scoped.rs (target/debug/deps/filter_caching_is_lexically_scoped-65dd074a99eb7869)\n#13 0.644      Running tests/filters_are_not_reevaluated_for_the_same_span.rs (target/debug/deps/filters_are_not_reevaluated_for_the_same_span-1d6c2b861dde1240)\n#13 0.647      Running tests/filters_are_reevaluated_for_different_call_sites.rs (target/debug/deps/filters_are_reevaluated_for_different_call_sites-9ac8aebe3f9244c1)\n#13 0.650      Running tests/filters_dont_leak.rs (target/debug/deps/filters_dont_leak-43845863a931490a)\n#13 0.654      Running tests/future_send.rs (target/debug/deps/future_send-ddb3974ef07e6d23)\n#13 0.657      Running tests/instrument.rs (target/debug/deps/instrument-a47ea8b4babde974)\n#13 0.660      Running tests/macro_imports.rs (target/debug/deps/macro_imports-fe02506a9810858b)\n#13 0.663      Running tests/macros.rs (target/debug/deps/macros-aecdd04cdc164e4e)\n#13 0.670      Running tests/macros_incompatible_concat.rs (target/debug/deps/macros_incompatible_concat-1cc000af0d6a1885)\n#13 0.672      Running tests/max_level_hint.rs (target/debug/deps/max_level_hint-cf6ffdbe63eb678b)\n#13 0.675      Running tests/missed_register_callsite.rs (target/debug/deps/missed_register_callsite-c4147fc0b4079d89)\n#13 0.778      Running tests/multiple_max_level_hints.rs (target/debug/deps/multiple_max_level_hints-f7f9739cbfc36991)\n#13 0.781      Running tests/no_subscriber.rs (target/debug/deps/no_subscriber-a50c92f97cb7f7f4)\n#13 0.785      Running tests/register_callsite_deadlock.rs (target/debug/deps/register_callsite_deadlock-42a0812960255d8b)\n#13 0.788      Running tests/scoped_clobbers_default.rs (target/debug/deps/scoped_clobbers_default-b187719e730ed561)\n#13 0.791      Running tests/span.rs (target/debug/deps/span-a7cfe38cc7bfb8c7)\n#13 1.046      Running tests/subscriber.rs (target/debug/deps/subscriber-a5a3ff6315fec54c)\n#13 1.049      Running unittests src/lib.rs (target/debug/deps/tracing_appender-04368258e11243ac)\n#13 6.071      Running unittests src/lib.rs (target/debug/deps/tracing_attributes-77bfca6ff021554e)\n#13 6.074      Running tests/async_fn.rs (target/debug/deps/async_fn-7f67cbcf7ef6c2b0)\n#13 6.084      Running tests/dead_code.rs (target/debug/deps/dead_code-189550194a125f7a)\n#13 6.087      Running tests/destructuring.rs (target/debug/deps/destructuring-2cef51104a51a7c9)\n#13 6.092      Running tests/err.rs (target/debug/deps/err-1f4c8a07afba1e9f)\n#13 6.110      Running tests/fields.rs (target/debug/deps/fields-765d54db324829c9)\n#13 6.120      Running tests/follows_from.rs (target/debug/deps/follows_from-d88bbf60bf2e3ba0)\n#13 6.124      Running tests/instrument.rs (target/debug/deps/instrument-9d49f534aeecfb87)\n#13 6.133      Running tests/levels.rs (target/debug/deps/levels-218a1349cbf08bfb)\n#13 6.136      Running tests/names.rs (target/debug/deps/names-babb4b7a0c035795)\n#13 6.139      Running tests/parents.rs (target/debug/deps/parents-f28b3e589cd2c881)\n#13 6.142      Running tests/ret.rs (target/debug/deps/ret-3bf3c0720fd12a00)\n#13 6.157      Running tests/targets.rs (target/debug/deps/targets-97a17d23db869b34)\n#13 6.160      Running tests/ui.rs (target/debug/deps/ui-3221c9d7be663047)\n#13 6.236    Compiling tracing-attributes-tests v0.0.0 (/workspace/target/tests/trybuild/tracing-attributes)\n#13 6.372     Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.17s\n#13 6.429 \n#13 6.429 \n#13 6.429 test tests/ui/pass/type_shadowing.rs ... ok\n#13 6.538 \n#13 6.538 WARNINGS:\n#13 6.538 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 6.538 warning: unused import: `Bar::*`\n#13 6.538   --> tests/ui/pass/type_shadowing.rs:14:9\n#13 6.538    |\n#13 6.538 14 |     use Bar::*;\n#13 6.538    |         ^^^^^^\n#13 6.538    |\n#13 6.538    = note: `#[warn(unused_imports)]` on by default\n#13 6.538 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 6.538 \n#13 6.538 STDERR:\n#13 6.538 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 6.538 warning: unused import: `Bar::*`\n#13 6.538   --> /workspace/tracing-attributes/tests/ui/pass/type_shadowing.rs:14:9\n#13 6.538    |\n#13 6.538 14 |     use Bar::*;\n#13 6.538    |         ^^^^^^\n#13 6.538    |\n#13 6.538    = note: `#[warn(unused_imports)]` on by default\n#13 6.538 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 6.538 \n#13 6.538 \n#13 6.538 \n#13 6.583     Checking tracing-attributes-tests v0.0.0 (/workspace/target/tests/trybuild/tracing-attributes)\n#13 6.621     Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.07s\n#13 6.673 \n#13 6.673 \n#13 6.850 test tests/ui/fail/async_instrument.rs ... ok\n#13 6.850 test tests/ui/fail/const_instrument.rs ... ok\n#13 6.850 test tests/ui/fail/unused_instrumented_fn.rs ... ok\n#13 6.850 \n#13 6.850 \n#13 6.851      Running unittests src/lib.rs (target/debug/deps/tracing_core-734d01840db1e916)\n#13 6.856      Running tests/dispatch.rs (target/debug/deps/dispatch-75c9d1a443927b39)\n#13 6.859      Running tests/global_dispatch.rs (target/debug/deps/global_dispatch-e28841795b95072c)\n#13 6.862      Running tests/local_dispatch_before_init.rs (target/debug/deps/local_dispatch_before_init-de2b7849bbc31f2a)\n#13 6.865      Running tests/macros.rs (target/debug/deps/macros-1d65857f050f4003)\n#13 6.866      Running tests/missed_register_callsite.rs (target/debug/deps/missed_register_callsite-6eed3a01502a01bf)\n#13 6.880      Running unittests src/lib.rs (target/debug/deps/tracing_error-23aeb8e58b602ab1)\n#13 6.884      Running unittests src/lib.rs (target/debug/deps/tracing_flame-35f2bd68cbb6e0db)\n#13 6.886      Running tests/collapsed.rs (target/debug/deps/collapsed-107fe0355326d447)\n#13 7.506      Running tests/concurrent.rs (target/debug/deps/concurrent-d30dc24ba1fefae1)\n#13 7.641      Running unittests src/lib.rs (target/debug/deps/tracing_futures-2cbbccacd703eaf2)\n#13 7.645      Running tests/std_future.rs (target/debug/deps/std_future-b9f19c63b694ba50)\n#13 7.648      Running unittests src/lib.rs (target/debug/deps/tracing_journald-87169daee49b2f8b)\n#13 7.651      Running tests/journal.rs (target/debug/deps/journal-85cc291f5ef386fd)\n#13 7.656 error: test failed, to rerun pass `-p tracing-journald --test journal`\n#13 7.726  Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn_info] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled -> true\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test] new_span: name=\"ret\"; target=\"ret\"; id=Id(1);\n#13 7.726 [test] enter: ret; id=Id(1);\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca028, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test] event: event tracing-attributes/tests/ret.rs:11;\n#13 7.726 [test] exit: ret; id=Id(1);\n#13 7.726 [test] drop_span: ret; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- test_warn stdout ----\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_and_ok\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:231,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1c0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_custom_target] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn_info] register_callsite: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled -> true\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca070, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn] new_span: name=\"ret_warn\"; target=\"ret\"; id=Id(1);\n#13 7.726 [test_warn] enter: ret_warn; id=Id(1);\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:68,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca088, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn] event: event tracing-attributes/tests/ret.rs:68;\n#13 7.726 [test_warn] exit: ret_warn; id=Id(1);\n#13 7.726 [test_warn] drop_span: ret_warn; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- test_custom_target stdout ----\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_custom_target] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn_info] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled -> true\n#13 7.726 [test_custom_target] new_span: name=\"ret_with_target\"; target=\"my_target\"; id=Id(1);\n#13 7.726 [test_custom_target] enter: ret_with_target; id=Id(1);\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_custom_target] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca058, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_custom_target] event: event tracing-attributes/tests/ret.rs:16;\n#13 7.726 [test_custom_target] exit: ret_with_target; id=Id(1);\n#13 7.726 [test_custom_target] drop_span: ret_with_target; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- test_ret_and_err stdout ----\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_mut\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:93,\n#13 7.726     fields: {a},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0a0, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_impl_type\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:152,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca118, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_custom_target] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn_info] register_callsite: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled -> true\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_and_err\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca178, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_err] new_span: name=\"ret_and_err\"; target=\"ret\"; id=Id(1);\n#13 7.726 [test_ret_and_err] enter: ret_and_err; id=Id(1);\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Error,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:202,\n#13 7.726     fields: {error},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca1a8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_err] event: event tracing-attributes/tests/ret.rs:202;\n#13 7.726 [test_ret_and_err] exit: ret_and_err; id=Id(1);\n#13 7.726 [test_ret_and_err] drop_span: ret_and_err; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- test_dbg_warn stdout ----\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_custom_target] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_custom_target] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_with_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca040, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:11,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca010, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_async\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:125,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca0e8, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca160, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_display\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:177,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca148, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"fake\",\n#13 7.726     target: \"tracing_mock::field\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_mock::field\",\n#13 7.726     location: tracing-mock/src/field.rs:610,\n#13 7.726     fields: {fake_field},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca268, metadata: DynMetadata(0x564badbac3d0) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_warn_info] register_callsite: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_warn_info] enabled -> true\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"ret_dbg_warn\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca238, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg_warn] new_span: name=\"ret_dbg_warn\"; target=\"ret\"; id=Id(1);\n#13 7.726 [test_dbg_warn] enter: ret_dbg_warn; id=Id(1);\n#13 7.726 [test_dbg] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg] enabled -> true\n#13 7.726 [test_async] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_async] enabled -> true\n#13 7.726 [test] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test] enabled -> true\n#13 7.726 [test_dbg_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_impl_type] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_impl_type] enabled -> true\n#13 7.726 [test_mut] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_mut] enabled -> true\n#13 7.726 [test_ret_and_err] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_err] enabled -> true\n#13 7.726 [test_ret_and_ok] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_ret_and_ok] enabled -> true\n#13 7.726 [test_warn] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_warn] enabled -> true\n#13 7.726 [test_dbg_warn] enabled: Metadata {\n#13 7.726     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 7.726     target: \"ret\",\n#13 7.726     level: Level(\n#13 7.726         Warn,\n#13 7.726     ),\n#13 7.726     module_path: \"ret\",\n#13 7.726     location: tracing-attributes/tests/ret.rs:285,\n#13 7.726     fields: {return},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x564badbca250, metadata: DynMetadata(0x564badba2020) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [test_dbg_warn] enabled -> true\n#13 7.726 [test_dbg_warn] event: event tracing-attributes/tests/ret.rs:285;\n#13 7.726 [test_dbg_warn] exit: ret_dbg_warn; id=Id(1);\n#13 7.726 [test_dbg_warn] drop_span: ret_dbg_warn; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     test\n#13 7.726     test_async\n#13 7.726     test_custom_target\n#13 7.726     test_dbg\n#13 7.726     test_dbg_warn\n#13 7.726     test_impl_type\n#13 7.726     test_mut\n#13 7.726     test_ret_and_err\n#13 7.726     test_ret_and_ok\n#13 7.726     test_warn\n#13 7.726     test_warn_info\n#13 7.726 \n#13 7.726 test result: ok. 11 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 2 tests\n#13 7.726 test custom_targets ... ok\n#13 7.726 test default_targets ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 ---- custom_targets stdout ----\n#13 7.726 [custom_targets] register_callsite: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:8,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8028, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:8,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8028, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled -> true\n#13 7.726 [custom_targets] new_span: name=\"custom_target\"; target=\"my_target\"; id=Id(1);\n#13 7.726 [custom_targets] enter: custom_target; id=Id(1);\n#13 7.726 [custom_targets] exit: custom_target; id=Id(1);\n#13 7.726 [custom_targets] drop_span: custom_target; id=Id(1); refs=1;\n#13 7.726 [custom_targets] register_callsite: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_other_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:19,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8058, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_other_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:19,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8058, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled -> true\n#13 7.726 [default_targets] register_callsite: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_other_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:19,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8058, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_other_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:19,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8058, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled -> true\n#13 7.726 [custom_targets] new_span: name=\"custom_target\"; target=\"my_other_target\"; id=Id(2);\n#13 7.726 [custom_targets] enter: custom_target; id=Id(2);\n#13 7.726 [custom_targets] exit: custom_target; id=Id(2);\n#13 7.726 [custom_targets] drop_span: custom_target; id=Id(2); refs=1;\n#13 7.726 \n#13 7.726 ---- default_targets stdout ----\n#13 7.726 [custom_targets] register_callsite: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:8,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8028, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:8,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8028, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled -> true\n#13 7.726 [default_targets] register_callsite: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:8,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8028, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled: Metadata {\n#13 7.726     name: \"custom_target\",\n#13 7.726     target: \"my_target\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:8,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8028, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled -> true\n#13 7.726 [custom_targets] register_callsite: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:5,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8010, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:5,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8010, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled -> true\n#13 7.726 [default_targets] register_callsite: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:5,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8010, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:5,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8010, metadata: DynMetadata(0x5572b16e8240) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled -> true\n#13 7.726 [default_targets] new_span: name=\"default_target\"; target=\"targets\"; id=Id(1);\n#13 7.726 [default_targets] enter: default_target; id=Id(1);\n#13 7.726 [default_targets] exit: default_target; id=Id(1);\n#13 7.726 [default_targets] drop_span: default_target; id=Id(1); refs=1;\n#13 7.726 [custom_targets] register_callsite: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets::my_mod\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8040, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets::my_mod\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8040, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [custom_targets] enabled -> true\n#13 7.726 [default_targets] register_callsite: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets::my_mod\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8040, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled: Metadata {\n#13 7.726     name: \"default_target\",\n#13 7.726     target: \"targets::my_mod\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"targets::my_mod\",\n#13 7.726     location: tracing-attributes/tests/targets.rs:16,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x5572b16f8040, metadata: DynMetadata(0x5572b16e8a38) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [default_targets] enabled -> true\n#13 7.726 [default_targets] new_span: name=\"default_target\"; target=\"targets::my_mod\"; id=Id(2);\n#13 7.726 [default_targets] enter: default_target; id=Id(2);\n#13 7.726 [default_targets] exit: default_target; id=Id(2);\n#13 7.726 [default_targets] drop_span: default_target; id=Id(2); refs=1;\n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     custom_targets\n#13 7.726     default_targets\n#13 7.726 \n#13 7.726 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 2 tests\n#13 7.726 test pass ... ok\n#13 7.726 test compile_fail ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     compile_fail\n#13 7.726     pass\n#13 7.726 \n#13 7.726 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.69s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 20 tests\n#13 7.726 test dispatcher::test::default_dispatch ... ok\n#13 7.726 test dispatcher::test::default_no_subscriber ... ok\n#13 7.726 test dispatcher::test::dispatch_is ... ok\n#13 7.726 test dispatcher::test::dispatch_downcasts ... ok\n#13 7.726 test dispatcher::test::events_dont_infinite_loop ... ok\n#13 7.726 test dispatcher::test::spans_dont_infinite_loop ... ok\n#13 7.726 test field::test::empty_value_set_is_empty ... ok\n#13 7.726 test field::test::empty_fields_are_skipped ... ok\n#13 7.726 test field::test::fields_from_other_callsets_are_skipped ... ok\n#13 7.726 test field::test::index_of_field_in_fieldset_is_correct ... ok\n#13 7.726 test field::test::record_bytes ... ok\n#13 7.726 test field::test::record_debug_fn ... ok\n#13 7.726 test field::test::record_error ... ok\n#13 7.726 test field::test::value_set_with_no_values_is_empty ... ok\n#13 7.726 test field::test::sparse_value_sets_are_not_empty ... ok\n#13 7.726 test field::test::value_sets_with_fields_from_other_callsites_are_empty ... ok\n#13 7.726 test metadata::tests::level_filter_is_usize_sized ... ok\n#13 7.726 test metadata::tests::filter_level_conversion ... ok\n#13 7.726 test metadata::tests::level_filter_reprs ... ok\n#13 7.726 test metadata::tests::level_from_str ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     dispatcher::test::default_dispatch\n#13 7.726     dispatcher::test::default_no_subscriber\n#13 7.726     dispatcher::test::dispatch_downcasts\n#13 7.726     dispatcher::test::dispatch_is\n#13 7.726     dispatcher::test::events_dont_infinite_loop\n#13 7.726     dispatcher::test::spans_dont_infinite_loop\n#13 7.726     field::test::empty_fields_are_skipped\n#13 7.726     field::test::empty_value_set_is_empty\n#13 7.726     field::test::fields_from_other_callsets_are_skipped\n#13 7.726     field::test::index_of_field_in_fieldset_is_correct\n#13 7.726     field::test::record_bytes\n#13 7.726     field::test::record_debug_fn\n#13 7.726     field::test::record_error\n#13 7.726     field::test::sparse_value_sets_are_not_empty\n#13 7.726     field::test::value_set_with_no_values_is_empty\n#13 7.726     field::test::value_sets_with_fields_from_other_callsites_are_empty\n#13 7.726     metadata::tests::filter_level_conversion\n#13 7.726     metadata::tests::level_filter_is_usize_sized\n#13 7.726     metadata::tests::level_filter_reprs\n#13 7.726     metadata::tests::level_from_str\n#13 7.726 \n#13 7.726 test result: ok. 20 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 2 tests\n#13 7.726 test set_default_dispatch ... ok\n#13 7.726 test nested_set_default ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     nested_set_default\n#13 7.726     set_default_dispatch\n#13 7.726 \n#13 7.726 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test global_dispatch ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     global_dispatch\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test local_dispatch_before_init ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 ---- local_dispatch_before_init stdout ----\n#13 7.726 [tracing-core/tests/local_dispatch_before_init.rs:15:47] current = Dispatch::Global(\n#13 7.726     Pointer { addr: 0x562ce0e9bb76, metadata: DynMetadata(0x562ce0ec2510) },\n#13 7.726 )\n#13 7.726 [tracing-core/tests/local_dispatch_before_init.rs:25:21] current = Dispatch::Scoped(\n#13 7.726     0x7f3c19531610,\n#13 7.726 )\n#13 7.726 [tracing-core/tests/local_dispatch_before_init.rs:39:13] current = Dispatch::Global(\n#13 7.726     Pointer { addr: 0x7f3c14000d60, metadata: DynMetadata(0x562ce0ebbce0) },\n#13 7.726 )\n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     local_dispatch_before_init\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test metadata_macro_api ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     metadata_macro_api\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test event_before_register ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     event_before_register\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 3 tests\n#13 7.726 test backtrace::tests::capture_empty ... ok\n#13 7.726 test backtrace::tests::capture_unsupported ... ok\n#13 7.726 test backtrace::tests::capture_supported ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 ---- backtrace::tests::capture_empty stdout ----\n#13 7.726 [tracing-error/src/backtrace.rs:298:13] &span_trace = SpanTrace []\n#13 7.726 \n#13 7.726 ---- backtrace::tests::capture_unsupported stdout ----\n#13 7.726 [tracing-error/src/backtrace.rs:314:13] &span_trace = SpanTrace []\n#13 7.726 \n#13 7.726 ---- backtrace::tests::capture_supported stdout ----\n#13 7.726 [tracing-error/src/backtrace.rs:285:13] &span_trace = SpanTrace [\n#13 7.726     { target: \"tracing_error::backtrace::tests\", name: \"test span\", file: \"tracing-error/src/backtrace.rs\", line: 280 },\n#13 7.726 ]\n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     backtrace::tests::capture_empty\n#13 7.726     backtrace::tests::capture_supported\n#13 7.726     backtrace::tests::capture_unsupported\n#13 7.726 \n#13 7.726 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 0 tests\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test capture_supported ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     capture_supported\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.62s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test capture_supported ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 ---- capture_supported stdout ----\n#13 7.726 ThreadId(2)-capture_supported 416037\n#13 7.726 ThreadId(2)-capture_supported;concurrent::main 33916\n#13 7.726 ThreadId(3);concurrent::main;concurrent::outer 10893924\n#13 7.726 ThreadId(2)-capture_supported;concurrent::main;concurrent::outer 30415358\n#13 7.726 ThreadId(3);concurrent::main;concurrent::outer;concurrent::Inner 50133154\n#13 7.726 \n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     capture_supported\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.13s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 3 tests\n#13 7.726 test tests::futures_01_tests::future_enter_exit_is_reasonable ... ok\n#13 7.726 test tests::futures_01_tests::future_error_ends_span ... ok\n#13 7.726 test tests::futures_01_tests::stream_enter_exit_is_reasonable ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 ---- tests::futures_01_tests::future_enter_exit_is_reasonable stdout ----\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- tests::futures_01_tests::future_error_ends_span stdout ----\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] drop_span: foo; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- tests::futures_01_tests::stream_enter_exit_is_reasonable stdout ----\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:671,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528028, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:650,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528010, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:696,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528040, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:696,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528040, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:696,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528040, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 7.726     location: tracing-futures/src/lib.rs:696,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x55dd7a528040, metadata: DynMetadata(0x55dd7a518ce0) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [tests::futures_01_tests::stream_enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     tests::futures_01_tests::future_enter_exit_is_reasonable\n#13 7.726     tests::futures_01_tests::future_error_ends_span\n#13 7.726     tests::futures_01_tests::stream_enter_exit_is_reasonable\n#13 7.726 \n#13 7.726 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 3 tests\n#13 7.726 test enter_exit_is_reasonable ... ok\n#13 7.726 test error_ends_span ... ok\n#13 7.726 test span_on_drop ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 ---- enter_exit_is_reasonable stdout ----\n#13 7.726 [enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [enter_exit_is_reasonable] enabled -> true\n#13 7.726 [enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 7.726 [enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- error_ends_span stdout ----\n#13 7.726 [enter_exit_is_reasonable] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [enter_exit_is_reasonable] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [enter_exit_is_reasonable] enabled -> true\n#13 7.726 [error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [error_ends_span] enabled -> true\n#13 7.726 [error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:41,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2028, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:41,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2028, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [error_ends_span] enabled -> true\n#13 7.726 [error_ends_span] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 7.726 [error_ends_span] enter: foo; id=Id(1);\n#13 7.726 [error_ends_span] exit: foo; id=Id(1);\n#13 7.726 [error_ends_span] enter: foo; id=Id(1);\n#13 7.726 [error_ends_span] exit: foo; id=Id(1);\n#13 7.726 [error_ends_span] enter: foo; id=Id(1);\n#13 7.726 [error_ends_span] exit: foo; id=Id(1);\n#13 7.726 [error_ends_span] drop_span: foo; id=Id(1); refs=1;\n#13 7.726 \n#13 7.726 ---- span_on_drop stdout ----\n#13 7.726 [error_ends_span] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:41,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2028, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [error_ends_span] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:41,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2028, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [error_ends_span] enabled -> true\n#13 7.726 [span_on_drop] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:41,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2028, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:41,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2028, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled -> true\n#13 7.726 [span_on_drop] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:22,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2010, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled -> true\n#13 7.726 [span_on_drop] register_callsite: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:95,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2058, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled: Metadata {\n#13 7.726     name: \"foo\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:95,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2058, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled -> true\n#13 7.726 [span_on_drop] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 7.726 [span_on_drop] enter: foo; id=Id(1);\n#13 7.726 [span_on_drop] register_callsite: Metadata {\n#13 7.726     name: \"event tracing-futures/tests/std_future.rs:54\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:54,\n#13 7.726     fields: {message},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2040, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled: Metadata {\n#13 7.726     name: \"event tracing-futures/tests/std_future.rs:54\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Info,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:54,\n#13 7.726     fields: {message},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2040, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(EVENT),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled -> true\n#13 7.726 [span_on_drop] event: event tracing-futures/tests/std_future.rs:54;\n#13 7.726 ----> [span_on_drop] check MockSpan { name: \"foo\" } against actual parent with Id=Id(1)\n#13 7.726 [span_on_drop] exit: foo; id=Id(1);\n#13 7.726 [span_on_drop] enter: foo; id=Id(1);\n#13 7.726 [span_on_drop] exit: foo; id=Id(1);\n#13 7.726 [span_on_drop] drop_span: foo; id=Id(1); refs=1;\n#13 7.726 [span_on_drop] register_callsite: Metadata {\n#13 7.726     name: \"bar\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:100,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2070, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled: Metadata {\n#13 7.726     name: \"bar\",\n#13 7.726     target: \"std_future\",\n#13 7.726     level: Level(\n#13 7.726         Trace,\n#13 7.726     ),\n#13 7.726     module_path: \"std_future\",\n#13 7.726     location: tracing-futures/tests/std_future.rs:100,\n#13 7.726     fields: {},\n#13 7.726     callsite: Identifier(Pointer { addr: 0x559a9b0f2070, metadata: DynMetadata(0x559a9b0e18b8) }),\n#13 7.726     kind: Kind(SPAN),\n#13 7.726 }\n#13 7.726 [span_on_drop] enabled -> true\n#13 7.726 [span_on_drop] new_span: name=\"bar\"; target=\"std_future\"; id=Id(2);\n#13 7.726 [span_on_drop] enter: bar; id=Id(2);\n#13 7.726 [span_on_drop] event: event tracing-futures/tests/std_future.rs:54;\n#13 7.726 ----> [span_on_drop] check MockSpan { name: \"bar\" } against actual parent with Id=Id(2)\n#13 7.726 [span_on_drop] exit: bar; id=Id(2);\n#13 7.726 [span_on_drop] drop_span: bar; id=Id(2); refs=1;\n#13 7.726 \n#13 7.726 \n#13 7.726 successes:\n#13 7.726     enter_exit_is_reasonable\n#13 7.726     error_ends_span\n#13 7.726     span_on_drop\n#13 7.726 \n#13 7.726 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 1 test\n#13 7.726 test socket::cmsg_buffer_size_for_one_fd ... ok\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726     socket::cmsg_buffer_size_for_one_fd\n#13 7.726 \n#13 7.726 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 7.726 \n#13 7.726 running 11 tests\n#13 7.726 test custom_priorities ... FAILED\n#13 7.726 test journal_fields ... FAILED\n#13 7.726 test internal_null_byte ... FAILED\n#13 7.726 test multiline_message ... FAILED\n#13 7.726 test multiline_message_trailing_newline ... FAILED\n#13 7.726 test multiple_spans_metadata ... FAILED\n#13 7.726 test simple_message ... FAILED\n#13 7.726 test span_metadata ... FAILED\n#13 7.726 test spans_field_collision ... FAILED\n#13 7.726 test simple_metadata ... FAILED\n#13 7.726 test large_message ... FAILED\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 successes:\n#13 7.726 \n#13 7.726 failures:\n#13 7.726 \n#13 7.726 ---- custom_priorities stdout ----\n#13 7.726 \n#13 7.726 thread 'custom_priorities' panicked at tracing-journald/tests/journal.rs:196:10:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- journal_fields stdout ----\n#13 7.726 \n#13 7.726 thread 'journal_fields' panicked at tracing-journald/tests/journal.rs:288:10:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- internal_null_byte stdout ----\n#13 7.726 \n#13 7.726 thread 'internal_null_byte' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n#13 7.726 \n#13 7.726 ---- multiline_message stdout ----\n#13 7.726 \n#13 7.726 thread 'multiline_message' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- multiline_message_trailing_newline stdout ----\n#13 7.726 \n#13 7.726 thread 'multiline_message_trailing_newline' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- multiple_spans_metadata stdout ----\n#13 7.726 \n#13 7.726 thread 'multiple_spans_metadata' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- simple_message stdout ----\n#13 7.726 \n#13 7.726 thread 'simple_message' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- span_metadata stdout ----\n#13 7.726 \n#13 7.726 thread 'span_metadata' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- spans_field_collision stdout ----\n#13 7.726 \n#13 7.726 thread 'spans_field_collision' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- simple_metadata stdout ----\n#13 7.726 \n#13 7.726 thread 'simple_metadata' panicked at tracing-journald/tests/journal.rs:269:10:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 ---- large_message stdout ----\n#13 7.726 \n#13 7.726 thread 'large_message' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 7.726 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 7.726 \n#13 7.726 \n#13 7.726 failures:\n#13 7.726     custom_priorities\n#13 7.726     internal_null_byte\n#13 7.726     journal_fields\n#13 7.726     large_message\n#13 7.726     multiline_message\n#13 7.726     multiline_message_trailing_newline\n#13 7.726     multiple_spans_metadata\n#13 7.726     simple_message\n#13 7.726     simple_metadata\n#13 7.726     span_metadata\n#13 7.726     spans_field_collision\n#13 7.726 \n#13 7.726 test result: FAILED. 0 passed; 11 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 7.726 \n#13 ERROR: process \"/bin/sh -c cargo test --workspace -- --show-output\" did not complete successfully: exit code: 101\n------\n > [stage-0  7/13] RUN --mount=type=cache,target=/usr/local/cargo/registry     --mount=type=cache,target=target     cargo test --workspace -- --show-output:\n7.726     multiline_message\n7.726     multiline_message_trailing_newline\n7.726     multiple_spans_metadata\n7.726     simple_message\n7.726     simple_metadata\n7.726     span_metadata\n7.726     spans_field_collision\n7.726 \n7.726 test result: FAILED. 0 passed; 11 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n7.726 \n------\nERROR: failed to solve: process \"/bin/sh -c cargo test --workspace -- --show-output\" did not complete successfully: exit code: 101\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}