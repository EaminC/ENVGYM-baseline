{
  "timestamp": "20250831_160255",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756656163",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 2.38kB done\n#1 DONE 0.0s\n\n#2 resolve image config for docker-image://docker.io/docker/dockerfile:1.4\n#2 DONE 0.2s\n\n#3 docker-image://docker.io/docker/dockerfile:1.4@sha256:9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc\n#3 CACHED\n\n#4 [internal] load .dockerignore\n#4 transferring context: 2B done\n#4 DONE 0.0s\n\n#5 [internal] load metadata for docker.io/library/rust:latest\n#5 DONE 0.2s\n\n#6 [stage-0  1/15] FROM docker.io/library/rust:latest@sha256:3329e2de3e9ff2d58da56e95ef99a3180a4e76336a676f3fe2b88f0b0d6bcfbf\n#6 resolve docker.io/library/rust:latest@sha256:3329e2de3e9ff2d58da56e95ef99a3180a4e76336a676f3fe2b88f0b0d6bcfbf done\n#6 DONE 0.0s\n\n#7 [internal] load build context\n#7 transferring context: 6.16MB 0.1s done\n#7 DONE 0.1s\n\n#8 [stage-0  2/15] RUN apt-get update &&     apt-get install -y pkg-config libssl-dev chromium &&     apt-get clean &&     rm -rf /var/lib/apt/lists/*\n#8 CACHED\n\n#9 [stage-0  3/15] RUN --mount=type=cache,target=/usr/local/cargo/registry     rustup component add rustfmt clippy &&     rustup target add wasm32-unknown-unknown &&     rustup toolchain install nightly &&     cargo install cargo-hack cargo-minimal-versions wasm-pack cargo-nextest\n#9 CACHED\n\n#10 [stage-0  4/15] WORKDIR /workspace\n#10 CACHED\n\n#11 [stage-0  5/15] COPY . .\n#11 DONE 0.1s\n\n#12 [stage-0  6/15] RUN --mount=type=cache,target=/usr/local/cargo/registry     --mount=type=cache,target=target     cargo build --workspace\n#12 0.272     Updating crates.io index\n#12 1.034      Locking 332 packages to latest compatible versions\n#12 1.036       Adding ahash v0.7.8 (available: v0.8.12)\n#12 1.060       Adding criterion v0.3.6 (available: v0.7.0)\n#12 1.063       Adding crossterm v0.28.1 (available: v0.29.0)\n#12 1.069       Adding futures v0.1.31 (available: v0.3.31)\n#12 1.076       Adding http v0.2.12 (available: v1.3.1)\n#12 1.083       Adding hyper v0.14.32 (available: v1.7.0)\n#12 1.086       Adding inferno v0.11.21 (available: v0.12.3)\n#12 1.092       Adding lru v0.7.8 (available: v0.16.0)\n#12 1.094       Adding mio v0.6.23 (available: v1.0.4)\n#12 1.104       Adding rand v0.7.3 (available: v0.9.2)\n#12 1.136       Adding snafu v0.6.10 (available: v0.8.8)\n#12 1.148       Adding tokio v0.1.22 (available: v1.47.1)\n#12 1.153       Adding tower v0.4.13 (available: v0.5.2)\n#12 1.155       Adding unicode-width v0.2.0 (available: v0.2.1)\n#12 1.261     Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.00s\n#12 DONE 1.4s\n\n#13 [stage-0  7/15] RUN --mount=type=cache,target=/usr/local/cargo/registry     --mount=type=cache,target=target     RUST_BACKTRACE=1 cargo test --workspace -- --nocapture --test-threads=1\n#13 0.579     Finished `test` profile [unoptimized + debuginfo] target(s) in 0.16s\n#13 0.606      Running unittests src/lib.rs (target/debug/deps/tracing-923b47c8b5a17290)\n#13 0.608 \n#13 0.608 running 1 test\n#13 0.608 test span::test::test_record_backwards_compat ... ok\n#13 0.608 \n#13 0.608 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 0.608 \n#13 0.609      Running tests/enabled.rs (target/debug/deps/enabled-bd0f7fa6f9ef314d)\n#13 0.610 \n#13 0.610 running 2 tests\n#13 0.610 test level_and_target ... [level_and_target] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.611     target: \"debug_module\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:21,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1010, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.611     target: \"debug_module\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:21,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1010, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled -> true\n#13 0.611 [level_and_target] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.611     target: \"debug_module\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:21,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1010, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled -> true\n#13 0.611 [level_and_target] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Error,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:22,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1028, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Error,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:22,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1028, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled -> true\n#13 0.611 [level_and_target] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Error,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:22,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1028, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled -> true\n#13 0.611 [level_and_target] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:23,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1040, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:23,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1040, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [level_and_target] enabled -> false\n#13 0.611 ok\n#13 0.611 test span_and_event ... [span_and_event] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:23,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1040, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:23\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:23,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1040, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled -> false\n#13 0.611 [span_and_event] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Error,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:22,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1028, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:22\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Error,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:22,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1028, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled -> true\n#13 0.611 [span_and_event] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.611     target: \"debug_module\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:21,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1010, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:21\",\n#13 0.611     target: \"debug_module\",\n#13 0.611     level: Level(\n#13 0.611         Debug,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:21,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1010, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled -> true\n#13 0.611 [span_and_event] register_callsite: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:47\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Trace,\n#13 0.611     ),\n#13 0.611     module_path: \"enabled\",\n#13 0.611     location: tracing/tests/enabled.rs:47,\n#13 0.611     fields: {},\n#13 0.611     callsite: Identifier(Pointer { addr: 0x557a392e1058, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.611     kind: Kind(EVENT | HINT),\n#13 0.611 }\n#13 0.611 [span_and_event] enabled: Metadata {\n#13 0.611     name: \"enabled tracing/tests/enabled.rs:47\",\n#13 0.611     target: \"enabled\",\n#13 0.611     level: Level(\n#13 0.611         Trace,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:47,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1058, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> false\n#13 0.612 [span_and_event] register_callsite: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.612     target: \"enabled\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:48,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1070, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.612     target: \"enabled\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:48,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1070, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:48\",\n#13 0.612     target: \"enabled\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:48,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1070, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] register_callsite: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:49\",\n#13 0.612     target: \"enabled\",\n#13 0.612     level: Level(\n#13 0.612         Trace,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:49,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1088, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(SPAN | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:49\",\n#13 0.612     target: \"enabled\",\n#13 0.612     level: Level(\n#13 0.612         Trace,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:49,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1088, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(SPAN | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:49\",\n#13 0.612     target: \"enabled\",\n#13 0.612     level: Level(\n#13 0.612         Trace,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:49,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e1088, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(SPAN | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] register_callsite: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:52\",\n#13 0.612     target: \"debug_module\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:52,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e10a0, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(SPAN | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:52\",\n#13 0.612     target: \"debug_module\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:52,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e10a0, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(SPAN | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:52\",\n#13 0.612     target: \"debug_module\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:52,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e10a0, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(SPAN | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] register_callsite: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:53\",\n#13 0.612     target: \"debug_module\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:53,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e10b8, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:53\",\n#13 0.612     target: \"debug_module\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:53,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e10b8, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 [span_and_event] enabled: Metadata {\n#13 0.612     name: \"enabled tracing/tests/enabled.rs:53\",\n#13 0.612     target: \"debug_module\",\n#13 0.612     level: Level(\n#13 0.612         Debug,\n#13 0.612     ),\n#13 0.612     module_path: \"enabled\",\n#13 0.612     location: tracing/tests/enabled.rs:53,\n#13 0.612     fields: {},\n#13 0.612     callsite: Identifier(Pointer { addr: 0x557a392e10b8, metadata: DynMetadata(0x557a392d1900) }),\n#13 0.612     kind: Kind(EVENT | HINT),\n#13 0.612 }\n#13 0.612 [span_and_event] enabled -> true\n#13 0.612 ok\n#13 0.612 \n#13 0.612 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 0.612 \n#13 0.613      Running tests/event.rs (target/debug/deps/event-5b5e69cada366cbb)\n#13 0.614 \n#13 0.614 running 23 tests\n#13 0.614 test borrowed_field ... [borrowed_field] register_callsite: Metadata {\n#13 0.615     name: \"fake\",\n#13 0.615     target: \"tracing_mock::field\",\n#13 0.615     level: Level(\n#13 0.615         Trace,\n#13 0.615     ),\n#13 0.615     module_path: \"tracing_mock::field\",\n#13 0.615     location: tracing-mock/src/field.rs:610,\n#13 0.615     fields: {fake_field},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [borrowed_field] enabled: Metadata {\n#13 0.615     name: \"fake\",\n#13 0.615     target: \"tracing_mock::field\",\n#13 0.615     level: Level(\n#13 0.615         Trace,\n#13 0.615     ),\n#13 0.615     module_path: \"tracing_mock::field\",\n#13 0.615     location: tracing-mock/src/field.rs:610,\n#13 0.615     fields: {fake_field},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [borrowed_field] enabled -> true\n#13 0.615 [borrowed_field] register_callsite: Metadata {\n#13 0.615     name: \"event tracing/tests/event.rs:227\",\n#13 0.615     target: \"event\",\n#13 0.615     level: Level(\n#13 0.615         Info,\n#13 0.615     ),\n#13 0.615     module_path: \"event\",\n#13 0.615     location: tracing/tests/event.rs:227,\n#13 0.615     fields: {foo},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [borrowed_field] enabled: Metadata {\n#13 0.615     name: \"event tracing/tests/event.rs:227\",\n#13 0.615     target: \"event\",\n#13 0.615     level: Level(\n#13 0.615         Info,\n#13 0.615     ),\n#13 0.615     module_path: \"event\",\n#13 0.615     location: tracing/tests/event.rs:227,\n#13 0.615     fields: {foo},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [borrowed_field] enabled -> true\n#13 0.615 [borrowed_field] event: event tracing/tests/event.rs:227;\n#13 0.615 ok\n#13 0.615 test both_shorthands ... [both_shorthands] register_callsite: Metadata {\n#13 0.615     name: \"event tracing/tests/event.rs:227\",\n#13 0.615     target: \"event\",\n#13 0.615     level: Level(\n#13 0.615         Info,\n#13 0.615     ),\n#13 0.615     module_path: \"event\",\n#13 0.615     location: tracing/tests/event.rs:227,\n#13 0.615     fields: {foo},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [both_shorthands] enabled: Metadata {\n#13 0.615     name: \"event tracing/tests/event.rs:227\",\n#13 0.615     target: \"event\",\n#13 0.615     level: Level(\n#13 0.615         Info,\n#13 0.615     ),\n#13 0.615     module_path: \"event\",\n#13 0.615     location: tracing/tests/event.rs:227,\n#13 0.615     fields: {foo},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [both_shorthands] enabled -> true\n#13 0.615 [both_shorthands] register_callsite: Metadata {\n#13 0.615     name: \"fake\",\n#13 0.615     target: \"tracing_mock::field\",\n#13 0.615     level: Level(\n#13 0.615         Trace,\n#13 0.615     ),\n#13 0.615     module_path: \"tracing_mock::field\",\n#13 0.615     location: tracing-mock/src/field.rs:610,\n#13 0.615     fields: {fake_field},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [both_shorthands] enabled: Metadata {\n#13 0.615     name: \"fake\",\n#13 0.615     target: \"tracing_mock::field\",\n#13 0.615     level: Level(\n#13 0.615         Trace,\n#13 0.615     ),\n#13 0.615     module_path: \"tracing_mock::field\",\n#13 0.615     location: tracing-mock/src/field.rs:610,\n#13 0.615     fields: {fake_field},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [both_shorthands] enabled -> true\n#13 0.615 [both_shorthands] register_callsite: Metadata {\n#13 0.615     name: \"event tracing/tests/event.rs:330\",\n#13 0.615     target: \"event\",\n#13 0.615     level: Level(\n#13 0.615         Trace,\n#13 0.615     ),\n#13 0.615     module_path: \"event\",\n#13 0.615     location: tracing/tests/event.rs:330,\n#13 0.615     fields: {display_field, debug_field},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [both_shorthands] enabled: Metadata {\n#13 0.615     name: \"event tracing/tests/event.rs:330\",\n#13 0.615     target: \"event\",\n#13 0.615     level: Level(\n#13 0.615         Trace,\n#13 0.615     ),\n#13 0.615     module_path: \"event\",\n#13 0.615     location: tracing/tests/event.rs:330,\n#13 0.615     fields: {display_field, debug_field},\n#13 0.615     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.615     kind: Kind(EVENT),\n#13 0.615 }\n#13 0.615 [both_shorthands] enabled -> true\n#13 0.615 [both_shorthands] event: event tracing/tests/event.rs:330;\n#13 0.615 ok\n#13 0.615 test constant_field_name ... [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:330\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Trace,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:330,\n#13 0.616     fields: {display_field, debug_field},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:330\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Trace,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:330,\n#13 0.616     fields: {display_field, debug_field},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:227\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:227,\n#13 0.616     fields: {foo},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:227\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:227,\n#13 0.616     fields: {foo},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"fake\",\n#13 0.616     target: \"tracing_mock::field\",\n#13 0.616     level: Level(\n#13 0.616         Trace,\n#13 0.616     ),\n#13 0.616     module_path: \"tracing_mock::field\",\n#13 0.616     location: tracing-mock/src/field.rs:610,\n#13 0.616     fields: {fake_field},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"fake\",\n#13 0.616     target: \"tracing_mock::field\",\n#13 0.616     level: Level(\n#13 0.616         Trace,\n#13 0.616     ),\n#13 0.616     module_path: \"tracing_mock::field\",\n#13 0.616     location: tracing-mock/src/field.rs:610,\n#13 0.616     fields: {fake_field},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:541\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:541,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:541\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:541,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:541;\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:548\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:548,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:548\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:548,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:548;\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:557\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:557,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:557\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:557,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:557;\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:563\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:563,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:563\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:563,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:563;\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:571\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:571,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:571\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:571,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:571;\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:579\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:579,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:579\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:579,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:579;\n#13 0.616 [constant_field_name] register_callsite: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:589\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:589,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled: Metadata {\n#13 0.616     name: \"event tracing/tests/event.rs:589\",\n#13 0.616     target: \"event\",\n#13 0.616     level: Level(\n#13 0.616         Info,\n#13 0.616     ),\n#13 0.616     module_path: \"event\",\n#13 0.616     location: tracing/tests/event.rs:589,\n#13 0.616     fields: {message, foo, constant string, foo.bar},\n#13 0.616     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.616     kind: Kind(EVENT),\n#13 0.616 }\n#13 0.616 [constant_field_name] enabled -> true\n#13 0.616 [constant_field_name] event: event tracing/tests/event.rs:589;\n#13 0.617 [constant_field_name] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:596\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:596,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [constant_field_name] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:596\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:596,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [constant_field_name] enabled -> true\n#13 0.617 [constant_field_name] event: event tracing/tests/event.rs:596;\n#13 0.617 ok\n#13 0.617 test debug_shorthand ... [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:596\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:596,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:596\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:596,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:589\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:589,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:589\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:589,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:579\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:579,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:579\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:579,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:571\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:571,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:571\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:571,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:563\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:563,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:563\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:563,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:557\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:557,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:557\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:557,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:548\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:548,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:548\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.617     module_path: \"event\",\n#13 0.617     location: tracing/tests/event.rs:548,\n#13 0.617     fields: {message, foo, constant string, foo.bar},\n#13 0.617     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.617     kind: Kind(EVENT),\n#13 0.617 }\n#13 0.617 [debug_shorthand] enabled -> true\n#13 0.617 [debug_shorthand] register_callsite: Metadata {\n#13 0.617     name: \"event tracing/tests/event.rs:541\",\n#13 0.617     target: \"event\",\n#13 0.617     level: Level(\n#13 0.617         Info,\n#13 0.617     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:541,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:541\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:541,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled -> true\n#13 0.618 [debug_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:330\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:330,\n#13 0.618     fields: {display_field, debug_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:330\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:330,\n#13 0.618     fields: {display_field, debug_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled -> true\n#13 0.618 [debug_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:227\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:227,\n#13 0.618     fields: {foo},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:227\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:227,\n#13 0.618     fields: {foo},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled -> true\n#13 0.618 [debug_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"fake\",\n#13 0.618     target: \"tracing_mock::field\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"tracing_mock::field\",\n#13 0.618     location: tracing-mock/src/field.rs:610,\n#13 0.618     fields: {fake_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled: Metadata {\n#13 0.618     name: \"fake\",\n#13 0.618     target: \"tracing_mock::field\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"tracing_mock::field\",\n#13 0.618     location: tracing-mock/src/field.rs:610,\n#13 0.618     fields: {fake_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled -> true\n#13 0.618 [debug_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:309\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:309,\n#13 0.618     fields: {my_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:309\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:309,\n#13 0.618     fields: {my_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [debug_shorthand] enabled -> true\n#13 0.618 [debug_shorthand] event: event tracing/tests/event.rs:309;\n#13 0.618 ok\n#13 0.618 test display_shorthand ... [display_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:309\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:309,\n#13 0.618     fields: {my_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:309\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Trace,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:309,\n#13 0.618     fields: {my_field},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled -> true\n#13 0.618 [display_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:596\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:596,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:596\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:596,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled -> true\n#13 0.618 [display_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:589\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:589,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:589\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:589,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled -> true\n#13 0.618 [display_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:579\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:579,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:579\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:579,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled -> true\n#13 0.618 [display_shorthand] register_callsite: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:571\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:571,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled: Metadata {\n#13 0.618     name: \"event tracing/tests/event.rs:571\",\n#13 0.618     target: \"event\",\n#13 0.618     level: Level(\n#13 0.618         Info,\n#13 0.618     ),\n#13 0.618     module_path: \"event\",\n#13 0.618     location: tracing/tests/event.rs:571,\n#13 0.618     fields: {message, foo, constant string, foo.bar},\n#13 0.618     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.618     kind: Kind(EVENT),\n#13 0.618 }\n#13 0.618 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:563\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:563,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:563\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:563,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:557\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:557,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:557\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:557,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:548\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:548,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:548\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:548,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:541\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:541,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:541\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:541,\n#13 0.619     fields: {message, foo, constant string, foo.bar},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:330\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:330,\n#13 0.619     fields: {display_field, debug_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:330\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:330,\n#13 0.619     fields: {display_field, debug_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:227\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:227,\n#13 0.619     fields: {foo},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:227\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Info,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:227,\n#13 0.619     fields: {foo},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"fake\",\n#13 0.619     target: \"tracing_mock::field\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"tracing_mock::field\",\n#13 0.619     location: tracing-mock/src/field.rs:610,\n#13 0.619     fields: {fake_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"fake\",\n#13 0.619     target: \"tracing_mock::field\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"tracing_mock::field\",\n#13 0.619     location: tracing-mock/src/field.rs:610,\n#13 0.619     fields: {fake_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:289\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:289,\n#13 0.619     fields: {my_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:289\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:289,\n#13 0.619     fields: {my_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [display_shorthand] enabled -> true\n#13 0.619 [display_shorthand] event: event tracing/tests/event.rs:289;\n#13 0.619 ok\n#13 0.619 test dotted_field_name ... [dotted_field_name] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:289\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:289,\n#13 0.619     fields: {my_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [dotted_field_name] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:289\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:289,\n#13 0.619     fields: {my_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [dotted_field_name] enabled -> true\n#13 0.619 [dotted_field_name] register_callsite: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:309\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:309,\n#13 0.619     fields: {my_field},\n#13 0.619     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.619     kind: Kind(EVENT),\n#13 0.619 }\n#13 0.619 [dotted_field_name] enabled: Metadata {\n#13 0.619     name: \"event tracing/tests/event.rs:309\",\n#13 0.619     target: \"event\",\n#13 0.619     level: Level(\n#13 0.619         Trace,\n#13 0.619     ),\n#13 0.619     module_path: \"event\",\n#13 0.619     location: tracing/tests/event.rs:309,\n#13 0.619     fields: {my_field},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:596\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:596,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:596\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:596,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:589\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:589,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:589\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:589,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:579\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:579,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:579\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:579,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:571\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:571,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:571\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:571,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:563\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:563,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:563\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:563,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:557\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:557,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:557\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:557,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:548\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:548,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:548\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:548,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:541\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:541,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:541\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:541,\n#13 0.620     fields: {message, foo, constant string, foo.bar},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:330\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Trace,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:330,\n#13 0.620     fields: {display_field, debug_field},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:330\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Trace,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:330,\n#13 0.620     fields: {display_field, debug_field},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:227\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:227,\n#13 0.620     fields: {foo},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:227\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:227,\n#13 0.620     fields: {foo},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"fake\",\n#13 0.620     target: \"tracing_mock::field\",\n#13 0.620     level: Level(\n#13 0.620         Trace,\n#13 0.620     ),\n#13 0.620     module_path: \"tracing_mock::field\",\n#13 0.620     location: tracing-mock/src/field.rs:610,\n#13 0.620     fields: {fake_field},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"fake\",\n#13 0.620     target: \"tracing_mock::field\",\n#13 0.620     level: Level(\n#13 0.620         Trace,\n#13 0.620     ),\n#13 0.620     module_path: \"tracing_mock::field\",\n#13 0.620     location: tracing-mock/src/field.rs:610,\n#13 0.620     fields: {fake_field},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] register_callsite: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:205\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:205,\n#13 0.620     fields: {foo.bar, foo.baz},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled: Metadata {\n#13 0.620     name: \"event tracing/tests/event.rs:205\",\n#13 0.620     target: \"event\",\n#13 0.620     level: Level(\n#13 0.620         Info,\n#13 0.620     ),\n#13 0.620     module_path: \"event\",\n#13 0.620     location: tracing/tests/event.rs:205,\n#13 0.620     fields: {foo.bar, foo.baz},\n#13 0.620     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.620     kind: Kind(EVENT),\n#13 0.620 }\n#13 0.620 [dotted_field_name] enabled -> true\n#13 0.620 [dotted_field_name] event: event tracing/tests/event.rs:205;\n#13 0.620 ok\n#13 0.620 test event_with_message ... [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:205\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:205,\n#13 0.621     fields: {foo.bar, foo.baz},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:205\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:205,\n#13 0.621     fields: {foo.bar, foo.baz},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:289\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:289,\n#13 0.621     fields: {my_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:289\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:289,\n#13 0.621     fields: {my_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:309\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:309,\n#13 0.621     fields: {my_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:309\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:309,\n#13 0.621     fields: {my_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:596\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:596,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:596\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:596,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:589\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:589,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:589\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:589,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:579\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:579,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:579\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:579,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:571\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:571,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:571\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:571,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:563\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:563,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:563\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:563,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:557\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:557,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:557\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:557,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:548\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:548,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:548\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:548,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:541\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:541,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:541\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:541,\n#13 0.621     fields: {message, foo, constant string, foo.bar},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:330\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:330,\n#13 0.621     fields: {display_field, debug_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:330\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:330,\n#13 0.621     fields: {display_field, debug_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:227\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:227,\n#13 0.621     fields: {foo},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:227\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Info,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:227,\n#13 0.621     fields: {foo},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"fake\",\n#13 0.621     target: \"tracing_mock::field\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"tracing_mock::field\",\n#13 0.621     location: tracing-mock/src/field.rs:610,\n#13 0.621     fields: {fake_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"fake\",\n#13 0.621     target: \"tracing_mock::field\",\n#13 0.621     level: Level(\n#13 0.621         Trace,\n#13 0.621     ),\n#13 0.621     module_path: \"tracing_mock::field\",\n#13 0.621     location: tracing-mock/src/field.rs:610,\n#13 0.621     fields: {fake_field},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled -> true\n#13 0.621 [event_with_message] register_callsite: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:72\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Debug,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:72,\n#13 0.621     fields: {message},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.621 [event_with_message] enabled: Metadata {\n#13 0.621     name: \"event tracing/tests/event.rs:72\",\n#13 0.621     target: \"event\",\n#13 0.621     level: Level(\n#13 0.621         Debug,\n#13 0.621     ),\n#13 0.621     module_path: \"event\",\n#13 0.621     location: tracing/tests/event.rs:72,\n#13 0.621     fields: {message},\n#13 0.621     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.621     kind: Kind(EVENT),\n#13 0.621 }\n#13 0.622 [event_with_message] enabled -> true\n#13 0.622 [event_with_message] event: event tracing/tests/event.rs:72;\n#13 0.622 ok\n#13 0.622 test event_without_message ... [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:72\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Debug,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:72,\n#13 0.622     fields: {message},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:72\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Debug,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:72,\n#13 0.622     fields: {message},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:205\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:205,\n#13 0.622     fields: {foo.bar, foo.baz},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:205\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:205,\n#13 0.622     fields: {foo.bar, foo.baz},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:289\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Trace,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:289,\n#13 0.622     fields: {my_field},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:289\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Trace,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:289,\n#13 0.622     fields: {my_field},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:309\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Trace,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:309,\n#13 0.622     fields: {my_field},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:309\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Trace,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:309,\n#13 0.622     fields: {my_field},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:596\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:596,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:596\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:596,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:589\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:589,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:589\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:589,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:579\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:579,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:579\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:579,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:571\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:571,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:571\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:571,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:563\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:563,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled: Metadata {\n#13 0.622     name: \"event tracing/tests/event.rs:563\",\n#13 0.622     target: \"event\",\n#13 0.622     level: Level(\n#13 0.622         Info,\n#13 0.622     ),\n#13 0.622     module_path: \"event\",\n#13 0.622     location: tracing/tests/event.rs:563,\n#13 0.622     fields: {message, foo, constant string, foo.bar},\n#13 0.622     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.622     kind: Kind(EVENT),\n#13 0.622 }\n#13 0.622 [event_without_message] enabled -> true\n#13 0.622 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:557\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:557,\n#13 0.623     fields: {message, foo, constant string, foo.bar},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:557\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:557,\n#13 0.623     fields: {message, foo, constant string, foo.bar},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:548\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:548,\n#13 0.623     fields: {message, foo, constant string, foo.bar},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:548\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:548,\n#13 0.623     fields: {message, foo, constant string, foo.bar},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:541\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:541,\n#13 0.623     fields: {message, foo, constant string, foo.bar},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:541\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:541,\n#13 0.623     fields: {message, foo, constant string, foo.bar},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:330\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Trace,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:330,\n#13 0.623     fields: {display_field, debug_field},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:330\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Trace,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:330,\n#13 0.623     fields: {display_field, debug_field},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:227\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:227,\n#13 0.623     fields: {foo},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:227\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:227,\n#13 0.623     fields: {foo},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"fake\",\n#13 0.623     target: \"tracing_mock::field\",\n#13 0.623     level: Level(\n#13 0.623         Trace,\n#13 0.623     ),\n#13 0.623     module_path: \"tracing_mock::field\",\n#13 0.623     location: tracing-mock/src/field.rs:610,\n#13 0.623     fields: {fake_field},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"fake\",\n#13 0.623     target: \"tracing_mock::field\",\n#13 0.623     level: Level(\n#13 0.623         Trace,\n#13 0.623     ),\n#13 0.623     module_path: \"tracing_mock::field\",\n#13 0.623     location: tracing-mock/src/field.rs:610,\n#13 0.623     fields: {fake_field},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:50\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:50,\n#13 0.623     fields: {answer, to_question},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:50\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:50,\n#13 0.623     fields: {answer, to_question},\n#13 0.623     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.623     kind: Kind(EVENT),\n#13 0.623 }\n#13 0.623 [event_without_message] enabled -> true\n#13 0.623 [event_without_message] event: event tracing/tests/event.rs:50;\n#13 0.623 ok\n#13 0.623 test explicit_child ... [explicit_child] register_callsite: Metadata {\n#13 0.623     name: \"event tracing/tests/event.rs:50\",\n#13 0.623     target: \"event\",\n#13 0.623     level: Level(\n#13 0.623         Info,\n#13 0.623     ),\n#13 0.623     module_path: \"event\",\n#13 0.623     location: tracing/tests/event.rs:50,\n#13 0.624     fields: {answer, to_question},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:50\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:50,\n#13 0.624     fields: {answer, to_question},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:72\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Debug,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:72,\n#13 0.624     fields: {message},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:72\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Debug,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:72,\n#13 0.624     fields: {message},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:205\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:205,\n#13 0.624     fields: {foo.bar, foo.baz},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:205\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:205,\n#13 0.624     fields: {foo.bar, foo.baz},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:289\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Trace,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:289,\n#13 0.624     fields: {my_field},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:289\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Trace,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:289,\n#13 0.624     fields: {my_field},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:309\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Trace,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:309,\n#13 0.624     fields: {my_field},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:309\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Trace,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:309,\n#13 0.624     fields: {my_field},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:596\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:596,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:596\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:596,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:589\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:589,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:589\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:589,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:579\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:579,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:579\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:579,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:571\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:571,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:571\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:571,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:563\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:563,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:563\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:563,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:557\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:557,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:557\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:557,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:548\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:548,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:548\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:548,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.624     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.624     kind: Kind(EVENT),\n#13 0.624 }\n#13 0.624 [explicit_child] enabled -> true\n#13 0.624 [explicit_child] register_callsite: Metadata {\n#13 0.624     name: \"event tracing/tests/event.rs:541\",\n#13 0.624     target: \"event\",\n#13 0.624     level: Level(\n#13 0.624         Info,\n#13 0.624     ),\n#13 0.624     module_path: \"event\",\n#13 0.624     location: tracing/tests/event.rs:541,\n#13 0.624     fields: {message, foo, constant string, foo.bar},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:541\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Info,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:541,\n#13 0.625     fields: {message, foo, constant string, foo.bar},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled -> true\n#13 0.625 [explicit_child] register_callsite: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:330\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:330,\n#13 0.625     fields: {display_field, debug_field},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:330\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:330,\n#13 0.625     fields: {display_field, debug_field},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled -> true\n#13 0.625 [explicit_child] register_callsite: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:227\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Info,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:227,\n#13 0.625     fields: {foo},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:227\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Info,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:227,\n#13 0.625     fields: {foo},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled -> true\n#13 0.625 [explicit_child] register_callsite: Metadata {\n#13 0.625     name: \"fake\",\n#13 0.625     target: \"tracing_mock::field\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"tracing_mock::field\",\n#13 0.625     location: tracing-mock/src/field.rs:610,\n#13 0.625     fields: {fake_field},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled: Metadata {\n#13 0.625     name: \"fake\",\n#13 0.625     target: \"tracing_mock::field\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"tracing_mock::field\",\n#13 0.625     location: tracing-mock/src/field.rs:610,\n#13 0.625     fields: {fake_field},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled -> true\n#13 0.625 [explicit_child] register_callsite: Metadata {\n#13 0.625     name: \"foo\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:346,\n#13 0.625     fields: {},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(SPAN),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled: Metadata {\n#13 0.625     name: \"foo\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:346,\n#13 0.625     fields: {},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(SPAN),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled -> true\n#13 0.625 [explicit_child] new_span: name=\"foo\"; target=\"event\"; id=Id(1);\n#13 0.625 [explicit_child] register_callsite: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:347\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:347,\n#13 0.625     fields: {message},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:347\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:347,\n#13 0.625     fields: {message},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child] enabled -> true\n#13 0.625 [explicit_child] event: event tracing/tests/event.rs:347;\n#13 0.625 [explicit_child] drop_span: foo; id=Id(1); refs=1;\n#13 0.625 ok\n#13 0.625 test explicit_child_at_levels ... [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:347\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:347,\n#13 0.625     fields: {message},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child_at_levels] enabled: Metadata {\n#13 0.625     name: \"event tracing/tests/event.rs:347\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.625     location: tracing/tests/event.rs:347,\n#13 0.625     fields: {message},\n#13 0.625     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.625     kind: Kind(EVENT),\n#13 0.625 }\n#13 0.625 [explicit_child_at_levels] enabled -> true\n#13 0.625 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.625     name: \"foo\",\n#13 0.625     target: \"event\",\n#13 0.625     level: Level(\n#13 0.625         Trace,\n#13 0.625     ),\n#13 0.625     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:346,\n#13 0.626     fields: {},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(SPAN),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"foo\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Trace,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:346,\n#13 0.626     fields: {},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(SPAN),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:50\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:50,\n#13 0.626     fields: {answer, to_question},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:50\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:50,\n#13 0.626     fields: {answer, to_question},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:72\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Debug,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:72,\n#13 0.626     fields: {message},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:72\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Debug,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:72,\n#13 0.626     fields: {message},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:205\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:205,\n#13 0.626     fields: {foo.bar, foo.baz},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:205\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:205,\n#13 0.626     fields: {foo.bar, foo.baz},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:289\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Trace,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:289,\n#13 0.626     fields: {my_field},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:289\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Trace,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:289,\n#13 0.626     fields: {my_field},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:309\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Trace,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:309,\n#13 0.626     fields: {my_field},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:309\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Trace,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:309,\n#13 0.626     fields: {my_field},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:596\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:596,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:596\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:596,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:589\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:589,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:589\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:589,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:579\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:579,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:579\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:579,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:571\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:571,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:571\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:571,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:563\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:563,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:563\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:563,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:557\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:557,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:557\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:557,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled -> true\n#13 0.626 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:548\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.626     ),\n#13 0.626     module_path: \"event\",\n#13 0.626     location: tracing/tests/event.rs:548,\n#13 0.626     fields: {message, foo, constant string, foo.bar},\n#13 0.626     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.626     kind: Kind(EVENT),\n#13 0.626 }\n#13 0.626 [explicit_child_at_levels] enabled: Metadata {\n#13 0.626     name: \"event tracing/tests/event.rs:548\",\n#13 0.626     target: \"event\",\n#13 0.626     level: Level(\n#13 0.626         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:548,\n#13 0.627     fields: {message, foo, constant string, foo.bar},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:541\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:541,\n#13 0.627     fields: {message, foo, constant string, foo.bar},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:541\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:541,\n#13 0.627     fields: {message, foo, constant string, foo.bar},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:330\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:330,\n#13 0.627     fields: {display_field, debug_field},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:330\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:330,\n#13 0.627     fields: {display_field, debug_field},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:227\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:227,\n#13 0.627     fields: {foo},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:227\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:227,\n#13 0.627     fields: {foo},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"fake\",\n#13 0.627     target: \"tracing_mock::field\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"tracing_mock::field\",\n#13 0.627     location: tracing-mock/src/field.rs:610,\n#13 0.627     fields: {fake_field},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"fake\",\n#13 0.627     target: \"tracing_mock::field\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"tracing_mock::field\",\n#13 0.627     location: tracing-mock/src/field.rs:610,\n#13 0.627     fields: {fake_field},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"foo\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:367,\n#13 0.627     fields: {},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(SPAN),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"foo\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:367,\n#13 0.627     fields: {},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(SPAN),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] new_span: name=\"foo\"; target=\"event\"; id=Id(1);\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:368\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:368,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:368\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Trace,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:368,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] event: event tracing/tests/event.rs:368;\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:369\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Debug,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:369,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:369\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Debug,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:369,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] event: event tracing/tests/event.rs:369;\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:370\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:370,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:370\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Info,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:370,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] event: event tracing/tests/event.rs:370;\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:371\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Warn,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:371,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:371\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Warn,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:371,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] event: event tracing/tests/event.rs:371;\n#13 0.627 [explicit_child_at_levels] register_callsite: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:372\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Error,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:372,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled: Metadata {\n#13 0.627     name: \"event tracing/tests/event.rs:372\",\n#13 0.627     target: \"event\",\n#13 0.627     level: Level(\n#13 0.627         Error,\n#13 0.627     ),\n#13 0.627     module_path: \"event\",\n#13 0.627     location: tracing/tests/event.rs:372,\n#13 0.627     fields: {message},\n#13 0.627     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.627     kind: Kind(EVENT),\n#13 0.627 }\n#13 0.627 [explicit_child_at_levels] enabled -> true\n#13 0.627 [explicit_child_at_levels] event: event tracing/tests/event.rs:372;\n#13 0.627 [explicit_child_at_levels] drop_span: foo; id=Id(1); refs=1;\n#13 0.628 ok\n#13 0.628 test keyword_ident_in_field_name ... [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:372\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Error,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:372,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:372\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Error,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:372,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:371\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Warn,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:371,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:371\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Warn,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:371,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:370\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Info,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:370,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:370\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Info,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:370,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:369\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Debug,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:369,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:369\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Debug,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:369,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:368\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:368,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:368\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:368,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"foo\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:367,\n#13 0.628     fields: {},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(SPAN),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"foo\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:367,\n#13 0.628     fields: {},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(SPAN),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:347\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:347,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:347\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:347,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"foo\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:346,\n#13 0.628     fields: {},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(SPAN),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"foo\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Trace,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:346,\n#13 0.628     fields: {},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(SPAN),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:50\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Info,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:50,\n#13 0.628     fields: {answer, to_question},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:50\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Info,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:50,\n#13 0.628     fields: {answer, to_question},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.628 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:72\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Debug,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:72,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.628     name: \"event tracing/tests/event.rs:72\",\n#13 0.628     target: \"event\",\n#13 0.628     level: Level(\n#13 0.628         Debug,\n#13 0.628     ),\n#13 0.628     module_path: \"event\",\n#13 0.628     location: tracing/tests/event.rs:72,\n#13 0.628     fields: {message},\n#13 0.628     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.628     kind: Kind(EVENT),\n#13 0.628 }\n#13 0.628 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:205\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:205,\n#13 0.629     fields: {foo.bar, foo.baz},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:205\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:205,\n#13 0.629     fields: {foo.bar, foo.baz},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:289\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:289,\n#13 0.629     fields: {my_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:289\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:289,\n#13 0.629     fields: {my_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:309\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:309,\n#13 0.629     fields: {my_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:309\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:309,\n#13 0.629     fields: {my_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:596\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:596,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:596\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:596,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:589\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:589,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:589\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:589,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:579\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:579,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:579\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:579,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:571\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:571,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:571\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:571,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:563\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:563,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:563\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:563,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:557\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:557,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:557\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:557,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:548\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:548,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:548\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:548,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:541\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:541,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:541\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:541,\n#13 0.629     fields: {message, foo, constant string, foo.bar},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:330\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:330,\n#13 0.629     fields: {display_field, debug_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:330\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:330,\n#13 0.629     fields: {display_field, debug_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:227\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:227,\n#13 0.629     fields: {foo},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"event tracing/tests/event.rs:227\",\n#13 0.629     target: \"event\",\n#13 0.629     level: Level(\n#13 0.629         Info,\n#13 0.629     ),\n#13 0.629     module_path: \"event\",\n#13 0.629     location: tracing/tests/event.rs:227,\n#13 0.629     fields: {foo},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled -> true\n#13 0.629 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.629     name: \"fake\",\n#13 0.629     target: \"tracing_mock::field\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"tracing_mock::field\",\n#13 0.629     location: tracing-mock/src/field.rs:610,\n#13 0.629     fields: {fake_field},\n#13 0.629     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.629     kind: Kind(EVENT),\n#13 0.629 }\n#13 0.629 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.629     name: \"fake\",\n#13 0.629     target: \"tracing_mock::field\",\n#13 0.629     level: Level(\n#13 0.629         Trace,\n#13 0.629     ),\n#13 0.629     module_path: \"tracing_mock::field\",\n#13 0.629     location: tracing-mock/src/field.rs:610,\n#13 0.629     fields: {fake_field},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [keyword_ident_in_field_name] enabled -> true\n#13 0.630 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:618\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Error,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:618,\n#13 0.630     fields: {message, crate},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [keyword_ident_in_field_name] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:618\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Error,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:618,\n#13 0.630     fields: {message, crate},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [keyword_ident_in_field_name] enabled -> true\n#13 0.630 [keyword_ident_in_field_name] event: event tracing/tests/event.rs:618;\n#13 0.630 ok\n#13 0.630 test message_without_delims ... [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:618\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Error,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:618,\n#13 0.630     fields: {message, crate},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:618\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Error,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:618,\n#13 0.630     fields: {message, crate},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled -> true\n#13 0.630 [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:372\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Error,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:372,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:372\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Error,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:372,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled -> true\n#13 0.630 [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:371\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Warn,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:371,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:371\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Warn,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:371,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled -> true\n#13 0.630 [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:370\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Info,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:370,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:370\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Info,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:370,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled -> true\n#13 0.630 [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:369\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Debug,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:369,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:369\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Debug,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:369,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled -> true\n#13 0.630 [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:368\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Trace,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:368,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled: Metadata {\n#13 0.630     name: \"event tracing/tests/event.rs:368\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Trace,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:368,\n#13 0.630     fields: {message},\n#13 0.630     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.630     kind: Kind(EVENT),\n#13 0.630 }\n#13 0.630 [message_without_delims] enabled -> true\n#13 0.630 [message_without_delims] register_callsite: Metadata {\n#13 0.630     name: \"foo\",\n#13 0.630     target: \"event\",\n#13 0.630     level: Level(\n#13 0.630         Trace,\n#13 0.630     ),\n#13 0.630     module_path: \"event\",\n#13 0.630     location: tracing/tests/event.rs:367,\n#13 0.630     fields: {},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(SPAN),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"foo\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:367,\n#13 0.631     fields: {},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(SPAN),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:347\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:347,\n#13 0.631     fields: {message},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:347\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:347,\n#13 0.631     fields: {message},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"foo\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:346,\n#13 0.631     fields: {},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(SPAN),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"foo\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:346,\n#13 0.631     fields: {},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(SPAN),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:50\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:50,\n#13 0.631     fields: {answer, to_question},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:50\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:50,\n#13 0.631     fields: {answer, to_question},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:72\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Debug,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:72,\n#13 0.631     fields: {message},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:72\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Debug,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:72,\n#13 0.631     fields: {message},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:205\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:205,\n#13 0.631     fields: {foo.bar, foo.baz},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:205\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:205,\n#13 0.631     fields: {foo.bar, foo.baz},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:289\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:289,\n#13 0.631     fields: {my_field},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:289\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:289,\n#13 0.631     fields: {my_field},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:309\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:309,\n#13 0.631     fields: {my_field},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:309\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Trace,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:309,\n#13 0.631     fields: {my_field},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:596\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:596,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:596\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:596,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:589\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:589,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:589\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:589,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:579\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:579,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:579\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:579,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:571\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:571,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:571\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:571,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.631     kind: Kind(EVENT),\n#13 0.631 }\n#13 0.631 [message_without_delims] enabled -> true\n#13 0.631 [message_without_delims] register_callsite: Metadata {\n#13 0.631     name: \"event tracing/tests/event.rs:563\",\n#13 0.631     target: \"event\",\n#13 0.631     level: Level(\n#13 0.631         Info,\n#13 0.631     ),\n#13 0.631     module_path: \"event\",\n#13 0.631     location: tracing/tests/event.rs:563,\n#13 0.631     fields: {message, foo, constant string, foo.bar},\n#13 0.631     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:563\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:563,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:557\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:557,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:557\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:557,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:548\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:548,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:548\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:548,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:541\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:541,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:541\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:541,\n#13 0.632     fields: {message, foo, constant string, foo.bar},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:330\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Trace,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:330,\n#13 0.632     fields: {display_field, debug_field},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:330\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Trace,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:330,\n#13 0.632     fields: {display_field, debug_field},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:227\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:227,\n#13 0.632     fields: {foo},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:227\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Info,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:227,\n#13 0.632     fields: {foo},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"fake\",\n#13 0.632     target: \"tracing_mock::field\",\n#13 0.632     level: Level(\n#13 0.632         Trace,\n#13 0.632     ),\n#13 0.632     module_path: \"tracing_mock::field\",\n#13 0.632     location: tracing-mock/src/field.rs:610,\n#13 0.632     fields: {fake_field},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"fake\",\n#13 0.632     target: \"tracing_mock::field\",\n#13 0.632     level: Level(\n#13 0.632         Trace,\n#13 0.632     ),\n#13 0.632     module_path: \"tracing_mock::field\",\n#13 0.632     location: tracing-mock/src/field.rs:610,\n#13 0.632     fields: {fake_field},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:101\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Debug,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:101,\n#13 0.632     fields: {message, answer, question},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548070, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:101\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Debug,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:101,\n#13 0.632     fields: {message, answer, question},\n#13 0.632     callsite: Identifier(Pointer { addr: 0x55e5f4548070, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.632     kind: Kind(EVENT),\n#13 0.632 }\n#13 0.632 [message_without_delims] enabled -> true\n#13 0.632 [message_without_delims] event: event tracing/tests/event.rs:101;\n#13 0.632 ok\n#13 0.632 test move_field_out_of_struct ... [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.632     name: \"event tracing/tests/event.rs:101\",\n#13 0.632     target: \"event\",\n#13 0.632     level: Level(\n#13 0.632         Debug,\n#13 0.632     ),\n#13 0.632     module_path: \"event\",\n#13 0.632     location: tracing/tests/event.rs:101,\n#13 0.633     fields: {message, answer, question},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548070, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:101\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Debug,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:101,\n#13 0.633     fields: {message, answer, question},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548070, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:618\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Error,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:618,\n#13 0.633     fields: {message, crate},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:618\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Error,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:618,\n#13 0.633     fields: {message, crate},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:372\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Error,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:372,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:372\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Error,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:372,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:371\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Warn,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:371,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:371\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Warn,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:371,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:370\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Info,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:370,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:370\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Info,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:370,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:369\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Debug,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:369,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:369\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Debug,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:369,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:368\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:368,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:368\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:368,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"foo\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:367,\n#13 0.633     fields: {},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(SPAN),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"foo\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:367,\n#13 0.633     fields: {},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(SPAN),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:347\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:347,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:347\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:347,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"foo\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:346,\n#13 0.633     fields: {},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(SPAN),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"foo\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Trace,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:346,\n#13 0.633     fields: {},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(SPAN),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:50\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Info,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:50,\n#13 0.633     fields: {answer, to_question},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:50\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Info,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:50,\n#13 0.633     fields: {answer, to_question},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:72\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Debug,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:72,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:72\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Debug,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.633     location: tracing/tests/event.rs:72,\n#13 0.633     fields: {message},\n#13 0.633     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.633     kind: Kind(EVENT),\n#13 0.633 }\n#13 0.633 [move_field_out_of_struct] enabled -> true\n#13 0.633 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.633     name: \"event tracing/tests/event.rs:205\",\n#13 0.633     target: \"event\",\n#13 0.633     level: Level(\n#13 0.633         Info,\n#13 0.633     ),\n#13 0.633     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:205,\n#13 0.634     fields: {foo.bar, foo.baz},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:205\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:205,\n#13 0.634     fields: {foo.bar, foo.baz},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:289\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Trace,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:289,\n#13 0.634     fields: {my_field},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:289\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Trace,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:289,\n#13 0.634     fields: {my_field},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:309\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Trace,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:309,\n#13 0.634     fields: {my_field},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:309\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Trace,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:309,\n#13 0.634     fields: {my_field},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:596\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:596,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:596\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:596,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:589\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:589,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:589\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:589,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:579\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:579,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:579\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:579,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:571\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:571,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:571\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:571,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:563\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:563,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:563\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:563,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:557\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:557,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:557\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:557,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:548\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:548,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:548\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:548,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:541\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:541,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:541\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:541,\n#13 0.634     fields: {message, foo, constant string, foo.bar},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:330\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Trace,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:330,\n#13 0.634     fields: {display_field, debug_field},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:330\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Trace,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:330,\n#13 0.634     fields: {display_field, debug_field},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled -> true\n#13 0.634 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:227\",\n#13 0.634     target: \"event\",\n#13 0.634     level: Level(\n#13 0.634         Info,\n#13 0.634     ),\n#13 0.634     module_path: \"event\",\n#13 0.634     location: tracing/tests/event.rs:227,\n#13 0.634     fields: {foo},\n#13 0.634     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.634     kind: Kind(EVENT),\n#13 0.634 }\n#13 0.634 [move_field_out_of_struct] enabled: Metadata {\n#13 0.634     name: \"event tracing/tests/event.rs:227\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Info,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:227,\n#13 0.635     fields: {foo},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled -> true\n#13 0.635 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.635     name: \"fake\",\n#13 0.635     target: \"tracing_mock::field\",\n#13 0.635     level: Level(\n#13 0.635         Trace,\n#13 0.635     ),\n#13 0.635     module_path: \"tracing_mock::field\",\n#13 0.635     location: tracing-mock/src/field.rs:610,\n#13 0.635     fields: {fake_field},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled: Metadata {\n#13 0.635     name: \"fake\",\n#13 0.635     target: \"tracing_mock::field\",\n#13 0.635     level: Level(\n#13 0.635         Trace,\n#13 0.635     ),\n#13 0.635     module_path: \"tracing_mock::field\",\n#13 0.635     location: tracing-mock/src/field.rs:610,\n#13 0.635     fields: {fake_field},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled -> true\n#13 0.635 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:269\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:269,\n#13 0.635     fields: {x, y},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548388, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:269\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:269,\n#13 0.635     fields: {x, y},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548388, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled -> true\n#13 0.635 [move_field_out_of_struct] event: event tracing/tests/event.rs:269;\n#13 0.635 [move_field_out_of_struct] register_callsite: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:270\",\n#13 0.635     target: \"app_events\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:270,\n#13 0.635     fields: {message, position},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548370, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:270\",\n#13 0.635     target: \"app_events\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:270,\n#13 0.635     fields: {message, position},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548370, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [move_field_out_of_struct] enabled -> true\n#13 0.635 [move_field_out_of_struct] event: event tracing/tests/event.rs:270;\n#13 0.635 ok\n#13 0.635 test moved_field ... [moved_field] register_callsite: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:270\",\n#13 0.635     target: \"app_events\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:270,\n#13 0.635     fields: {message, position},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548370, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:270\",\n#13 0.635     target: \"app_events\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:270,\n#13 0.635     fields: {message, position},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548370, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled -> true\n#13 0.635 [moved_field] register_callsite: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:269\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:269,\n#13 0.635     fields: {x, y},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548388, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:269\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:269,\n#13 0.635     fields: {x, y},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548388, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled -> true\n#13 0.635 [moved_field] register_callsite: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:101\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:101,\n#13 0.635     fields: {message, answer, question},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548070, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:101\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Debug,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:101,\n#13 0.635     fields: {message, answer, question},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548070, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled -> true\n#13 0.635 [moved_field] register_callsite: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:618\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Error,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.635     location: tracing/tests/event.rs:618,\n#13 0.635     fields: {message, crate},\n#13 0.635     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.635     kind: Kind(EVENT),\n#13 0.635 }\n#13 0.635 [moved_field] enabled: Metadata {\n#13 0.635     name: \"event tracing/tests/event.rs:618\",\n#13 0.635     target: \"event\",\n#13 0.635     level: Level(\n#13 0.635         Error,\n#13 0.635     ),\n#13 0.635     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:618,\n#13 0.636     fields: {message, crate},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548340, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:372\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Error,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:372,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:372\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Error,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:372,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481f0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:371\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Warn,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:371,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:371\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Warn,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:371,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481d8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:370\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:370,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:370\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:370,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481c0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:369\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Debug,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:369,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:369\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Debug,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:369,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45481a8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:368\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:368,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:368\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:368,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548190, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"foo\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:367,\n#13 0.636     fields: {},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(SPAN),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"foo\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:367,\n#13 0.636     fields: {},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548178, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(SPAN),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:347\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:347,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:347\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:347,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548160, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"foo\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:346,\n#13 0.636     fields: {},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(SPAN),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"foo\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:346,\n#13 0.636     fields: {},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548148, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(SPAN),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:50\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:50,\n#13 0.636     fields: {answer, to_question},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:50\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:50,\n#13 0.636     fields: {answer, to_question},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548010, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:72\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Debug,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:72,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:72\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Debug,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:72,\n#13 0.636     fields: {message},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548058, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:205\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:205,\n#13 0.636     fields: {foo.bar, foo.baz},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:205\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:205,\n#13 0.636     fields: {foo.bar, foo.baz},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f45480d0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:289\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:289,\n#13 0.636     fields: {my_field},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:289\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:289,\n#13 0.636     fields: {my_field},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548100, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:309\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:309,\n#13 0.636     fields: {my_field},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:309\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Trace,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:309,\n#13 0.636     fields: {my_field},\n#13 0.636     callsite: Identifier(Pointer { addr: 0x55e5f4548118, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.636     kind: Kind(EVENT),\n#13 0.636 }\n#13 0.636 [moved_field] enabled -> true\n#13 0.636 [moved_field] register_callsite: Metadata {\n#13 0.636     name: \"event tracing/tests/event.rs:596\",\n#13 0.636     target: \"event\",\n#13 0.636     level: Level(\n#13 0.636         Info,\n#13 0.636     ),\n#13 0.636     module_path: \"event\",\n#13 0.636     location: tracing/tests/event.rs:596,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:596\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:596,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548328, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:589\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:589,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:589\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:589,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548310, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:579\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:579,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:579\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:579,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482f8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:571\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:571,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:571\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:571,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482e0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:563\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:563,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:563\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:563,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482c8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:557\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:557,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:557\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:557,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45482b0, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:548\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:548,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:548\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:548,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548298, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:541\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:541,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:541\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:541,\n#13 0.637     fields: {message, foo, constant string, foo.bar},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548280, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:330\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Trace,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:330,\n#13 0.637     fields: {display_field, debug_field},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:330\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Trace,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:330,\n#13 0.637     fields: {display_field, debug_field},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f4548130, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:227\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:227,\n#13 0.637     fields: {foo},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:227\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:227,\n#13 0.637     fields: {foo},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45480e8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"fake\",\n#13 0.637     target: \"tracing_mock::field\",\n#13 0.637     level: Level(\n#13 0.637         Trace,\n#13 0.637     ),\n#13 0.637     module_path: \"tracing_mock::field\",\n#13 0.637     location: tracing-mock/src/field.rs:610,\n#13 0.637     fields: {fake_field},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"fake\",\n#13 0.637     target: \"tracing_mock::field\",\n#13 0.637     level: Level(\n#13 0.637         Trace,\n#13 0.637     ),\n#13 0.637     module_path: \"tracing_mock::field\",\n#13 0.637     location: tracing-mock/src/field.rs:610,\n#13 0.637     fields: {fake_field},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45483a0, metadata: DynMetadata(0x55e5f4540578) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] register_callsite: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:184\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:184,\n#13 0.637     fields: {foo},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45480b8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled: Metadata {\n#13 0.637     name: \"event tracing/tests/event.rs:184\",\n#13 0.637     target: \"event\",\n#13 0.637     level: Level(\n#13 0.637         Info,\n#13 0.637     ),\n#13 0.637     module_path: \"event\",\n#13 0.637     location: tracing/tests/event.rs:184,\n#13 0.637     fields: {foo},\n#13 0.637     callsite: Identifier(Pointer { addr: 0x55e5f45480b8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.637     kind: Kind(EVENT),\n#13 0.637 }\n#13 0.637 [moved_field] enabled -> true\n#13 0.637 [moved_field] event: event tracing/tests/event.rs:184;\n#13 0.638 ok\n#13 0.638 test nonzeroi32_event_without_message ... [nonzeroi32_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55e5f45480b8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:184\",\n#13 0.638     target: \"event\",\n#13 0.638     level: Level(\n#13 0.638         Info,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:184,\n#13 0.638     fields: {foo},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55e5f45480b8, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled -> true\n#13 0.638 [nonzeroi32_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55e5f4548370, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:270\",\n#13 0.638     target: \"app_events\",\n#13 0.638     level: Level(\n#13 0.638         Debug,\n#13 0.638     ),\n#13 0.638     module_path: \"event\",\n#13 0.638     location: tracing/tests/event.rs:270,\n#13 0.638     fields: {message, position},\n#13 0.638     callsite: Identifier(Pointer { addr: 0x55e5f4548370, metadata: DynMetadata(0x55e5f4536928) }),\n#13 0.638     kind: Kind(EVENT),\n#13 0.638 }\n#13 0.638 [nonzeroi32_event_without_message] enabled -> true\n#13 0.638 [nonzeroi32_event_without_message] register_callsite: Metadata {\n#13 0.638     name: \"event tracing/tests/event.rs:\n#13 0.638 [output clipped, log limit 200KiB/s reached]\n#13 0.666      Running tests/filter_caching_is_lexically_scoped.rs (target/debug/deps/filter_caching_is_lexically_scoped-65dd074a99eb7869)\n#13 0.669      Running tests/filters_are_not_reevaluated_for_the_same_span.rs (target/debug/deps/filters_are_not_reevaluated_for_the_same_span-1d6c2b861dde1240)\n#13 0.671      Running tests/filters_are_reevaluated_for_different_call_sites.rs (target/debug/deps/filters_are_reevaluated_for_different_call_sites-9ac8aebe3f9244c1)\n#13 0.674      Running tests/filters_dont_leak.rs (target/debug/deps/filters_dont_leak-43845863a931490a)\n#13 0.678      Running tests/future_send.rs (target/debug/deps/future_send-ddb3974ef07e6d23)\n#13 0.680      Running tests/instrument.rs (target/debug/deps/instrument-a47ea8b4babde974)\n#13 0.683      Running tests/macro_imports.rs (target/debug/deps/macro_imports-fe02506a9810858b)\n#13 0.685      Running tests/macros.rs (target/debug/deps/macros-aecdd04cdc164e4e)\n#13 0.696      Running tests/macros_incompatible_concat.rs (target/debug/deps/macros_incompatible_concat-1cc000af0d6a1885)\n#13 0.698      Running tests/max_level_hint.rs (target/debug/deps/max_level_hint-cf6ffdbe63eb678b)\n#13 0.701 [tracing/tests/max_level_hint.rs:18:17] meta = Metadata {\n#13 0.701     name: \"event tracing/tests/max_level_hint.rs:31\",\n#13 0.701     target: \"max_level_hint\",\n#13 0.701     level: Level(\n#13 0.701         Info,\n#13 0.701     ),\n#13 0.701     module_path: \"max_level_hint\",\n#13 0.701     location: tracing/tests/max_level_hint.rs:31,\n#13 0.701     fields: {message},\n#13 0.701     callsite: Identifier(Pointer { addr: 0x55b0d0f9c010, metadata: DynMetadata(0x55b0d0f8c4d8) }),\n#13 0.701     kind: Kind(EVENT),\n#13 0.701 }\n#13 0.701 [tracing/tests/max_level_hint.rs:18:17] meta = Metadata {\n#13 0.701     name: \"event tracing/tests/max_level_hint.rs:33\",\n#13 0.701     target: \"max_level_hint\",\n#13 0.701     level: Level(\n#13 0.701         Warn,\n#13 0.701     ),\n#13 0.701     module_path: \"max_level_hint\",\n#13 0.701     location: tracing/tests/max_level_hint.rs:33,\n#13 0.701     fields: {message},\n#13 0.701     callsite: Identifier(Pointer { addr: 0x55b0d0f9c040, metadata: DynMetadata(0x55b0d0f8c4d8) }),\n#13 0.701     kind: Kind(EVENT),\n#13 0.701 }\n#13 0.701 [tracing/tests/max_level_hint.rs:18:17] meta = Metadata {\n#13 0.701     name: \"event tracing/tests/max_level_hint.rs:35\",\n#13 0.701     target: \"max_level_hint\",\n#13 0.701     level: Level(\n#13 0.701         Error,\n#13 0.701     ),\n#13 0.701     module_path: \"max_level_hint\",\n#13 0.701     location: tracing/tests/max_level_hint.rs:35,\n#13 0.701     fields: {message},\n#13 0.701     callsite: Identifier(Pointer { addr: 0x55b0d0f9c070, metadata: DynMetadata(0x55b0d0f8c4d8) }),\n#13 0.701     kind: Kind(EVENT),\n#13 0.701 }\n#13 0.702      Running tests/missed_register_callsite.rs (target/debug/deps/missed_register_callsite-c4147fc0b4079d89)\n#13 0.805      Running tests/multiple_max_level_hints.rs (target/debug/deps/multiple_max_level_hints-f7f9739cbfc36991)\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.807     Info,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.807     Warn,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.807     Error,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.807     Error,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:47:25] meta.level() = Level(\n#13 0.807     Error,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.807     Warn,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:47:25] meta.level() = Level(\n#13 0.807     Warn,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.807     Info,\n#13 0.807 )\n#13 0.807 [tracing/tests/multiple_max_level_hints.rs:47:25] meta.level() = Level(\n#13 0.807     Info,\n#13 0.807 )\n#13 0.808 [tracing/tests/multiple_max_level_hints.rs:31:25] meta.level() = Level(\n#13 0.808     Debug,\n#13 0.808 )\n#13 0.808 [tracing/tests/multiple_max_level_hints.rs:47:25] meta.level() = Level(\n#13 0.808     Debug,\n#13 0.808 )\n#13 0.808 [tracing/tests/multiple_max_level_hints.rs:47:25] meta.level() = Level(\n#13 0.808     Debug,\n#13 0.808 )\n#13 0.808      Running tests/no_subscriber.rs (target/debug/deps/no_subscriber-a50c92f97cb7f7f4)\n#13 0.811      Running tests/register_callsite_deadlock.rs (target/debug/deps/register_callsite_deadlock-42a0812960255d8b)\n#13 0.814      Running tests/scoped_clobbers_default.rs (target/debug/deps/scoped_clobbers_default-b187719e730ed561)\n#13 0.817      Running tests/span.rs (target/debug/deps/span-a7cfe38cc7bfb8c7)\n#13 0.920      Running tests/subscriber.rs (target/debug/deps/subscriber-a5a3ff6315fec54c)\n#13 0.924      Running unittests src/lib.rs (target/debug/deps/tracing_appender-04368258e11243ac)\n#13 8.052 dir=ReadDir(\"/tmp/.tmpUma6TC\")\n#13 8.052 entry=Ok(DirEntry(\"/tmp/.tmpUma6TC/test_max_log_files.2020-02-01-11\"))\n#13 8.052 path=/tmp/.tmpUma6TC/test_max_log_files.2020-02-01-11\n#13 8.052 file=\"file 2\\nfile 2\\n\"\n#13 8.052 entry=Ok(DirEntry(\"/tmp/.tmpUma6TC/test_max_log_files.2020-02-01-12\"))\n#13 8.052 path=/tmp/.tmpUma6TC/test_max_log_files.2020-02-01-12\n#13 8.052 file=\"file 3\\nfile 3\\n\"\n#13 8.053 ok\n#13 8.053 test rolling::test::test_never_date_rounding - should panic ... \n#13 8.053 thread 'rolling::test::test_never_date_rounding' panicked at tracing-appender/src/rolling.rs:551:17:\n#13 8.053 internal error: entered unreachable code: Rotation::NEVER is impossible to round.\n#13 8.053 stack backtrace:\n#13 8.082    0: __rustc::rust_begin_unwind\n#13 8.082              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 8.082    1: core::panicking::panic_fmt\n#13 8.082              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 8.082    2: core::panicking::unreachable_display\n#13 8.082              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:248:5\n#13 8.082    3: tracing_appender::rolling::Rotation::round_date\n#13 8.082              at ./src/rolling.rs:551:17\n#13 8.082    4: tracing_appender::rolling::test::test_never_date_rounding\n#13 8.082              at ./src/rolling.rs:957:33\n#13 8.082    5: tracing_appender::rolling::test::test_never_date_rounding::{{closure}}\n#13 8.082              at ./src/rolling.rs:955:34\n#13 8.083    6: core::ops::function::FnOnce::call_once\n#13 8.083              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 8.085    7: core::ops::function::FnOnce::call_once\n#13 8.085              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 8.086 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 8.087 ok\n#13 8.087 test rolling::test::test_path_concatenation ... ok\n#13 8.089 test rolling::test::test_rotations ... ok\n#13 8.089 test rolling::test::write_daily_log ... path=/tmp/.tmpo4znDo/daily.log.2025-08-31\n#13 8.089 file=\"Hello\"\n#13 8.090 ok\n#13 8.090 test rolling::test::write_hourly_log ... path=/tmp/.tmpvgEMn8/hourly.log.2025-08-31-16\n#13 8.090 file=\"Hello\"\n#13 8.090 ok\n#13 8.090 test rolling::test::write_minutely_log ... path=/tmp/.tmpQwmIHB/minutely.log.2025-08-31-16-02\n#13 8.091 file=\"Hello\"\n#13 8.091 ok\n#13 8.091 test rolling::test::write_never_log ... path=/tmp/.tmpCFLDtz/never.log\n#13 8.092 file=\"Hello\"\n#13 8.092 ok\n#13 8.092 test rolling::test::write_weekly_log ... path=/tmp/.tmpHxwvLw/weekly.log.2025-08-31\n#13 8.092 file=\"Hello\"\n#13 8.093 ok\n#13 8.093 \n#13 8.093 test result: ok. 13 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in 7.17s\n#13 8.093 \n#13 8.097      Running unittests src/lib.rs (target/debug/deps/tracing_attributes-77bfca6ff021554e)\n#13 8.099 \n#13 8.099 running 0 tests\n#13 8.099 \n#13 8.099 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 8.099 \n#13 8.099      Running tests/async_fn.rs (target/debug/deps/async_fn-7f67cbcf7ef6c2b0)\n#13 8.101 \n#13 8.101 running 8 tests\n#13 8.101 test async_fn_nested ... [async_fn_nested] register_callsite: Metadata {\n#13 8.101     name: \"fake\",\n#13 8.101     target: \"tracing_mock::field\",\n#13 8.101     level: Level(\n#13 8.101         Trace,\n#13 8.101     ),\n#13 8.101     module_path: \"tracing_mock::field\",\n#13 8.101     location: tracing-mock/src/field.rs:610,\n#13 8.101     fields: {fake_field},\n#13 8.101     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.101     kind: Kind(EVENT),\n#13 8.101 }\n#13 8.101 [async_fn_nested] enabled: Metadata {\n#13 8.101     name: \"fake\",\n#13 8.101     target: \"tracing_mock::field\",\n#13 8.101     level: Level(\n#13 8.101         Trace,\n#13 8.101     ),\n#13 8.101     module_path: \"tracing_mock::field\",\n#13 8.101     location: tracing-mock/src/field.rs:610,\n#13 8.101     fields: {fake_field},\n#13 8.101     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.101     kind: Kind(EVENT),\n#13 8.101 }\n#13 8.101 [async_fn_nested] enabled -> true\n#13 8.101 [async_fn_nested] register_callsite: Metadata {\n#13 8.101     name: \"test_async_fns_nested\",\n#13 8.101     target: \"async_fn\",\n#13 8.101     level: Level(\n#13 8.101         Info,\n#13 8.101     ),\n#13 8.101     module_path: \"async_fn\",\n#13 8.101     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.101     fields: {},\n#13 8.101     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.101     kind: Kind(SPAN),\n#13 8.101 }\n#13 8.101 [async_fn_nested] enabled: Metadata {\n#13 8.101     name: \"test_async_fns_nested\",\n#13 8.101     target: \"async_fn\",\n#13 8.101     level: Level(\n#13 8.101         Info,\n#13 8.101     ),\n#13 8.101     module_path: \"async_fn\",\n#13 8.101     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.101     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_nested] enabled -> true\n#13 8.102 [async_fn_nested] new_span: name=\"test_async_fns_nested\"; target=\"async_fn\"; id=Id(1);\n#13 8.102 [async_fn_nested] enter: test_async_fns_nested; id=Id(1);\n#13 8.102 [async_fn_nested] register_callsite: Metadata {\n#13 8.102     name: \"test_async_fns_nested_other\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.102     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_nested] enabled: Metadata {\n#13 8.102     name: \"test_async_fns_nested_other\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.102     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_nested] enabled -> true\n#13 8.102 [async_fn_nested] new_span: name=\"test_async_fns_nested_other\"; target=\"async_fn\"; id=Id(2);\n#13 8.102 [async_fn_nested] enter: test_async_fns_nested_other; id=Id(2);\n#13 8.102 [async_fn_nested] register_callsite: Metadata {\n#13 8.102     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Trace,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.102     fields: {nested},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(EVENT),\n#13 8.102 }\n#13 8.102 [async_fn_nested] enabled: Metadata {\n#13 8.102     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Trace,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.102     fields: {nested},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(EVENT),\n#13 8.102 }\n#13 8.102 [async_fn_nested] enabled -> true\n#13 8.102 [async_fn_nested] event: event tracing-attributes/tests/async_fn.rs:121;\n#13 8.102 [async_fn_nested] exit: test_async_fns_nested_other; id=Id(2);\n#13 8.102 [async_fn_nested] enter: test_async_fns_nested_other; id=Id(2);\n#13 8.102 [async_fn_nested] exit: test_async_fns_nested_other; id=Id(2);\n#13 8.102 [async_fn_nested] drop_span: test_async_fns_nested_other; id=Id(2); refs=1;\n#13 8.102 [async_fn_nested] exit: test_async_fns_nested; id=Id(1);\n#13 8.102 [async_fn_nested] enter: test_async_fns_nested; id=Id(1);\n#13 8.102 [async_fn_nested] exit: test_async_fns_nested; id=Id(1);\n#13 8.102 [async_fn_nested] drop_span: test_async_fns_nested; id=Id(1); refs=1;\n#13 8.102 ok\n#13 8.102 test async_fn_only_enters_for_polls ... [async_fn_only_enters_for_polls] register_callsite: Metadata {\n#13 8.102     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Trace,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.102     fields: {nested},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(EVENT),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled: Metadata {\n#13 8.102     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Trace,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.102     fields: {nested},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(EVENT),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled -> true\n#13 8.102 [async_fn_only_enters_for_polls] register_callsite: Metadata {\n#13 8.102     name: \"test_async_fns_nested_other\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.102     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled: Metadata {\n#13 8.102     name: \"test_async_fns_nested_other\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.102     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled -> true\n#13 8.102 [async_fn_only_enters_for_polls] register_callsite: Metadata {\n#13 8.102     name: \"test_async_fns_nested\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.102     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled: Metadata {\n#13 8.102     name: \"test_async_fns_nested\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.102     fields: {},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled -> true\n#13 8.102 [async_fn_only_enters_for_polls] register_callsite: Metadata {\n#13 8.102     name: \"fake\",\n#13 8.102     target: \"tracing_mock::field\",\n#13 8.102     level: Level(\n#13 8.102         Trace,\n#13 8.102     ),\n#13 8.102     module_path: \"tracing_mock::field\",\n#13 8.102     location: tracing-mock/src/field.rs:610,\n#13 8.102     fields: {fake_field},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.102     kind: Kind(EVENT),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled: Metadata {\n#13 8.102     name: \"fake\",\n#13 8.102     target: \"tracing_mock::field\",\n#13 8.102     level: Level(\n#13 8.102         Trace,\n#13 8.102     ),\n#13 8.102     module_path: \"tracing_mock::field\",\n#13 8.102     location: tracing-mock/src/field.rs:610,\n#13 8.102     fields: {fake_field},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.102     kind: Kind(EVENT),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled -> true\n#13 8.102 [async_fn_only_enters_for_polls] register_callsite: Metadata {\n#13 8.102     name: \"test_async_fn\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.102     fields: {polls},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled: Metadata {\n#13 8.102     name: \"test_async_fn\",\n#13 8.102     target: \"async_fn\",\n#13 8.102     level: Level(\n#13 8.102         Info,\n#13 8.102     ),\n#13 8.102     module_path: \"async_fn\",\n#13 8.102     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.102     fields: {polls},\n#13 8.102     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.102     kind: Kind(SPAN),\n#13 8.102 }\n#13 8.102 [async_fn_only_enters_for_polls] enabled -> true\n#13 8.102 [async_fn_only_enters_for_polls] new_span: name=\"test_async_fn\"; target=\"async_fn\"; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] enter: test_async_fn; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] register_callsite: Metadata {\n#13 8.103     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.103     fields: {awaiting},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_only_enters_for_polls] enabled: Metadata {\n#13 8.103     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.103     fields: {awaiting},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_only_enters_for_polls] enabled -> true\n#13 8.103 [async_fn_only_enters_for_polls] event: event tracing-attributes/tests/async_fn.rs:12;\n#13 8.103 [async_fn_only_enters_for_polls] exit: test_async_fn; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] enter: test_async_fn; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] exit: test_async_fn; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] enter: test_async_fn; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] exit: test_async_fn; id=Id(1);\n#13 8.103 [async_fn_only_enters_for_polls] drop_span: test_async_fn; id=Id(1); refs=1;\n#13 8.103 ok\n#13 8.103 test async_fn_with_async_trait ... [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.103     fields: {awaiting},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.103     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.103     fields: {awaiting},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled -> true\n#13 8.103 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"test_async_fn\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.103     fields: {polls},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(SPAN),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.103     name: \"test_async_fn\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.103     fields: {polls},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(SPAN),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled -> true\n#13 8.103 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.103     fields: {nested},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.103     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.103     fields: {nested},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled -> true\n#13 8.103 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"test_async_fns_nested_other\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.103     fields: {},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(SPAN),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.103     name: \"test_async_fns_nested_other\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.103     fields: {},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(SPAN),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled -> true\n#13 8.103 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"test_async_fns_nested\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.103     fields: {},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(SPAN),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.103     name: \"test_async_fns_nested\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.103     module_path: \"async_fn\",\n#13 8.103     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.103     fields: {},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.103     kind: Kind(SPAN),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled -> true\n#13 8.103 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"fake\",\n#13 8.103     target: \"tracing_mock::field\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"tracing_mock::field\",\n#13 8.103     location: tracing-mock/src/field.rs:610,\n#13 8.103     fields: {fake_field},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.103     name: \"fake\",\n#13 8.103     target: \"tracing_mock::field\",\n#13 8.103     level: Level(\n#13 8.103         Trace,\n#13 8.103     ),\n#13 8.103     module_path: \"tracing_mock::field\",\n#13 8.103     location: tracing-mock/src/field.rs:610,\n#13 8.103     fields: {fake_field},\n#13 8.103     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.103     kind: Kind(EVENT),\n#13 8.103 }\n#13 8.103 [async_fn_with_async_trait] enabled -> true\n#13 8.103 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.103     name: \"foo\",\n#13 8.103     target: \"async_fn\",\n#13 8.103     level: Level(\n#13 8.103         Info,\n#13 8.103     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.104     fields: {self, v},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.104     name: \"foo\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.104     fields: {self, v},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled -> true\n#13 8.104 [async_fn_with_async_trait] new_span: name=\"foo\"; target=\"async_fn\"; id=Id(1);\n#13 8.104 [async_fn_with_async_trait] enter: foo; id=Id(1);\n#13 8.104 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.104     name: \"baz\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.104     fields: {},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.104     name: \"baz\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.104     fields: {},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled -> true\n#13 8.104 [async_fn_with_async_trait] new_span: name=\"baz\"; target=\"async_fn\"; id=Id(2);\n#13 8.104 [async_fn_with_async_trait] enter: baz; id=Id(2);\n#13 8.104 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled -> true\n#13 8.104 [async_fn_with_async_trait] event: event tracing-attributes/tests/async_fn.rs:198;\n#13 8.104 [async_fn_with_async_trait] exit: baz; id=Id(2);\n#13 8.104 [async_fn_with_async_trait] enter: baz; id=Id(2);\n#13 8.104 [async_fn_with_async_trait] exit: baz; id=Id(2);\n#13 8.104 [async_fn_with_async_trait] drop_span: baz; id=Id(2); refs=1;\n#13 8.104 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.104     name: \"bar\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.104     fields: {self},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.104     name: \"bar\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.104     fields: {self},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled -> true\n#13 8.104 [async_fn_with_async_trait] new_span: name=\"bar\"; target=\"async_fn\"; id=Id(3);\n#13 8.104 [async_fn_with_async_trait] enter: bar; id=Id(3);\n#13 8.104 [async_fn_with_async_trait] register_callsite: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait] enabled -> true\n#13 8.104 [async_fn_with_async_trait] event: event tracing-attributes/tests/async_fn.rs:190;\n#13 8.104 [async_fn_with_async_trait] exit: bar; id=Id(3);\n#13 8.104 [async_fn_with_async_trait] enter: bar; id=Id(3);\n#13 8.104 [async_fn_with_async_trait] exit: bar; id=Id(3);\n#13 8.104 [async_fn_with_async_trait] drop_span: bar; id=Id(3); refs=1;\n#13 8.104 [async_fn_with_async_trait] exit: foo; id=Id(1);\n#13 8.104 [async_fn_with_async_trait] enter: foo; id=Id(1);\n#13 8.104 [async_fn_with_async_trait] exit: foo; id=Id(1);\n#13 8.104 [async_fn_with_async_trait] drop_span: foo; id=Id(1); refs=1;\n#13 8.104 ok\n#13 8.104 test async_fn_with_async_trait_and_fields_expressions ... [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.104     name: \"bar\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.104     fields: {self},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.104     name: \"bar\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Info,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.104     fields: {self},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(SPAN),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.104     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.104         Trace,\n#13 8.104     ),\n#13 8.104     module_path: \"async_fn\",\n#13 8.104     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.104     fields: {val},\n#13 8.104     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.104     kind: Kind(EVENT),\n#13 8.104 }\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.104 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.104     name: \"baz\",\n#13 8.104     target: \"async_fn\",\n#13 8.104     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.105     fields: {},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"baz\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.105     fields: {},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"foo\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.105     fields: {self, v},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"foo\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.105     fields: {self, v},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.105     fields: {awaiting},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(EVENT),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.105     fields: {awaiting},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(EVENT),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"test_async_fn\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.105     fields: {polls},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"test_async_fn\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.105     fields: {polls},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.105     fields: {nested},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(EVENT),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.105     fields: {nested},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(EVENT),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"test_async_fns_nested_other\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.105     fields: {},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"test_async_fns_nested_other\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.105     fields: {},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"test_async_fns_nested\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.105     fields: {},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"test_async_fns_nested\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.105     fields: {},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"fake\",\n#13 8.105     target: \"tracing_mock::field\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"tracing_mock::field\",\n#13 8.105     location: tracing-mock/src/field.rs:610,\n#13 8.105     fields: {fake_field},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.105     kind: Kind(EVENT),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"fake\",\n#13 8.105     target: \"tracing_mock::field\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"tracing_mock::field\",\n#13 8.105     location: tracing-mock/src/field.rs:610,\n#13 8.105     fields: {fake_field},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.105     kind: Kind(EVENT),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] register_callsite: Metadata {\n#13 8.105     name: \"call\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.105     fields: {self, _v, val, val2, test},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled: Metadata {\n#13 8.105     name: \"call\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.105     fields: {self, _v, val, val2, test},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] new_span: name=\"call\"; target=\"async_fn\"; id=Id(1);\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enter: call; id=Id(1);\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] exit: call; id=Id(1);\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] enter: call; id=Id(1);\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] exit: call; id=Id(1);\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions] drop_span: call; id=Id(1); refs=1;\n#13 8.105 ok\n#13 8.105 test async_fn_with_async_trait_and_fields_expressions_with_generic_parameter ... [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.105     name: \"call\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.105     fields: {self, _v, val, val2, test},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.105     name: \"call\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Info,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.105     fields: {self, _v, val, val2, test},\n#13 8.105     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.105     kind: Kind(SPAN),\n#13 8.105 }\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.105 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.105     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.105     target: \"async_fn\",\n#13 8.105     level: Level(\n#13 8.105         Trace,\n#13 8.105     ),\n#13 8.105     module_path: \"async_fn\",\n#13 8.105     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.106     fields: {val},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.106     fields: {val},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"bar\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.106     fields: {self},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"bar\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.106     fields: {self},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.106     fields: {val},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.106     fields: {val},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"baz\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.106     fields: {},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"baz\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.106     fields: {},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"foo\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.106     fields: {self, v},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"foo\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.106     fields: {self, v},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.106     fields: {awaiting},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.106     fields: {awaiting},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"test_async_fn\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.106     fields: {polls},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"test_async_fn\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.106     fields: {polls},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.106     fields: {nested},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.106     fields: {nested},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"test_async_fns_nested_other\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.106     fields: {},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"test_async_fns_nested_other\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.106     fields: {},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"test_async_fns_nested\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.106     fields: {},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"test_async_fns_nested\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.106     fields: {},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"fake\",\n#13 8.106     target: \"tracing_mock::field\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"tracing_mock::field\",\n#13 8.106     location: tracing-mock/src/field.rs:610,\n#13 8.106     fields: {fake_field},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"fake\",\n#13 8.106     target: \"tracing_mock::field\",\n#13 8.106     level: Level(\n#13 8.106         Trace,\n#13 8.106     ),\n#13 8.106     module_path: \"tracing_mock::field\",\n#13 8.106     location: tracing-mock/src/field.rs:610,\n#13 8.106     fields: {fake_field},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.106     kind: Kind(EVENT),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"call_with_self\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.106     fields: {self, Self},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"call_with_self\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.106     fields: {self, Self},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] new_span: name=\"call_with_self\"; target=\"async_fn\"; id=Id(1);\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enter: call_with_self; id=Id(1);\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.106     name: \"sync_fun\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.106     fields: {self, Self},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.106     name: \"sync_fun\",\n#13 8.106     target: \"async_fn\",\n#13 8.106     level: Level(\n#13 8.106         Info,\n#13 8.106     ),\n#13 8.106     module_path: \"async_fn\",\n#13 8.106     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.106     fields: {self, Self},\n#13 8.106     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.106     kind: Kind(SPAN),\n#13 8.106 }\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.106 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] new_span: name=\"sync_fun\"; target=\"async_fn\"; id=Id(2);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enter: sync_fun; id=Id(2);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] exit: sync_fun; id=Id(2);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enter: sync_fun; id=Id(2);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] exit: sync_fun; id=Id(2);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] drop_span: sync_fun; id=Id(2); refs=1;\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] exit: call_with_self; id=Id(1);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enter: call_with_self; id=Id(1);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] exit: call_with_self; id=Id(1);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] drop_span: call_with_self; id=Id(1); refs=1;\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] register_callsite: Metadata {\n#13 8.107     name: \"call_with_mut_self\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled: Metadata {\n#13 8.107     name: \"call_with_mut_self\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enabled -> true\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] new_span: name=\"call_with_mut_self\"; target=\"async_fn\"; id=Id(3);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enter: call_with_mut_self; id=Id(3);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] exit: call_with_mut_self; id=Id(3);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] enter: call_with_mut_self; id=Id(3);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] exit: call_with_mut_self; id=Id(3);\n#13 8.107 [async_fn_with_async_trait_and_fields_expressions_with_generic_parameter] drop_span: call_with_mut_self; id=Id(3); refs=1;\n#13 8.107 ok\n#13 8.107 test manual_box_pin ... [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"call_with_mut_self\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"call_with_mut_self\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"sync_fun\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"sync_fun\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"call_with_self\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"call_with_self\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.107     fields: {self, Self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"call\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.107     fields: {self, _v, val, val2, test},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"call\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.107     fields: {self, _v, val, val2, test},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Trace,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.107     fields: {val},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(EVENT),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Trace,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.107     fields: {val},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(EVENT),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"bar\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.107     fields: {self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"bar\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.107     fields: {self},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Trace,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.107     fields: {val},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(EVENT),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Trace,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.107     fields: {val},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(EVENT),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"baz\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.107     fields: {},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"baz\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.107     fields: {},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"foo\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.107     fields: {self, v},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"foo\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Info,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.107     fields: {self, v},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(SPAN),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Trace,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.107     fields: {awaiting},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(EVENT),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled: Metadata {\n#13 8.107     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.107     target: \"async_fn\",\n#13 8.107     level: Level(\n#13 8.107         Trace,\n#13 8.107     ),\n#13 8.107     module_path: \"async_fn\",\n#13 8.107     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.107     fields: {awaiting},\n#13 8.107     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.107     kind: Kind(EVENT),\n#13 8.107 }\n#13 8.107 [manual_box_pin] enabled -> true\n#13 8.107 [manual_box_pin] register_callsite: Metadata {\n#13 8.107     name: \"test_async_fn\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.108     fields: {polls},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"test_async_fn\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.108     fields: {polls},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] register_callsite: Metadata {\n#13 8.108     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.108     fields: {nested},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.108     fields: {nested},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] register_callsite: Metadata {\n#13 8.108     name: \"test_async_fns_nested_other\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"test_async_fns_nested_other\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] register_callsite: Metadata {\n#13 8.108     name: \"test_async_fns_nested\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"test_async_fns_nested\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] register_callsite: Metadata {\n#13 8.108     name: \"fake\",\n#13 8.108     target: \"tracing_mock::field\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"tracing_mock::field\",\n#13 8.108     location: tracing-mock/src/field.rs:610,\n#13 8.108     fields: {fake_field},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"fake\",\n#13 8.108     target: \"tracing_mock::field\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"tracing_mock::field\",\n#13 8.108     location: tracing-mock/src/field.rs:610,\n#13 8.108     fields: {fake_field},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] register_callsite: Metadata {\n#13 8.108     name: \"manual_box_pin\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:467,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a080e8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"manual_box_pin\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:467,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a080e8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] new_span: name=\"manual_box_pin\"; target=\"async_fn\"; id=Id(1);\n#13 8.108 [manual_box_pin] enter: manual_box_pin; id=Id(1);\n#13 8.108 [manual_box_pin] register_callsite: Metadata {\n#13 8.108     name: \"event tracing-attributes/tests/async_fn.rs:470\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:470,\n#13 8.108     fields: {poll},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08100, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled: Metadata {\n#13 8.108     name: \"event tracing-attributes/tests/async_fn.rs:470\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:470,\n#13 8.108     fields: {poll},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08100, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_box_pin] enabled -> true\n#13 8.108 [manual_box_pin] event: event tracing-attributes/tests/async_fn.rs:470;\n#13 8.108 [manual_box_pin] exit: manual_box_pin; id=Id(1);\n#13 8.108 [manual_box_pin] enter: manual_box_pin; id=Id(1);\n#13 8.108 [manual_box_pin] exit: manual_box_pin; id=Id(1);\n#13 8.108 [manual_box_pin] drop_span: manual_box_pin; id=Id(1); refs=1;\n#13 8.108 ok\n#13 8.108 test manual_impl_future ... [manual_impl_future] register_callsite: Metadata {\n#13 8.108     name: \"event tracing-attributes/tests/async_fn.rs:470\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:470,\n#13 8.108     fields: {poll},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08100, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled: Metadata {\n#13 8.108     name: \"event tracing-attributes/tests/async_fn.rs:470\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Trace,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:470,\n#13 8.108     fields: {poll},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08100, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(EVENT),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled -> true\n#13 8.108 [manual_impl_future] register_callsite: Metadata {\n#13 8.108     name: \"manual_box_pin\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:467,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a080e8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled: Metadata {\n#13 8.108     name: \"manual_box_pin\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:467,\n#13 8.108     fields: {},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a080e8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled -> true\n#13 8.108 [manual_impl_future] register_callsite: Metadata {\n#13 8.108     name: \"call_with_mut_self\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.108     fields: {self, Self},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled: Metadata {\n#13 8.108     name: \"call_with_mut_self\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.108     fields: {self, Self},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled -> true\n#13 8.108 [manual_impl_future] register_callsite: Metadata {\n#13 8.108     name: \"sync_fun\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.108     fields: {self, Self},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled: Metadata {\n#13 8.108     name: \"sync_fun\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.108     fields: {self, Self},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled -> true\n#13 8.108 [manual_impl_future] register_callsite: Metadata {\n#13 8.108     name: \"call_with_self\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.108     fields: {self, Self},\n#13 8.108     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.108     kind: Kind(SPAN),\n#13 8.108 }\n#13 8.108 [manual_impl_future] enabled: Metadata {\n#13 8.108     name: \"call_with_self\",\n#13 8.108     target: \"async_fn\",\n#13 8.108     level: Level(\n#13 8.108         Info,\n#13 8.108     ),\n#13 8.108     module_path: \"async_fn\",\n#13 8.108     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.108     fields: {self, Self},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"call\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.109     fields: {self, _v, val, val2, test},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"call\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.109     fields: {self, _v, val, val2, test},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.109     fields: {val},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.109     fields: {val},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"bar\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.109     fields: {self},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"bar\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.109     fields: {self},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.109     fields: {val},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.109     fields: {val},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"baz\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"baz\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"foo\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.109     fields: {self, v},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"foo\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.109     fields: {self, v},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.109     fields: {awaiting},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.109     fields: {awaiting},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"test_async_fn\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.109     fields: {polls},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"test_async_fn\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.109     fields: {polls},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.109     fields: {nested},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.109     fields: {nested},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"test_async_fns_nested_other\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"test_async_fns_nested_other\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"test_async_fns_nested\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"test_async_fns_nested\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"fake\",\n#13 8.109     target: \"tracing_mock::field\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"tracing_mock::field\",\n#13 8.109     location: tracing-mock/src/field.rs:610,\n#13 8.109     fields: {fake_field},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"fake\",\n#13 8.109     target: \"tracing_mock::field\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"tracing_mock::field\",\n#13 8.109     location: tracing-mock/src/field.rs:610,\n#13 8.109     fields: {fake_field},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"manual_impl_future\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:434,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a080b8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"manual_impl_future\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Info,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:434,\n#13 8.109     fields: {},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a080b8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(SPAN),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] new_span: name=\"manual_impl_future\"; target=\"async_fn\"; id=Id(1);\n#13 8.109 [manual_impl_future] enter: manual_impl_future; id=Id(1);\n#13 8.109 [manual_impl_future] register_callsite: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:437\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:437,\n#13 8.109     fields: {poll},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a080d0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled: Metadata {\n#13 8.109     name: \"event tracing-attributes/tests/async_fn.rs:437\",\n#13 8.109     target: \"async_fn\",\n#13 8.109     level: Level(\n#13 8.109         Trace,\n#13 8.109     ),\n#13 8.109     module_path: \"async_fn\",\n#13 8.109     location: tracing-attributes/tests/async_fn.rs:437,\n#13 8.109     fields: {poll},\n#13 8.109     callsite: Identifier(Pointer { addr: 0x564b65a080d0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.109     kind: Kind(EVENT),\n#13 8.109 }\n#13 8.109 [manual_impl_future] enabled -> true\n#13 8.109 [manual_impl_future] event: event tracing-attributes/tests/async_fn.rs:437;\n#13 8.109 [manual_impl_future] exit: manual_impl_future; id=Id(1);\n#13 8.109 [manual_impl_future] enter: manual_impl_future; id=Id(1);\n#13 8.109 [manual_impl_future] exit: manual_impl_future; id=Id(1);\n#13 8.110 [manual_impl_future] drop_span: manual_impl_future; id=Id(1); refs=1;\n#13 8.110 ok\n#13 8.110 test out_of_scope_fields ... [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"event tracing-attributes/tests/async_fn.rs:437\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Trace,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:437,\n#13 8.110     fields: {poll},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a080d0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(EVENT),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"event tracing-attributes/tests/async_fn.rs:437\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Trace,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:437,\n#13 8.110     fields: {poll},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a080d0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(EVENT),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"manual_impl_future\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:434,\n#13 8.110     fields: {},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a080b8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"manual_impl_future\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:434,\n#13 8.110     fields: {},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a080b8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"event tracing-attributes/tests/async_fn.rs:470\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Trace,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:470,\n#13 8.110     fields: {poll},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08100, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(EVENT),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"event tracing-attributes/tests/async_fn.rs:470\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Trace,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:470,\n#13 8.110     fields: {poll},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08100, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(EVENT),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"manual_box_pin\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:467,\n#13 8.110     fields: {},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a080e8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"manual_box_pin\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:467,\n#13 8.110     fields: {},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a080e8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"call_with_mut_self\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.110     fields: {self, Self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"call_with_mut_self\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:329,\n#13 8.110     fields: {self, Self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08130, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"sync_fun\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.110     fields: {self, Self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"sync_fun\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:309,\n#13 8.110     fields: {self, Self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08088, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"call_with_self\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.110     fields: {self, Self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"call_with_self\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:324,\n#13 8.110     fields: {self, Self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08118, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"call\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.110     fields: {self, _v, val, val2, test},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"call\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:262,\n#13 8.110     fields: {self, _v, val, val2, test},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08148, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Trace,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.110     fields: {val},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(EVENT),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"event tracing-attributes/tests/async_fn.rs:190\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Trace,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:190,\n#13 8.110     fields: {val},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a081a8, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(EVENT),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled -> true\n#13 8.110 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.110     name: \"bar\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.110     fields: {self},\n#13 8.110     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.110     kind: Kind(SPAN),\n#13 8.110 }\n#13 8.110 [out_of_scope_fields] enabled: Metadata {\n#13 8.110     name: \"bar\",\n#13 8.110     target: \"async_fn\",\n#13 8.110     level: Level(\n#13 8.110         Info,\n#13 8.110     ),\n#13 8.110     module_path: \"async_fn\",\n#13 8.110     location: tracing-attributes/tests/async_fn.rs:188,\n#13 8.110     fields: {self},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08190, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.111     fields: {val},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"event tracing-attributes/tests/async_fn.rs:198\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:198,\n#13 8.111     fields: {val},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08178, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"baz\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.111     fields: {},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"baz\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:196,\n#13 8.111     fields: {},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08160, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"foo\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.111     fields: {self, v},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"foo\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:178,\n#13 8.111     fields: {self, v},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a081c0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.111     fields: {awaiting},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"event tracing-attributes/tests/async_fn.rs:12\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:12,\n#13 8.111     fields: {awaiting},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08028, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"test_async_fn\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.111     fields: {polls},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"test_async_fn\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:9,\n#13 8.111     fields: {polls},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08010, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.111     fields: {nested},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"event tracing-attributes/tests/async_fn.rs:121\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:121,\n#13 8.111     fields: {nested},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08070, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"test_async_fns_nested_other\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.111     fields: {},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"test_async_fns_nested_other\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:119,\n#13 8.111     fields: {},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08058, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"test_async_fns_nested\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.111     fields: {},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"test_async_fns_nested\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:114,\n#13 8.111     fields: {},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a08040, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"fake\",\n#13 8.111     target: \"tracing_mock::field\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"tracing_mock::field\",\n#13 8.111     location: tracing-mock/src/field.rs:610,\n#13 8.111     fields: {fake_field},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"fake\",\n#13 8.111     target: \"tracing_mock::field\",\n#13 8.111     level: Level(\n#13 8.111         Trace,\n#13 8.111     ),\n#13 8.111     module_path: \"tracing_mock::field\",\n#13 8.111     location: tracing-mock/src/field.rs:610,\n#13 8.111     fields: {fake_field},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a081d8, metadata: DynMetadata(0x564b65a00598) }),\n#13 8.111     kind: Kind(EVENT),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] register_callsite: Metadata {\n#13 8.111     name: \"call\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:396,\n#13 8.111     fields: {app_id},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a080a0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled: Metadata {\n#13 8.111     name: \"call\",\n#13 8.111     target: \"async_fn\",\n#13 8.111     level: Level(\n#13 8.111         Info,\n#13 8.111     ),\n#13 8.111     module_path: \"async_fn\",\n#13 8.111     location: tracing-attributes/tests/async_fn.rs:396,\n#13 8.111     fields: {app_id},\n#13 8.111     callsite: Identifier(Pointer { addr: 0x564b65a080a0, metadata: DynMetadata(0x564b659f7478) }),\n#13 8.111     kind: Kind(SPAN),\n#13 8.111 }\n#13 8.111 [out_of_scope_fields] enabled -> true\n#13 8.111 [out_of_scope_fields] new_span: name=\"call\"; target=\"async_fn\"; id=Id(1);\n#13 8.111 [out_of_scope_fields] enter: call; id=Id(1);\n#13 8.111 [out_of_scope_fields] exit: call; id=Id(1);\n#13 8.111 [out_of_scope_fields] enter: call; id=Id(1);\n#13 8.111 [out_of_scope_fields] exit: call; id=Id(1);\n#13 8.111 [out_of_scope_fields] drop_span: call; id=Id(1); refs=1;\n#13 8.111 ok\n#13 8.111 \n#13 8.111 test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 8.111 \n#13 8.112      Running tests/dead_code.rs (target/debug/deps/dead_code-189550194a125f7a)\n#13 8.113 \n#13 8.113 running 0 tests\n#13 8.113 \n#13 8.113 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 8.113 \n#13 8.114      Running tests/destructuring.rs (target/debug/deps/destructuring-2cef51104a51a7c9)\n#13 8.116 \n#13 8.116 running 6 tests\n#13 8.116 test destructure_everything ... [destructure_everything] register_callsite: Metadata {\n#13 8.116     name: \"fake\",\n#13 8.116     target: \"tracing_mock::field\",\n#13 8.116     level: Level(\n#13 8.116         Trace,\n#13 8.116     ),\n#13 8.116     module_path: \"tracing_mock::field\",\n#13 8.116     location: tracing-mock/src/field.rs:610,\n#13 8.116     fields: {fake_field},\n#13 8.116     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.116     kind: Kind(EVENT),\n#13 8.116 }\n#13 8.116 [destructure_everything] enabled: Metadata {\n#13 8.116     name: \"fake\",\n#13 8.116     target: \"tracing_mock::field\",\n#13 8.116     level: Level(\n#13 8.116         Trace,\n#13 8.116     ),\n#13 8.116     module_path: \"tracing_mock::field\",\n#13 8.116     location: tracing-mock/src/field.rs:610,\n#13 8.116     fields: {fake_field},\n#13 8.116     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.116     kind: Kind(EVENT),\n#13 8.116 }\n#13 8.116 [destructure_everything] enabled -> true\n#13 8.116 [destructure_everything] register_callsite: Metadata {\n#13 8.116     name: \"my_fn\",\n#13 8.116     target: \"destructuring\",\n#13 8.116     level: Level(\n#13 8.116         Info,\n#13 8.116     ),\n#13 8.116     module_path: \"destructuring\",\n#13 8.116     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.116     fields: {arg1, arg2, arg3, arg4},\n#13 8.116     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.116     kind: Kind(SPAN),\n#13 8.116 }\n#13 8.116 [destructure_everything] enabled: Metadata {\n#13 8.116     name: \"my_fn\",\n#13 8.116     target: \"destructuring\",\n#13 8.116     level: Level(\n#13 8.116         Info,\n#13 8.116     ),\n#13 8.116     module_path: \"destructuring\",\n#13 8.116     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.116     fields: {arg1, arg2, arg3, arg4},\n#13 8.116     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.116     kind: Kind(SPAN),\n#13 8.116 }\n#13 8.116 [destructure_everything] enabled -> true\n#13 8.116 [destructure_everything] new_span: name=\"my_fn\"; target=\"destructuring\"; id=Id(1);\n#13 8.116 [destructure_everything] enter: my_fn; id=Id(1);\n#13 8.116 [destructure_everything] exit: my_fn; id=Id(1);\n#13 8.116 [destructure_everything] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.116 ok\n#13 8.116 test destructure_nested_tuples ... [destructure_nested_tuples] register_callsite: Metadata {\n#13 8.116     name: \"my_fn\",\n#13 8.116     target: \"destructuring\",\n#13 8.116     level: Level(\n#13 8.116         Info,\n#13 8.116     ),\n#13 8.116     module_path: \"destructuring\",\n#13 8.116     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_nested_tuples] enabled: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_nested_tuples] enabled -> true\n#13 8.117 [destructure_nested_tuples] register_callsite: Metadata {\n#13 8.117     name: \"fake\",\n#13 8.117     target: \"tracing_mock::field\",\n#13 8.117     level: Level(\n#13 8.117         Trace,\n#13 8.117     ),\n#13 8.117     module_path: \"tracing_mock::field\",\n#13 8.117     location: tracing-mock/src/field.rs:610,\n#13 8.117     fields: {fake_field},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.117     kind: Kind(EVENT),\n#13 8.117 }\n#13 8.117 [destructure_nested_tuples] enabled: Metadata {\n#13 8.117     name: \"fake\",\n#13 8.117     target: \"tracing_mock::field\",\n#13 8.117     level: Level(\n#13 8.117         Trace,\n#13 8.117     ),\n#13 8.117     module_path: \"tracing_mock::field\",\n#13 8.117     location: tracing-mock/src/field.rs:610,\n#13 8.117     fields: {fake_field},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.117     kind: Kind(EVENT),\n#13 8.117 }\n#13 8.117 [destructure_nested_tuples] enabled -> true\n#13 8.117 [destructure_nested_tuples] register_callsite: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_nested_tuples] enabled: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_nested_tuples] enabled -> true\n#13 8.117 [destructure_nested_tuples] new_span: name=\"my_fn\"; target=\"destructuring\"; id=Id(1);\n#13 8.117 [destructure_nested_tuples] enter: my_fn; id=Id(1);\n#13 8.117 [destructure_nested_tuples] exit: my_fn; id=Id(1);\n#13 8.117 [destructure_nested_tuples] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.117 ok\n#13 8.117 test destructure_refs ... [destructure_refs] register_callsite: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled -> true\n#13 8.117 [destructure_refs] register_callsite: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.117     fields: {arg1, arg2, arg3, arg4},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled -> true\n#13 8.117 [destructure_refs] register_callsite: Metadata {\n#13 8.117     name: \"fake\",\n#13 8.117     target: \"tracing_mock::field\",\n#13 8.117     level: Level(\n#13 8.117         Trace,\n#13 8.117     ),\n#13 8.117     module_path: \"tracing_mock::field\",\n#13 8.117     location: tracing-mock/src/field.rs:610,\n#13 8.117     fields: {fake_field},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.117     kind: Kind(EVENT),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled: Metadata {\n#13 8.117     name: \"fake\",\n#13 8.117     target: \"tracing_mock::field\",\n#13 8.117     level: Level(\n#13 8.117         Trace,\n#13 8.117     ),\n#13 8.117     module_path: \"tracing_mock::field\",\n#13 8.117     location: tracing-mock/src/field.rs:610,\n#13 8.117     fields: {fake_field},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.117     kind: Kind(EVENT),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled -> true\n#13 8.117 [destructure_refs] register_callsite: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.117     fields: {arg1},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled: Metadata {\n#13 8.117     name: \"my_fn\",\n#13 8.117     target: \"destructuring\",\n#13 8.117     level: Level(\n#13 8.117         Info,\n#13 8.117     ),\n#13 8.117     module_path: \"destructuring\",\n#13 8.117     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.117     fields: {arg1},\n#13 8.117     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.117     kind: Kind(SPAN),\n#13 8.117 }\n#13 8.117 [destructure_refs] enabled -> true\n#13 8.117 [destructure_refs] new_span: name=\"my_fn\"; target=\"destructuring\"; id=Id(1);\n#13 8.118 [destructure_refs] enter: my_fn; id=Id(1);\n#13 8.118 [destructure_refs] exit: my_fn; id=Id(1);\n#13 8.118 [destructure_refs] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.118 ok\n#13 8.118 test destructure_structs ... [destructure_structs] register_callsite: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.118     fields: {arg1},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.118     fields: {arg1},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled -> true\n#13 8.118 [destructure_structs] register_callsite: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.118     fields: {arg1, arg2, arg3, arg4},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.118     fields: {arg1, arg2, arg3, arg4},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled -> true\n#13 8.118 [destructure_structs] register_callsite: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.118     fields: {arg1, arg2, arg3, arg4},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.118     fields: {arg1, arg2, arg3, arg4},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled -> true\n#13 8.118 [destructure_structs] register_callsite: Metadata {\n#13 8.118     name: \"fake\",\n#13 8.118     target: \"tracing_mock::field\",\n#13 8.118     level: Level(\n#13 8.118         Trace,\n#13 8.118     ),\n#13 8.118     module_path: \"tracing_mock::field\",\n#13 8.118     location: tracing-mock/src/field.rs:610,\n#13 8.118     fields: {fake_field},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.118     kind: Kind(EVENT),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled: Metadata {\n#13 8.118     name: \"fake\",\n#13 8.118     target: \"tracing_mock::field\",\n#13 8.118     level: Level(\n#13 8.118         Trace,\n#13 8.118     ),\n#13 8.118     module_path: \"tracing_mock::field\",\n#13 8.118     location: tracing-mock/src/field.rs:610,\n#13 8.118     fields: {fake_field},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.118     kind: Kind(EVENT),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled -> true\n#13 8.118 [destructure_structs] register_callsite: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:128,\n#13 8.118     fields: {arg1, arg2},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987070, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled: Metadata {\n#13 8.118     name: \"my_fn\",\n#13 8.118     target: \"destructuring\",\n#13 8.118     level: Level(\n#13 8.118         Info,\n#13 8.118     ),\n#13 8.118     module_path: \"destructuring\",\n#13 8.118     location: tracing-attributes/tests/destructuring.rs:128,\n#13 8.118     fields: {arg1, arg2},\n#13 8.118     callsite: Identifier(Pointer { addr: 0x5555c1987070, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.118     kind: Kind(SPAN),\n#13 8.118 }\n#13 8.118 [destructure_structs] enabled -> true\n#13 8.118 [destructure_structs] new_span: name=\"my_fn\"; target=\"destructuring\"; id=Id(1);\n#13 8.118 [destructure_structs] enter: my_fn; id=Id(1);\n#13 8.118 [destructure_structs] exit: my_fn; id=Id(1);\n#13 8.118 [destructure_structs] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.118 ok\n#13 8.118 test destructure_tuple_structs ... [destructure_tuple_structs] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:128,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987070, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:128,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987070, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled -> true\n#13 8.119 [destructure_tuple_structs] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.119     fields: {arg1},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.119     fields: {arg1},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled -> true\n#13 8.119 [destructure_tuple_structs] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.119     fields: {arg1, arg2, arg3, arg4},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.119     fields: {arg1, arg2, arg3, arg4},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled -> true\n#13 8.119 [destructure_tuple_structs] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.119     fields: {arg1, arg2, arg3, arg4},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.119     fields: {arg1, arg2, arg3, arg4},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled -> true\n#13 8.119 [destructure_tuple_structs] register_callsite: Metadata {\n#13 8.119     name: \"fake\",\n#13 8.119     target: \"tracing_mock::field\",\n#13 8.119     level: Level(\n#13 8.119         Trace,\n#13 8.119     ),\n#13 8.119     module_path: \"tracing_mock::field\",\n#13 8.119     location: tracing-mock/src/field.rs:610,\n#13 8.119     fields: {fake_field},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.119     kind: Kind(EVENT),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled: Metadata {\n#13 8.119     name: \"fake\",\n#13 8.119     target: \"tracing_mock::field\",\n#13 8.119     level: Level(\n#13 8.119         Trace,\n#13 8.119     ),\n#13 8.119     module_path: \"tracing_mock::field\",\n#13 8.119     location: tracing-mock/src/field.rs:610,\n#13 8.119     fields: {fake_field},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.119     kind: Kind(EVENT),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled -> true\n#13 8.119 [destructure_tuple_structs] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:94,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987058, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:94,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987058, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuple_structs] enabled -> true\n#13 8.119 [destructure_tuple_structs] new_span: name=\"my_fn\"; target=\"destructuring\"; id=Id(1);\n#13 8.119 [destructure_tuple_structs] enter: my_fn; id=Id(1);\n#13 8.119 [destructure_tuple_structs] exit: my_fn; id=Id(1);\n#13 8.119 [destructure_tuple_structs] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.119 ok\n#13 8.119 test destructure_tuples ... [destructure_tuples] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:94,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987058, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuples] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:94,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987058, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuples] enabled -> true\n#13 8.119 [destructure_tuples] register_callsite: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:128,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987070, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuples] enabled: Metadata {\n#13 8.119     name: \"my_fn\",\n#13 8.119     target: \"destructuring\",\n#13 8.119     level: Level(\n#13 8.119         Info,\n#13 8.119     ),\n#13 8.119     module_path: \"destructuring\",\n#13 8.119     location: tracing-attributes/tests/destructuring.rs:128,\n#13 8.119     fields: {arg1, arg2},\n#13 8.119     callsite: Identifier(Pointer { addr: 0x5555c1987070, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.119     kind: Kind(SPAN),\n#13 8.119 }\n#13 8.119 [destructure_tuples] enabled -> true\n#13 8.120 [destructure_tuples] register_callsite: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.120     fields: {arg1},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:67,\n#13 8.120     fields: {arg1},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987040, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled -> true\n#13 8.120 [destructure_tuples] register_callsite: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.120     fields: {arg1, arg2, arg3, arg4},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:36,\n#13 8.120     fields: {arg1, arg2, arg3, arg4},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987028, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled -> true\n#13 8.120 [destructure_tuples] register_callsite: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.120     fields: {arg1, arg2, arg3, arg4},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:172,\n#13 8.120     fields: {arg1, arg2, arg3, arg4},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987088, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled -> true\n#13 8.120 [destructure_tuples] register_callsite: Metadata {\n#13 8.120     name: \"fake\",\n#13 8.120     target: \"tracing_mock::field\",\n#13 8.120     level: Level(\n#13 8.120         Trace,\n#13 8.120     ),\n#13 8.120     module_path: \"tracing_mock::field\",\n#13 8.120     location: tracing-mock/src/field.rs:610,\n#13 8.120     fields: {fake_field},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.120     kind: Kind(EVENT),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled: Metadata {\n#13 8.120     name: \"fake\",\n#13 8.120     target: \"tracing_mock::field\",\n#13 8.120     level: Level(\n#13 8.120         Trace,\n#13 8.120     ),\n#13 8.120     module_path: \"tracing_mock::field\",\n#13 8.120     location: tracing-mock/src/field.rs:610,\n#13 8.120     fields: {fake_field},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c19870a0, metadata: DynMetadata(0x5555c197f608) }),\n#13 8.120     kind: Kind(EVENT),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled -> true\n#13 8.120 [destructure_tuples] register_callsite: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:7,\n#13 8.120     fields: {arg1, arg2},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987010, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled: Metadata {\n#13 8.120     name: \"my_fn\",\n#13 8.120     target: \"destructuring\",\n#13 8.120     level: Level(\n#13 8.120         Info,\n#13 8.120     ),\n#13 8.120     module_path: \"destructuring\",\n#13 8.120     location: tracing-attributes/tests/destructuring.rs:7,\n#13 8.120     fields: {arg1, arg2},\n#13 8.120     callsite: Identifier(Pointer { addr: 0x5555c1987010, metadata: DynMetadata(0x5555c1977d78) }),\n#13 8.120     kind: Kind(SPAN),\n#13 8.120 }\n#13 8.120 [destructure_tuples] enabled -> true\n#13 8.120 [destructure_tuples] new_span: name=\"my_fn\"; target=\"destructuring\"; id=Id(1);\n#13 8.120 [destructure_tuples] enter: my_fn; id=Id(1);\n#13 8.120 [destructure_tuples] exit: my_fn; id=Id(1);\n#13 8.120 [destructure_tuples] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.120 ok\n#13 8.120 \n#13 8.120 test result: ok. 6 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 8.120 \n#13 8.120      Running tests/err.rs (target/debug/deps/err-1f4c8a07afba1e9f)\n#13 8.122 \n#13 8.122 running 12 tests\n#13 8.122 test impl_trait_return_type ... [impl_trait_return_type] register_callsite: Metadata {\n#13 8.123     name: \"fake\",\n#13 8.123     target: \"tracing_mock::field\",\n#13 8.123     level: Level(\n#13 8.123         Trace,\n#13 8.123     ),\n#13 8.123     module_path: \"tracing_mock::field\",\n#13 8.123     location: tracing-mock/src/field.rs:610,\n#13 8.123     fields: {fake_field},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.123     kind: Kind(EVENT),\n#13 8.123 }\n#13 8.123 [impl_trait_return_type] enabled: Metadata {\n#13 8.123     name: \"fake\",\n#13 8.123     target: \"tracing_mock::field\",\n#13 8.123     level: Level(\n#13 8.123         Trace,\n#13 8.123     ),\n#13 8.123     module_path: \"tracing_mock::field\",\n#13 8.123     location: tracing-mock/src/field.rs:610,\n#13 8.123     fields: {fake_field},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.123     kind: Kind(EVENT),\n#13 8.123 }\n#13 8.123 [impl_trait_return_type] enabled -> true\n#13 8.123 [impl_trait_return_type] register_callsite: Metadata {\n#13 8.123     name: \"returns_impl_trait\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Info,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:154,\n#13 8.123     fields: {x},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(SPAN),\n#13 8.123 }\n#13 8.123 [impl_trait_return_type] enabled: Metadata {\n#13 8.123     name: \"returns_impl_trait\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Info,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:154,\n#13 8.123     fields: {x},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(SPAN),\n#13 8.123 }\n#13 8.123 [impl_trait_return_type] enabled -> true\n#13 8.123 [impl_trait_return_type] new_span: name=\"returns_impl_trait\"; target=\"err\"; id=Id(1);\n#13 8.123 [impl_trait_return_type] enter: returns_impl_trait; id=Id(1);\n#13 8.123 [impl_trait_return_type] exit: returns_impl_trait; id=Id(1);\n#13 8.123 [impl_trait_return_type] drop_span: returns_impl_trait; id=Id(1); refs=1;\n#13 8.123 ok\n#13 8.123 test test ... [test] register_callsite: Metadata {\n#13 8.123     name: \"returns_impl_trait\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Info,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:154,\n#13 8.123     fields: {x},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(SPAN),\n#13 8.123 }\n#13 8.123 [test] enabled: Metadata {\n#13 8.123     name: \"returns_impl_trait\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Info,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:154,\n#13 8.123     fields: {x},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(SPAN),\n#13 8.123 }\n#13 8.123 [test] enabled -> true\n#13 8.123 [test] register_callsite: Metadata {\n#13 8.123     name: \"fake\",\n#13 8.123     target: \"tracing_mock::field\",\n#13 8.123     level: Level(\n#13 8.123         Trace,\n#13 8.123     ),\n#13 8.123     module_path: \"tracing_mock::field\",\n#13 8.123     location: tracing-mock/src/field.rs:610,\n#13 8.123     fields: {fake_field},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.123     kind: Kind(EVENT),\n#13 8.123 }\n#13 8.123 [test] enabled: Metadata {\n#13 8.123     name: \"fake\",\n#13 8.123     target: \"tracing_mock::field\",\n#13 8.123     level: Level(\n#13 8.123         Trace,\n#13 8.123     ),\n#13 8.123     module_path: \"tracing_mock::field\",\n#13 8.123     location: tracing-mock/src/field.rs:610,\n#13 8.123     fields: {fake_field},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.123     kind: Kind(EVENT),\n#13 8.123 }\n#13 8.123 [test] enabled -> true\n#13 8.123 [test] register_callsite: Metadata {\n#13 8.123     name: \"err\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Info,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:12,\n#13 8.123     fields: {},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(SPAN),\n#13 8.123 }\n#13 8.123 [test] enabled: Metadata {\n#13 8.123     name: \"err\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Info,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:12,\n#13 8.123     fields: {},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(SPAN),\n#13 8.123 }\n#13 8.123 [test] enabled -> true\n#13 8.123 [test] new_span: name=\"err\"; target=\"err\"; id=Id(1);\n#13 8.123 [test] enter: err; id=Id(1);\n#13 8.123 [test] register_callsite: Metadata {\n#13 8.123     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.123     target: \"err\",\n#13 8.123     level: Level(\n#13 8.123         Error,\n#13 8.123     ),\n#13 8.123     module_path: \"err\",\n#13 8.123     location: tracing-attributes/tests/err.rs:12,\n#13 8.123     fields: {error},\n#13 8.123     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.123     kind: Kind(EVENT),\n#13 8.123 }\n#13 8.123 [test] enabled: Metadata {\n#13 8.123     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.123     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Error,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:12,\n#13 8.124     fields: {error},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test] enabled -> true\n#13 8.124 [test] event: event tracing-attributes/tests/err.rs:12;\n#13 8.124 [test] exit: err; id=Id(1);\n#13 8.124 [test] drop_span: err; id=Id(1); refs=1;\n#13 8.124 ok\n#13 8.124 test test_async ... [test_async] register_callsite: Metadata {\n#13 8.124     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Error,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:12,\n#13 8.124     fields: {error},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Error,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:12,\n#13 8.124     fields: {error},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] register_callsite: Metadata {\n#13 8.124     name: \"err\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Info,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:12,\n#13 8.124     fields: {},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(SPAN),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"err\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Info,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:12,\n#13 8.124     fields: {},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(SPAN),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] register_callsite: Metadata {\n#13 8.124     name: \"returns_impl_trait\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Info,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:154,\n#13 8.124     fields: {x},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(SPAN),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"returns_impl_trait\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Info,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:154,\n#13 8.124     fields: {x},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(SPAN),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] register_callsite: Metadata {\n#13 8.124     name: \"fake\",\n#13 8.124     target: \"tracing_mock::field\",\n#13 8.124     level: Level(\n#13 8.124         Trace,\n#13 8.124     ),\n#13 8.124     module_path: \"tracing_mock::field\",\n#13 8.124     location: tracing-mock/src/field.rs:610,\n#13 8.124     fields: {fake_field},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"fake\",\n#13 8.124     target: \"tracing_mock::field\",\n#13 8.124     level: Level(\n#13 8.124         Trace,\n#13 8.124     ),\n#13 8.124     module_path: \"tracing_mock::field\",\n#13 8.124     location: tracing-mock/src/field.rs:610,\n#13 8.124     fields: {fake_field},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] register_callsite: Metadata {\n#13 8.124     name: \"err_async\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Info,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:60,\n#13 8.124     fields: {polls},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(SPAN),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"err_async\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Info,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:60,\n#13 8.124     fields: {polls},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(SPAN),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] new_span: name=\"err_async\"; target=\"err\"; id=Id(1);\n#13 8.124 [test_async] enter: err_async; id=Id(1);\n#13 8.124 [test_async] register_callsite: Metadata {\n#13 8.124     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Trace,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:63,\n#13 8.124     fields: {awaiting},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Trace,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:63,\n#13 8.124     fields: {awaiting},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] event: event tracing-attributes/tests/err.rs:63;\n#13 8.124 [test_async] exit: err_async; id=Id(1);\n#13 8.124 [test_async] enter: err_async; id=Id(1);\n#13 8.124 [test_async] register_callsite: Metadata {\n#13 8.124     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Error,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:60,\n#13 8.124     fields: {error},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled: Metadata {\n#13 8.124     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.124     target: \"err\",\n#13 8.124     level: Level(\n#13 8.124         Error,\n#13 8.124     ),\n#13 8.124     module_path: \"err\",\n#13 8.124     location: tracing-attributes/tests/err.rs:60,\n#13 8.124     fields: {error},\n#13 8.124     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.124     kind: Kind(EVENT),\n#13 8.124 }\n#13 8.124 [test_async] enabled -> true\n#13 8.124 [test_async] event: event tracing-attributes/tests/err.rs:60;\n#13 8.124 [test_async] exit: err_async; id=Id(1);\n#13 8.124 [test_async] enter: err_async; id=Id(1);\n#13 8.124 [test_async] exit: err_async; id=Id(1);\n#13 8.124 [test_async] drop_span: err_async; id=Id(1); refs=1;\n#13 8.125 ok\n#13 8.125 test test_early_return ... [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Error,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:60,\n#13 8.125     fields: {error},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Error,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:60,\n#13 8.125     fields: {error},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Trace,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:63,\n#13 8.125     fields: {awaiting},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Trace,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:63,\n#13 8.125     fields: {awaiting},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"err_async\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:60,\n#13 8.125     fields: {polls},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"err_async\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:60,\n#13 8.125     fields: {polls},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Error,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:12,\n#13 8.125     fields: {error},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Error,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:12,\n#13 8.125     fields: {error},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"err\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:12,\n#13 8.125     fields: {},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"err\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:12,\n#13 8.125     fields: {},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"returns_impl_trait\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:154,\n#13 8.125     fields: {x},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"returns_impl_trait\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:154,\n#13 8.125     fields: {x},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"fake\",\n#13 8.125     target: \"tracing_mock::field\",\n#13 8.125     level: Level(\n#13 8.125         Trace,\n#13 8.125     ),\n#13 8.125     module_path: \"tracing_mock::field\",\n#13 8.125     location: tracing-mock/src/field.rs:610,\n#13 8.125     fields: {fake_field},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"fake\",\n#13 8.125     target: \"tracing_mock::field\",\n#13 8.125     level: Level(\n#13 8.125         Trace,\n#13 8.125     ),\n#13 8.125     module_path: \"tracing_mock::field\",\n#13 8.125     location: tracing-mock/src/field.rs:610,\n#13 8.125     fields: {fake_field},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"err_early_return\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:39,\n#13 8.125     fields: {},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"err_early_return\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Info,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:39,\n#13 8.125     fields: {},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(SPAN),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled -> true\n#13 8.125 [test_early_return] new_span: name=\"err_early_return\"; target=\"err\"; id=Id(1);\n#13 8.125 [test_early_return] enter: err_early_return; id=Id(1);\n#13 8.125 [test_early_return] register_callsite: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.125     target: \"err\",\n#13 8.125     level: Level(\n#13 8.125         Error,\n#13 8.125     ),\n#13 8.125     module_path: \"err\",\n#13 8.125     location: tracing-attributes/tests/err.rs:39,\n#13 8.125     fields: {error},\n#13 8.125     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.125     kind: Kind(EVENT),\n#13 8.125 }\n#13 8.125 [test_early_return] enabled: Metadata {\n#13 8.125     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.126     target: \"err\",\n#13 8.126     level: Level(\n#13 8.126         Error,\n#13 8.126     ),\n#13 8.126     module_path: \"err\",\n#13 8.126     location: tracing-attributes/tests/err.rs:39,\n#13 8.126     fields: {error},\n#13 8.126     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.126     kind: Kind(EVENT),\n#13 8.126 }\n#13 8.126 [test_early_return] enabled -> true\n#13 8.126 [test_early_return] event: event tracing-attributes/tests/err.rs:39;\n#13 8.126 [test_early_return] exit: err_early_return; id=Id(1);\n#13 8.126 [test_early_return] drop_span: err_early_return; id=Id(1); refs=1;\n#13 8.126 ok\n#13 8.126 test test_err_custom_target ... [test_err_custom_target] register_callsite: Metadata {\n#13 8.126     name: \"error_span\",\n#13 8.126     target: \"my_target\",\n#13 8.126     level: Level(\n#13 8.126         Error,\n#13 8.126     ),\n#13 8.126     module_path: \"err\",\n#13 8.126     location: tracing-attributes/tests/err.rs:252,\n#13 8.126     fields: {},\n#13 8.126     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.126     kind: Kind(SPAN),\n#13 8.126 }\n#13 8.126 [test_err_custom_target] enabled: Metadata {\n#13 8.126     name: \"error_span\",\n#13 8.126     target: \"my_target\",\n#13 8.126     level: Level(\n#13 8.126         Error,\n#13 8.126     ),\n#13 8.126     module_path: \"err\",\n#13 8.126     location: tracing-attributes/tests/err.rs:252,\n#13 8.126     fields: {},\n#13 8.126     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.126     kind: Kind(SPAN),\n#13 8.126 }\n#13 8.126 [test_err_custom_target] enabled -> true\n#13 8.126 [test_err_custom_target] new_span: name=\"error_span\"; target=\"my_target\"; id=Id(1);\n#13 8.126 [test_err_custom_target] enter: error_span; id=Id(1);\n#13 8.126 [test_err_custom_target] register_callsite: Metadata {\n#13 8.126     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.126     target: \"my_target\",\n#13 8.126     level: Level(\n#13 8.126         Error,\n#13 8.126     ),\n#13 8.126     module_path: \"err\",\n#13 8.126     location: tracing-attributes/tests/err.rs:256,\n#13 8.126     fields: {message},\n#13 8.126     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.126     kind: Kind(EVENT),\n#13 8.126 }\n#13 8.126 [test_err_custom_target] enabled: Metadata {\n#13 8.126     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.126     target: \"my_target\",\n#13 8.126     level: Level(\n#13 8.126         Error,\n#13 8.126     ),\n#13 8.126     module_path: \"err\",\n#13 8.126     location: tracing-attributes/tests/err.rs:256,\n#13 8.126     fields: {message},\n#13 8.126     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.126     kind: Kind(EVENT),\n#13 8.126 }\n#13 8.126 [test_err_custom_target] enabled -> true\n#13 8.126 [test_err_custom_target] event: event tracing-attributes/tests/err.rs:256;\n#13 8.126 [test_err_custom_target] exit: error_span; id=Id(1);\n#13 8.126 [test_err_custom_target] drop_span: error_span; id=Id(1); refs=1;\n#13 8.126 ok\n#13 8.126 test test_err_dbg ... [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.127     target: \"my_target\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:256,\n#13 8.127     fields: {message},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.127     target: \"my_target\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:256,\n#13 8.127     fields: {message},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"error_span\",\n#13 8.127     target: \"my_target\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:252,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"error_span\",\n#13 8.127     target: \"my_target\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:252,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:39,\n#13 8.127     fields: {error},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:39,\n#13 8.127     fields: {error},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"err_early_return\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:39,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"err_early_return\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:39,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:60,\n#13 8.127     fields: {error},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:60,\n#13 8.127     fields: {error},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Trace,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:63,\n#13 8.127     fields: {awaiting},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Trace,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:63,\n#13 8.127     fields: {awaiting},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"err_async\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:60,\n#13 8.127     fields: {polls},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"err_async\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:60,\n#13 8.127     fields: {polls},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:12,\n#13 8.127     fields: {error},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Error,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:12,\n#13 8.127     fields: {error},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"err\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:12,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"err\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:12,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"returns_impl_trait\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:154,\n#13 8.127     fields: {x},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"returns_impl_trait\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:154,\n#13 8.127     fields: {x},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"fake\",\n#13 8.127     target: \"tracing_mock::field\",\n#13 8.127     level: Level(\n#13 8.127         Trace,\n#13 8.127     ),\n#13 8.127     module_path: \"tracing_mock::field\",\n#13 8.127     location: tracing-mock/src/field.rs:610,\n#13 8.127     fields: {fake_field},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"fake\",\n#13 8.127     target: \"tracing_mock::field\",\n#13 8.127     level: Level(\n#13 8.127         Trace,\n#13 8.127     ),\n#13 8.127     module_path: \"tracing_mock::field\",\n#13 8.127     location: tracing-mock/src/field.rs:610,\n#13 8.127     fields: {fake_field},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.127     kind: Kind(EVENT),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled -> true\n#13 8.127 [test_err_dbg] register_callsite: Metadata {\n#13 8.127     name: \"err_dbg\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:181,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.127 [test_err_dbg] enabled: Metadata {\n#13 8.127     name: \"err_dbg\",\n#13 8.127     target: \"err\",\n#13 8.127     level: Level(\n#13 8.127         Info,\n#13 8.127     ),\n#13 8.127     module_path: \"err\",\n#13 8.127     location: tracing-attributes/tests/err.rs:181,\n#13 8.127     fields: {},\n#13 8.127     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.127     kind: Kind(SPAN),\n#13 8.127 }\n#13 8.128 [test_err_dbg] enabled -> true\n#13 8.128 [test_err_dbg] new_span: name=\"err_dbg\"; target=\"err\"; id=Id(1);\n#13 8.128 [test_err_dbg] enter: err_dbg; id=Id(1);\n#13 8.128 [test_err_dbg] register_callsite: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:181,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg] enabled: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:181,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg] enabled -> true\n#13 8.128 [test_err_dbg] event: event tracing-attributes/tests/err.rs:181;\n#13 8.128 [test_err_dbg] exit: err_dbg; id=Id(1);\n#13 8.128 [test_err_dbg] drop_span: err_dbg; id=Id(1); refs=1;\n#13 8.128 ok\n#13 8.128 test test_err_dbg_info ... [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:181,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:181,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"err_dbg\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Info,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:181,\n#13 8.128     fields: {},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"err_dbg\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Info,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:181,\n#13 8.128     fields: {},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.128     target: \"my_target\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:256,\n#13 8.128     fields: {message},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.128     target: \"my_target\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:256,\n#13 8.128     fields: {message},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"error_span\",\n#13 8.128     target: \"my_target\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:252,\n#13 8.128     fields: {},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"error_span\",\n#13 8.128     target: \"my_target\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:252,\n#13 8.128     fields: {},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:39,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:39,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"err_early_return\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Info,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:39,\n#13 8.128     fields: {},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"err_early_return\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Info,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:39,\n#13 8.128     fields: {},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:60,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Error,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:60,\n#13 8.128     fields: {error},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Trace,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:63,\n#13 8.128     fields: {awaiting},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Trace,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:63,\n#13 8.128     fields: {awaiting},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(EVENT),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled -> true\n#13 8.128 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.128     name: \"err_async\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Info,\n#13 8.128     ),\n#13 8.128     module_path: \"err\",\n#13 8.128     location: tracing-attributes/tests/err.rs:60,\n#13 8.128     fields: {polls},\n#13 8.128     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.128     kind: Kind(SPAN),\n#13 8.128 }\n#13 8.128 [test_err_dbg_info] enabled: Metadata {\n#13 8.128     name: \"err_async\",\n#13 8.128     target: \"err\",\n#13 8.128     level: Level(\n#13 8.128         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:60,\n#13 8.129     fields: {polls},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Error,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:12,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Error,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:12,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.129     name: \"err\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:12,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled: Metadata {\n#13 8.129     name: \"err\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:12,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.129     name: \"returns_impl_trait\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:154,\n#13 8.129     fields: {x},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled: Metadata {\n#13 8.129     name: \"returns_impl_trait\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:154,\n#13 8.129     fields: {x},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.129     name: \"fake\",\n#13 8.129     target: \"tracing_mock::field\",\n#13 8.129     level: Level(\n#13 8.129         Trace,\n#13 8.129     ),\n#13 8.129     module_path: \"tracing_mock::field\",\n#13 8.129     location: tracing-mock/src/field.rs:610,\n#13 8.129     fields: {fake_field},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled: Metadata {\n#13 8.129     name: \"fake\",\n#13 8.129     target: \"tracing_mock::field\",\n#13 8.129     level: Level(\n#13 8.129         Trace,\n#13 8.129     ),\n#13 8.129     module_path: \"tracing_mock::field\",\n#13 8.129     location: tracing-mock/src/field.rs:610,\n#13 8.129     fields: {fake_field},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.129     name: \"err_dbg_info\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled: Metadata {\n#13 8.129     name: \"err_dbg_info\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] new_span: name=\"err_dbg_info\"; target=\"err\"; id=Id(1);\n#13 8.129 [test_err_dbg_info] enter: err_dbg_info; id=Id(1);\n#13 8.129 [test_err_dbg_info] register_callsite: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_dbg_info] enabled -> true\n#13 8.129 [test_err_dbg_info] event: event tracing-attributes/tests/err.rs:282;\n#13 8.129 [test_err_dbg_info] exit: err_dbg_info; id=Id(1);\n#13 8.129 [test_err_dbg_info] drop_span: err_dbg_info; id=Id(1); refs=1;\n#13 8.129 ok\n#13 8.129 test test_err_display_default ... [test_err_display_default] register_callsite: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled -> true\n#13 8.129 [test_err_display_default] register_callsite: Metadata {\n#13 8.129     name: \"err_dbg_info\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled: Metadata {\n#13 8.129     name: \"err_dbg_info\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:282,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled -> true\n#13 8.129 [test_err_display_default] register_callsite: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Error,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:181,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled: Metadata {\n#13 8.129     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Error,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:181,\n#13 8.129     fields: {error},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(EVENT),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled -> true\n#13 8.129 [test_err_display_default] register_callsite: Metadata {\n#13 8.129     name: \"err_dbg\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:181,\n#13 8.129     fields: {},\n#13 8.129     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.129     kind: Kind(SPAN),\n#13 8.129 }\n#13 8.129 [test_err_display_default] enabled: Metadata {\n#13 8.129     name: \"err_dbg\",\n#13 8.129     target: \"err\",\n#13 8.129     level: Level(\n#13 8.129         Info,\n#13 8.129     ),\n#13 8.129     module_path: \"err\",\n#13 8.129     location: tracing-attributes/tests/err.rs:181,\n#13 8.129     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.130     target: \"my_target\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:256,\n#13 8.130     fields: {message},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.130     target: \"my_target\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:256,\n#13 8.130     fields: {message},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"error_span\",\n#13 8.130     target: \"my_target\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:252,\n#13 8.130     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"error_span\",\n#13 8.130     target: \"my_target\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:252,\n#13 8.130     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:39,\n#13 8.130     fields: {error},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:39,\n#13 8.130     fields: {error},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"err_early_return\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:39,\n#13 8.130     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"err_early_return\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:39,\n#13 8.130     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:60,\n#13 8.130     fields: {error},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:60,\n#13 8.130     fields: {error},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Trace,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:63,\n#13 8.130     fields: {awaiting},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Trace,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:63,\n#13 8.130     fields: {awaiting},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"err_async\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:60,\n#13 8.130     fields: {polls},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"err_async\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:60,\n#13 8.130     fields: {polls},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:12,\n#13 8.130     fields: {error},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Error,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:12,\n#13 8.130     fields: {error},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"err\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:12,\n#13 8.130     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"err\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:12,\n#13 8.130     fields: {},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"returns_impl_trait\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:154,\n#13 8.130     fields: {x},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"returns_impl_trait\",\n#13 8.130     target: \"err\",\n#13 8.130     level: Level(\n#13 8.130         Info,\n#13 8.130     ),\n#13 8.130     module_path: \"err\",\n#13 8.130     location: tracing-attributes/tests/err.rs:154,\n#13 8.130     fields: {x},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.130     kind: Kind(SPAN),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] register_callsite: Metadata {\n#13 8.130     name: \"fake\",\n#13 8.130     target: \"tracing_mock::field\",\n#13 8.130     level: Level(\n#13 8.130         Trace,\n#13 8.130     ),\n#13 8.130     module_path: \"tracing_mock::field\",\n#13 8.130     location: tracing-mock/src/field.rs:610,\n#13 8.130     fields: {fake_field},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled: Metadata {\n#13 8.130     name: \"fake\",\n#13 8.130     target: \"tracing_mock::field\",\n#13 8.130     level: Level(\n#13 8.130         Trace,\n#13 8.130     ),\n#13 8.130     module_path: \"tracing_mock::field\",\n#13 8.130     location: tracing-mock/src/field.rs:610,\n#13 8.130     fields: {fake_field},\n#13 8.130     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.130     kind: Kind(EVENT),\n#13 8.130 }\n#13 8.130 [test_err_display_default] enabled -> true\n#13 8.130 [test_err_display_default] new_span: name=\"err\"; target=\"err\"; id=Id(1);\n#13 8.130 [test_err_display_default] enter: err; id=Id(1);\n#13 8.130 [test_err_display_default] event: event tracing-attributes/tests/err.rs:12;\n#13 8.130 [test_err_display_default] exit: err; id=Id(1);\n#13 8.130 [test_err_display_default] drop_span: err; id=Id(1); refs=1;\n#13 8.130 ok\n#13 8.130 test test_err_info ... [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:282,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:282,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"err_dbg_info\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:282,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"err_dbg_info\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:282,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:181,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:181,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"err_dbg\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:181,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"err_dbg\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:181,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.131     target: \"my_target\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:256,\n#13 8.131     fields: {message},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.131     target: \"my_target\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:256,\n#13 8.131     fields: {message},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"error_span\",\n#13 8.131     target: \"my_target\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:252,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"error_span\",\n#13 8.131     target: \"my_target\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:252,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:39,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:39,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"err_early_return\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:39,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"err_early_return\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:39,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:60,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:60,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Trace,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:63,\n#13 8.131     fields: {awaiting},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Trace,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:63,\n#13 8.131     fields: {awaiting},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"err_async\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:60,\n#13 8.131     fields: {polls},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"err_async\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:60,\n#13 8.131     fields: {polls},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:12,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Error,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:12,\n#13 8.131     fields: {error},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(EVENT),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"err\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:12,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"err\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:12,\n#13 8.131     fields: {},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.131 [test_err_info] register_callsite: Metadata {\n#13 8.131     name: \"returns_impl_trait\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:154,\n#13 8.131     fields: {x},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled: Metadata {\n#13 8.131     name: \"returns_impl_trait\",\n#13 8.131     target: \"err\",\n#13 8.131     level: Level(\n#13 8.131         Info,\n#13 8.131     ),\n#13 8.131     module_path: \"err\",\n#13 8.131     location: tracing-attributes/tests/err.rs:154,\n#13 8.131     fields: {x},\n#13 8.131     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.131     kind: Kind(SPAN),\n#13 8.131 }\n#13 8.131 [test_err_info] enabled -> true\n#13 8.132 [test_err_info] register_callsite: Metadata {\n#13 8.132     name: \"fake\",\n#13 8.132     target: \"tracing_mock::field\",\n#13 8.132     level: Level(\n#13 8.132         Trace,\n#13 8.132     ),\n#13 8.132     module_path: \"tracing_mock::field\",\n#13 8.132     location: tracing-mock/src/field.rs:610,\n#13 8.132     fields: {fake_field},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_info] enabled: Metadata {\n#13 8.132     name: \"fake\",\n#13 8.132     target: \"tracing_mock::field\",\n#13 8.132     level: Level(\n#13 8.132         Trace,\n#13 8.132     ),\n#13 8.132     module_path: \"tracing_mock::field\",\n#13 8.132     location: tracing-mock/src/field.rs:610,\n#13 8.132     fields: {fake_field},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_info] enabled -> true\n#13 8.132 [test_err_info] register_callsite: Metadata {\n#13 8.132     name: \"err_info\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_info] enabled: Metadata {\n#13 8.132     name: \"err_info\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_info] enabled -> true\n#13 8.132 [test_err_info] new_span: name=\"err_info\"; target=\"err\"; id=Id(1);\n#13 8.132 [test_err_info] enter: err_info; id=Id(1);\n#13 8.132 [test_err_info] register_callsite: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_info] enabled: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_info] enabled -> true\n#13 8.132 [test_err_info] event: event tracing-attributes/tests/err.rs:262;\n#13 8.132 [test_err_info] exit: err_info; id=Id(1);\n#13 8.132 [test_err_info] drop_span: err_info; id=Id(1); refs=1;\n#13 8.132 ok\n#13 8.132 test test_err_warn_info ... [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"err_info\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"err_info\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:262,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:282,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:282,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"err_dbg_info\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:282,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"err_dbg_info\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:282,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:181,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:181,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"err_dbg\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:181,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"err_dbg\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Info,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:181,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.132     target: \"my_target\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:256,\n#13 8.132     fields: {message},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.132     target: \"my_target\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:256,\n#13 8.132     fields: {message},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"error_span\",\n#13 8.132     target: \"my_target\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:252,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"error_span\",\n#13 8.132     target: \"my_target\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:252,\n#13 8.132     fields: {},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(SPAN),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:39,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled: Metadata {\n#13 8.132     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.132     target: \"err\",\n#13 8.132     level: Level(\n#13 8.132         Error,\n#13 8.132     ),\n#13 8.132     module_path: \"err\",\n#13 8.132     location: tracing-attributes/tests/err.rs:39,\n#13 8.132     fields: {error},\n#13 8.132     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.132     kind: Kind(EVENT),\n#13 8.132 }\n#13 8.132 [test_err_warn_info] enabled -> true\n#13 8.132 [test_err_warn_info] register_callsite: Metadata {\n#13 8.132     name: \"err_early_return\",\n#13 8.132     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:39,\n#13 8.133     fields: {},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"err_early_return\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:39,\n#13 8.133     fields: {},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Error,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:60,\n#13 8.133     fields: {error},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Error,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:60,\n#13 8.133     fields: {error},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Trace,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:63,\n#13 8.133     fields: {awaiting},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Trace,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:63,\n#13 8.133     fields: {awaiting},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"err_async\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:60,\n#13 8.133     fields: {polls},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"err_async\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:60,\n#13 8.133     fields: {polls},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Error,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:12,\n#13 8.133     fields: {error},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Error,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:12,\n#13 8.133     fields: {error},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"err\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:12,\n#13 8.133     fields: {},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"err\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:12,\n#13 8.133     fields: {},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"returns_impl_trait\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:154,\n#13 8.133     fields: {x},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"returns_impl_trait\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:154,\n#13 8.133     fields: {x},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"fake\",\n#13 8.133     target: \"tracing_mock::field\",\n#13 8.133     level: Level(\n#13 8.133         Trace,\n#13 8.133     ),\n#13 8.133     module_path: \"tracing_mock::field\",\n#13 8.133     location: tracing-mock/src/field.rs:610,\n#13 8.133     fields: {fake_field},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"fake\",\n#13 8.133     target: \"tracing_mock::field\",\n#13 8.133     level: Level(\n#13 8.133         Trace,\n#13 8.133     ),\n#13 8.133     module_path: \"tracing_mock::field\",\n#13 8.133     location: tracing-mock/src/field.rs:610,\n#13 8.133     fields: {fake_field},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"err_warn_info\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Warn,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:311,\n#13 8.133     fields: {},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355220, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"err_warn_info\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Warn,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:311,\n#13 8.133     fields: {},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355220, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(SPAN),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] new_span: name=\"err_warn_info\"; target=\"err\"; id=Id(1);\n#13 8.133 [test_err_warn_info] enter: err_warn_info; id=Id(1);\n#13 8.133 [test_err_warn_info] register_callsite: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:311\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:311,\n#13 8.133     fields: {error},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355238, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:311\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:311,\n#13 8.133     fields: {error},\n#13 8.133     callsite: Identifier(Pointer { addr: 0x55b7e0355238, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.133     kind: Kind(EVENT),\n#13 8.133 }\n#13 8.133 [test_err_warn_info] enabled -> true\n#13 8.133 [test_err_warn_info] event: event tracing-attributes/tests/err.rs:311;\n#13 8.133 [test_err_warn_info] exit: err_warn_info; id=Id(1);\n#13 8.133 [test_err_warn_info] drop_span: err_warn_info; id=Id(1); refs=1;\n#13 8.133 ok\n#13 8.133 test test_mut ... [test_mut] register_callsite: Metadata {\n#13 8.133     name: \"event tracing-attributes/tests/err.rs:311\",\n#13 8.133     target: \"err\",\n#13 8.133     level: Level(\n#13 8.133         Info,\n#13 8.133     ),\n#13 8.133     module_path: \"err\",\n#13 8.133     location: tracing-attributes/tests/err.rs:311,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355238, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:311\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:311,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355238, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"err_warn_info\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Warn,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:311,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355220, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"err_warn_info\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Warn,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:311,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355220, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:262,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:262,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"err_info\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:262,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"err_info\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:262,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:282,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:282,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"err_dbg_info\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:282,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"err_dbg_info\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:282,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:181,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:181,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"err_dbg\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:181,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"err_dbg\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:181,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.134     target: \"my_target\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:256,\n#13 8.134     fields: {message},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.134     target: \"my_target\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:256,\n#13 8.134     fields: {message},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"error_span\",\n#13 8.134     target: \"my_target\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:252,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"error_span\",\n#13 8.134     target: \"my_target\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:252,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:39,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:39,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"err_early_return\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:39,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"err_early_return\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:39,\n#13 8.134     fields: {},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:60,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:60,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Trace,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:63,\n#13 8.134     fields: {awaiting},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Trace,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:63,\n#13 8.134     fields: {awaiting},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"err_async\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:60,\n#13 8.134     fields: {polls},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"err_async\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Info,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:60,\n#13 8.134     fields: {polls},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(SPAN),\n#13 8.134 }\n#13 8.134 [test_mut] enabled -> true\n#13 8.134 [test_mut] register_callsite: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:12,\n#13 8.134     fields: {error},\n#13 8.134     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.134     kind: Kind(EVENT),\n#13 8.134 }\n#13 8.134 [test_mut] enabled: Metadata {\n#13 8.134     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.134     target: \"err\",\n#13 8.134     level: Level(\n#13 8.134         Error,\n#13 8.134     ),\n#13 8.134     module_path: \"err\",\n#13 8.134     location: tracing-attributes/tests/err.rs:12,\n#13 8.134     fields: {error},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut] enabled -> true\n#13 8.135 [test_mut] register_callsite: Metadata {\n#13 8.135     name: \"err\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:12,\n#13 8.135     fields: {},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut] enabled: Metadata {\n#13 8.135     name: \"err\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:12,\n#13 8.135     fields: {},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut] enabled -> true\n#13 8.135 [test_mut] register_callsite: Metadata {\n#13 8.135     name: \"returns_impl_trait\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:154,\n#13 8.135     fields: {x},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut] enabled: Metadata {\n#13 8.135     name: \"returns_impl_trait\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:154,\n#13 8.135     fields: {x},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut] enabled -> true\n#13 8.135 [test_mut] register_callsite: Metadata {\n#13 8.135     name: \"fake\",\n#13 8.135     target: \"tracing_mock::field\",\n#13 8.135     level: Level(\n#13 8.135         Trace,\n#13 8.135     ),\n#13 8.135     module_path: \"tracing_mock::field\",\n#13 8.135     location: tracing-mock/src/field.rs:610,\n#13 8.135     fields: {fake_field},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut] enabled: Metadata {\n#13 8.135     name: \"fake\",\n#13 8.135     target: \"tracing_mock::field\",\n#13 8.135     level: Level(\n#13 8.135         Trace,\n#13 8.135     ),\n#13 8.135     module_path: \"tracing_mock::field\",\n#13 8.135     location: tracing-mock/src/field.rs:610,\n#13 8.135     fields: {fake_field},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut] enabled -> true\n#13 8.135 [test_mut] register_callsite: Metadata {\n#13 8.135     name: \"err_mut\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {out},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550b8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut] enabled: Metadata {\n#13 8.135     name: \"err_mut\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {out},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550b8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut] enabled -> true\n#13 8.135 [test_mut] new_span: name=\"err_mut\"; target=\"err\"; id=Id(1);\n#13 8.135 [test_mut] enter: err_mut; id=Id(1);\n#13 8.135 [test_mut] register_callsite: Metadata {\n#13 8.135     name: \"event tracing-attributes/tests/err.rs:94\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Error,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {error},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550d0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut] enabled: Metadata {\n#13 8.135     name: \"event tracing-attributes/tests/err.rs:94\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Error,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {error},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550d0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut] enabled -> true\n#13 8.135 [test_mut] event: event tracing-attributes/tests/err.rs:94;\n#13 8.135 [test_mut] exit: err_mut; id=Id(1);\n#13 8.135 [test_mut] drop_span: err_mut; id=Id(1); refs=1;\n#13 8.135 ok\n#13 8.135 test test_mut_async ... [test_mut_async] register_callsite: Metadata {\n#13 8.135     name: \"event tracing-attributes/tests/err.rs:94\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Error,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {error},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550d0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut_async] enabled: Metadata {\n#13 8.135     name: \"event tracing-attributes/tests/err.rs:94\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Error,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {error},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550d0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut_async] enabled -> true\n#13 8.135 [test_mut_async] register_callsite: Metadata {\n#13 8.135     name: \"err_mut\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {out},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550b8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut_async] enabled: Metadata {\n#13 8.135     name: \"err_mut\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:94,\n#13 8.135     fields: {out},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e03550b8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(SPAN),\n#13 8.135 }\n#13 8.135 [test_mut_async] enabled -> true\n#13 8.135 [test_mut_async] register_callsite: Metadata {\n#13 8.135     name: \"event tracing-attributes/tests/err.rs:311\",\n#13 8.135     target: \"err\",\n#13 8.135     level: Level(\n#13 8.135         Info,\n#13 8.135     ),\n#13 8.135     module_path: \"err\",\n#13 8.135     location: tracing-attributes/tests/err.rs:311,\n#13 8.135     fields: {error},\n#13 8.135     callsite: Identifier(Pointer { addr: 0x55b7e0355238, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.135     kind: Kind(EVENT),\n#13 8.135 }\n#13 8.135 [test_mut_async] enabled: Metadata {\n#13 8.135     name: \"event tracing-attributes/tests/err.rs:311\",\n#13 8.135     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:311,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355238, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err_warn_info\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Warn,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:311,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355220, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err_warn_info\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Warn,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:311,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355220, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:262,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:262\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:262,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551d8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err_info\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:262,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err_info\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:262,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551c0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:282,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:282\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:282,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355208, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err_dbg_info\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:282,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err_dbg_info\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:282,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551f0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:181,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:181\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:181,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355178, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err_dbg\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:181,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err_dbg\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:181,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355160, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.136     target: \"my_target\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:256,\n#13 8.136     fields: {message},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:256\",\n#13 8.136     target: \"my_target\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:256,\n#13 8.136     fields: {message},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03551a8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"error_span\",\n#13 8.136     target: \"my_target\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:252,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"error_span\",\n#13 8.136     target: \"my_target\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:252,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355190, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:39,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:39\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:39,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355058, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err_early_return\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:39,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err_early_return\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:39,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355040, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:60,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:60\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:60,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e03550a0, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Trace,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:63,\n#13 8.136     fields: {awaiting},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:63\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Trace,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:63,\n#13 8.136     fields: {awaiting},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355088, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err_async\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:60,\n#13 8.136     fields: {polls},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err_async\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:60,\n#13 8.136     fields: {polls},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355070, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:12,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"event tracing-attributes/tests/err.rs:12\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Error,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:12,\n#13 8.136     fields: {error},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355028, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(EVENT),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled -> true\n#13 8.136 [test_mut_async] register_callsite: Metadata {\n#13 8.136     name: \"err\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.136     module_path: \"err\",\n#13 8.136     location: tracing-attributes/tests/err.rs:12,\n#13 8.136     fields: {},\n#13 8.136     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.136     kind: Kind(SPAN),\n#13 8.136 }\n#13 8.136 [test_mut_async] enabled: Metadata {\n#13 8.136     name: \"err\",\n#13 8.136     target: \"err\",\n#13 8.136     level: Level(\n#13 8.136         Info,\n#13 8.136     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:12,\n#13 8.137     fields: {},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355010, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(SPAN),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled -> true\n#13 8.137 [test_mut_async] register_callsite: Metadata {\n#13 8.137     name: \"returns_impl_trait\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Info,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:154,\n#13 8.137     fields: {x},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(SPAN),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled: Metadata {\n#13 8.137     name: \"returns_impl_trait\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Info,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:154,\n#13 8.137     fields: {x},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355130, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(SPAN),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled -> true\n#13 8.137 [test_mut_async] register_callsite: Metadata {\n#13 8.137     name: \"fake\",\n#13 8.137     target: \"tracing_mock::field\",\n#13 8.137     level: Level(\n#13 8.137         Trace,\n#13 8.137     ),\n#13 8.137     module_path: \"tracing_mock::field\",\n#13 8.137     location: tracing-mock/src/field.rs:610,\n#13 8.137     fields: {fake_field},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.137     kind: Kind(EVENT),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled: Metadata {\n#13 8.137     name: \"fake\",\n#13 8.137     target: \"tracing_mock::field\",\n#13 8.137     level: Level(\n#13 8.137         Trace,\n#13 8.137     ),\n#13 8.137     module_path: \"tracing_mock::field\",\n#13 8.137     location: tracing-mock/src/field.rs:610,\n#13 8.137     fields: {fake_field},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355250, metadata: DynMetadata(0x55b7e03373a8) }),\n#13 8.137     kind: Kind(EVENT),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled -> true\n#13 8.137 [test_mut_async] register_callsite: Metadata {\n#13 8.137     name: \"err_mut_async\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Info,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:115,\n#13 8.137     fields: {polls, out},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e03550e8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(SPAN),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled: Metadata {\n#13 8.137     name: \"err_mut_async\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Info,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:115,\n#13 8.137     fields: {polls, out},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e03550e8, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(SPAN),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled -> true\n#13 8.137 [test_mut_async] new_span: name=\"err_mut_async\"; target=\"err\"; id=Id(1);\n#13 8.137 [test_mut_async] enter: err_mut_async; id=Id(1);\n#13 8.137 [test_mut_async] register_callsite: Metadata {\n#13 8.137     name: \"event tracing-attributes/tests/err.rs:118\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Trace,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:118,\n#13 8.137     fields: {awaiting},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355100, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(EVENT),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled: Metadata {\n#13 8.137     name: \"event tracing-attributes/tests/err.rs:118\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Trace,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:118,\n#13 8.137     fields: {awaiting},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355100, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(EVENT),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled -> true\n#13 8.137 [test_mut_async] event: event tracing-attributes/tests/err.rs:118;\n#13 8.137 [test_mut_async] exit: err_mut_async; id=Id(1);\n#13 8.137 [test_mut_async] enter: err_mut_async; id=Id(1);\n#13 8.137 [test_mut_async] register_callsite: Metadata {\n#13 8.137     name: \"event tracing-attributes/tests/err.rs:115\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Error,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:115,\n#13 8.137     fields: {error},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355118, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(EVENT),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled: Metadata {\n#13 8.137     name: \"event tracing-attributes/tests/err.rs:115\",\n#13 8.137     target: \"err\",\n#13 8.137     level: Level(\n#13 8.137         Error,\n#13 8.137     ),\n#13 8.137     module_path: \"err\",\n#13 8.137     location: tracing-attributes/tests/err.rs:115,\n#13 8.137     fields: {error},\n#13 8.137     callsite: Identifier(Pointer { addr: 0x55b7e0355118, metadata: DynMetadata(0x55b7e032e7a0) }),\n#13 8.137     kind: Kind(EVENT),\n#13 8.137 }\n#13 8.137 [test_mut_async] enabled -> true\n#13 8.137 [test_mut_async] event: event tracing-attributes/tests/err.rs:115;\n#13 8.137 [test_mut_async] exit: err_mut_async; id=Id(1);\n#13 8.137 [test_mut_async] enter: err_mut_async; id=Id(1);\n#13 8.137 [test_mut_async] exit: err_mut_async; id=Id(1);\n#13 8.137 [test_mut_async] drop_span: err_mut_async; id=Id(1); refs=1;\n#13 8.137 ok\n#13 8.137 \n#13 8.137 test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 8.137 \n#13 8.138      Running tests/fields.rs (target/debug/deps/fields-765d54db324829c9)\n#13 8.139 \n#13 8.139 running 9 tests\n#13 8.139 test clashy_expr_field ... [clashy_expr_field] register_callsite: Metadata {\n#13 8.140     name: \"fake\",\n#13 8.140     target: \"tracing_mock::field\",\n#13 8.140     level: Level(\n#13 8.140         Trace,\n#13 8.140     ),\n#13 8.140     module_path: \"tracing_mock::field\",\n#13 8.140     location: tracing-mock/src/field.rs:610,\n#13 8.140     fields: {fake_field},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.140     kind: Kind(EVENT),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled: Metadata {\n#13 8.140     name: \"fake\",\n#13 8.140     target: \"tracing_mock::field\",\n#13 8.140     level: Level(\n#13 8.140         Trace,\n#13 8.140     ),\n#13 8.140     module_path: \"tracing_mock::field\",\n#13 8.140     location: tracing-mock/src/field.rs:610,\n#13 8.140     fields: {fake_field},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.140     kind: Kind(EVENT),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled -> true\n#13 8.140 [clashy_expr_field] register_callsite: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:22,\n#13 8.140     fields: {s, s.len},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.140     kind: Kind(SPAN),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:22,\n#13 8.140     fields: {s, s.len},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.140     kind: Kind(SPAN),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled -> true\n#13 8.140 [clashy_expr_field] new_span: name=\"fn_clashy_expr_field\"; target=\"fields\"; id=Id(1);\n#13 8.140 [clashy_expr_field] enter: fn_clashy_expr_field; id=Id(1);\n#13 8.140 [clashy_expr_field] exit: fn_clashy_expr_field; id=Id(1);\n#13 8.140 [clashy_expr_field] drop_span: fn_clashy_expr_field; id=Id(1); refs=1;\n#13 8.140 [clashy_expr_field] register_callsite: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:22,\n#13 8.140     fields: {s, s.len},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.140     kind: Kind(SPAN),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:22,\n#13 8.140     fields: {s, s.len},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.140     kind: Kind(SPAN),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled -> true\n#13 8.140 [clashy_expr_field] register_callsite: Metadata {\n#13 8.140     name: \"fake\",\n#13 8.140     target: \"tracing_mock::field\",\n#13 8.140     level: Level(\n#13 8.140         Trace,\n#13 8.140     ),\n#13 8.140     module_path: \"tracing_mock::field\",\n#13 8.140     location: tracing-mock/src/field.rs:610,\n#13 8.140     fields: {fake_field},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.140     kind: Kind(EVENT),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled: Metadata {\n#13 8.140     name: \"fake\",\n#13 8.140     target: \"tracing_mock::field\",\n#13 8.140     level: Level(\n#13 8.140         Trace,\n#13 8.140     ),\n#13 8.140     module_path: \"tracing_mock::field\",\n#13 8.140     location: tracing-mock/src/field.rs:610,\n#13 8.140     fields: {fake_field},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.140     kind: Kind(EVENT),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled -> true\n#13 8.140 [clashy_expr_field] register_callsite: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field2\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:27,\n#13 8.140     fields: {s},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.140     kind: Kind(SPAN),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field2\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:27,\n#13 8.140     fields: {s},\n#13 8.140     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.140     kind: Kind(SPAN),\n#13 8.140 }\n#13 8.140 [clashy_expr_field] enabled -> true\n#13 8.140 [clashy_expr_field] new_span: name=\"fn_clashy_expr_field2\"; target=\"fields\"; id=Id(1);\n#13 8.140 [clashy_expr_field] enter: fn_clashy_expr_field2; id=Id(1);\n#13 8.140 [clashy_expr_field] exit: fn_clashy_expr_field2; id=Id(1);\n#13 8.140 [clashy_expr_field] drop_span: fn_clashy_expr_field2; id=Id(1); refs=1;\n#13 8.140 ok\n#13 8.140 test empty_field ... [empty_field] register_callsite: Metadata {\n#13 8.140     name: \"fn_clashy_expr_field2\",\n#13 8.140     target: \"fields\",\n#13 8.140     level: Level(\n#13 8.140         Info,\n#13 8.140     ),\n#13 8.140     module_path: \"fields\",\n#13 8.140     location: tracing-attributes/tests/fields.rs:27,\n#13 8.140     fields: {s},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [empty_field] enabled: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field2\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:27,\n#13 8.141     fields: {s},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [empty_field] enabled -> true\n#13 8.141 [empty_field] register_callsite: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:22,\n#13 8.141     fields: {s, s.len},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [empty_field] enabled: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:22,\n#13 8.141     fields: {s, s.len},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [empty_field] enabled -> true\n#13 8.141 [empty_field] register_callsite: Metadata {\n#13 8.141     name: \"fake\",\n#13 8.141     target: \"tracing_mock::field\",\n#13 8.141     level: Level(\n#13 8.141         Trace,\n#13 8.141     ),\n#13 8.141     module_path: \"tracing_mock::field\",\n#13 8.141     location: tracing-mock/src/field.rs:610,\n#13 8.141     fields: {fake_field},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.141     kind: Kind(EVENT),\n#13 8.141 }\n#13 8.141 [empty_field] enabled: Metadata {\n#13 8.141     name: \"fake\",\n#13 8.141     target: \"tracing_mock::field\",\n#13 8.141     level: Level(\n#13 8.141         Trace,\n#13 8.141     ),\n#13 8.141     module_path: \"tracing_mock::field\",\n#13 8.141     location: tracing-mock/src/field.rs:610,\n#13 8.141     fields: {fake_field},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.141     kind: Kind(EVENT),\n#13 8.141 }\n#13 8.141 [empty_field] enabled -> true\n#13 8.141 [empty_field] register_callsite: Metadata {\n#13 8.141     name: \"fn_empty_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:11,\n#13 8.141     fields: {foo, empty},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [empty_field] enabled: Metadata {\n#13 8.141     name: \"fn_empty_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:11,\n#13 8.141     fields: {foo, empty},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [empty_field] enabled -> true\n#13 8.141 [empty_field] new_span: name=\"fn_empty_field\"; target=\"fields\"; id=Id(1);\n#13 8.141 [empty_field] enter: fn_empty_field; id=Id(1);\n#13 8.141 [empty_field] exit: fn_empty_field; id=Id(1);\n#13 8.141 [empty_field] drop_span: fn_empty_field; id=Id(1); refs=1;\n#13 8.141 ok\n#13 8.141 test expr_field ... [expr_field] register_callsite: Metadata {\n#13 8.141     name: \"fn_empty_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:11,\n#13 8.141     fields: {foo, empty},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [expr_field] enabled: Metadata {\n#13 8.141     name: \"fn_empty_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:11,\n#13 8.141     fields: {foo, empty},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [expr_field] enabled -> true\n#13 8.141 [expr_field] register_callsite: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field2\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:27,\n#13 8.141     fields: {s},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [expr_field] enabled: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field2\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:27,\n#13 8.141     fields: {s},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [expr_field] enabled -> true\n#13 8.141 [expr_field] register_callsite: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:22,\n#13 8.141     fields: {s, s.len},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [expr_field] enabled: Metadata {\n#13 8.141     name: \"fn_clashy_expr_field\",\n#13 8.141     target: \"fields\",\n#13 8.141     level: Level(\n#13 8.141         Info,\n#13 8.141     ),\n#13 8.141     module_path: \"fields\",\n#13 8.141     location: tracing-attributes/tests/fields.rs:22,\n#13 8.141     fields: {s, s.len},\n#13 8.141     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.141     kind: Kind(SPAN),\n#13 8.141 }\n#13 8.141 [expr_field] enabled -> true\n#13 8.141 [expr_field] register_callsite: Metadata {\n#13 8.141     name: \"fake\",\n#13 8.141     target: \"tracing_mock::field\",\n#13 8.141     level: Level(\n#13 8.141         Trace,\n#13 8.141     ),\n#13 8.141     module_path: \"tracing_mock::field\",\n#13 8.141     location: tracing-mock/src/field.rs:610,\n#13 8.141     fields: {fake_field},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.142     kind: Kind(EVENT),\n#13 8.142 }\n#13 8.142 [expr_field] enabled: Metadata {\n#13 8.142     name: \"fake\",\n#13 8.142     target: \"tracing_mock::field\",\n#13 8.142     level: Level(\n#13 8.142         Trace,\n#13 8.142     ),\n#13 8.142     module_path: \"tracing_mock::field\",\n#13 8.142     location: tracing-mock/src/field.rs:610,\n#13 8.142     fields: {fake_field},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.142     kind: Kind(EVENT),\n#13 8.142 }\n#13 8.142 [expr_field] enabled -> true\n#13 8.142 [expr_field] register_callsite: Metadata {\n#13 8.142     name: \"fn_expr_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:14,\n#13 8.142     fields: {s, len},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [expr_field] enabled: Metadata {\n#13 8.142     name: \"fn_expr_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:14,\n#13 8.142     fields: {s, len},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [expr_field] enabled -> true\n#13 8.142 [expr_field] new_span: name=\"fn_expr_field\"; target=\"fields\"; id=Id(1);\n#13 8.142 [expr_field] enter: fn_expr_field; id=Id(1);\n#13 8.142 [expr_field] exit: fn_expr_field; id=Id(1);\n#13 8.142 [expr_field] drop_span: fn_expr_field; id=Id(1); refs=1;\n#13 8.142 ok\n#13 8.142 test fields ... [fields] register_callsite: Metadata {\n#13 8.142     name: \"fn_expr_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:14,\n#13 8.142     fields: {s, len},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled: Metadata {\n#13 8.142     name: \"fn_expr_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:14,\n#13 8.142     fields: {s, len},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled -> true\n#13 8.142 [fields] register_callsite: Metadata {\n#13 8.142     name: \"fn_empty_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:11,\n#13 8.142     fields: {foo, empty},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled: Metadata {\n#13 8.142     name: \"fn_empty_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:11,\n#13 8.142     fields: {foo, empty},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled -> true\n#13 8.142 [fields] register_callsite: Metadata {\n#13 8.142     name: \"fn_clashy_expr_field2\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:27,\n#13 8.142     fields: {s},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled: Metadata {\n#13 8.142     name: \"fn_clashy_expr_field2\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:27,\n#13 8.142     fields: {s},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled -> true\n#13 8.142 [fields] register_callsite: Metadata {\n#13 8.142     name: \"fn_clashy_expr_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:22,\n#13 8.142     fields: {s, s.len},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled: Metadata {\n#13 8.142     name: \"fn_clashy_expr_field\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:22,\n#13 8.142     fields: {s, s.len},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled -> true\n#13 8.142 [fields] register_callsite: Metadata {\n#13 8.142     name: \"fake\",\n#13 8.142     target: \"tracing_mock::field\",\n#13 8.142     level: Level(\n#13 8.142         Trace,\n#13 8.142     ),\n#13 8.142     module_path: \"tracing_mock::field\",\n#13 8.142     location: tracing-mock/src/field.rs:610,\n#13 8.142     fields: {fake_field},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.142     kind: Kind(EVENT),\n#13 8.142 }\n#13 8.142 [fields] enabled: Metadata {\n#13 8.142     name: \"fake\",\n#13 8.142     target: \"tracing_mock::field\",\n#13 8.142     level: Level(\n#13 8.142         Trace,\n#13 8.142     ),\n#13 8.142     module_path: \"tracing_mock::field\",\n#13 8.142     location: tracing-mock/src/field.rs:610,\n#13 8.142     fields: {fake_field},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.142     kind: Kind(EVENT),\n#13 8.142 }\n#13 8.142 [fields] enabled -> true\n#13 8.142 [fields] register_callsite: Metadata {\n#13 8.142     name: \"fn_no_param\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.142     module_path: \"fields\",\n#13 8.142     location: tracing-attributes/tests/fields.rs:5,\n#13 8.142     fields: {foo, dsa, num},\n#13 8.142     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.142     kind: Kind(SPAN),\n#13 8.142 }\n#13 8.142 [fields] enabled: Metadata {\n#13 8.142     name: \"fn_no_param\",\n#13 8.142     target: \"fields\",\n#13 8.142     level: Level(\n#13 8.142         Info,\n#13 8.142     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:5,\n#13 8.143     fields: {foo, dsa, num},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [fields] enabled -> true\n#13 8.143 [fields] new_span: name=\"fn_no_param\"; target=\"fields\"; id=Id(1);\n#13 8.143 [fields] enter: fn_no_param; id=Id(1);\n#13 8.143 [fields] exit: fn_no_param; id=Id(1);\n#13 8.143 [fields] drop_span: fn_no_param; id=Id(1); refs=1;\n#13 8.143 ok\n#13 8.143 test keyword_ident_in_field_name ... [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fn_no_param\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:5,\n#13 8.143     fields: {foo, dsa, num},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fn_no_param\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:5,\n#13 8.143     fields: {foo, dsa, num},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled -> true\n#13 8.143 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fn_expr_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:14,\n#13 8.143     fields: {s, len},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fn_expr_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:14,\n#13 8.143     fields: {s, len},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled -> true\n#13 8.143 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fn_empty_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:11,\n#13 8.143     fields: {foo, empty},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fn_empty_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:11,\n#13 8.143     fields: {foo, empty},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled -> true\n#13 8.143 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fn_clashy_expr_field2\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:27,\n#13 8.143     fields: {s},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fn_clashy_expr_field2\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:27,\n#13 8.143     fields: {s},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled -> true\n#13 8.143 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fn_clashy_expr_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:22,\n#13 8.143     fields: {s, s.len},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fn_clashy_expr_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:22,\n#13 8.143     fields: {s, s.len},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled -> true\n#13 8.143 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fake\",\n#13 8.143     target: \"tracing_mock::field\",\n#13 8.143     level: Level(\n#13 8.143         Trace,\n#13 8.143     ),\n#13 8.143     module_path: \"tracing_mock::field\",\n#13 8.143     location: tracing-mock/src/field.rs:610,\n#13 8.143     fields: {fake_field},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.143     kind: Kind(EVENT),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fake\",\n#13 8.143     target: \"tracing_mock::field\",\n#13 8.143     level: Level(\n#13 8.143         Trace,\n#13 8.143     ),\n#13 8.143     module_path: \"tracing_mock::field\",\n#13 8.143     location: tracing-mock/src/field.rs:610,\n#13 8.143     fields: {fake_field},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.143     kind: Kind(EVENT),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled -> true\n#13 8.143 [keyword_ident_in_field_name] register_callsite: Metadata {\n#13 8.143     name: \"fn_keyword_ident_in_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.143         Info,\n#13 8.143     ),\n#13 8.143     module_path: \"fields\",\n#13 8.143     location: tracing-attributes/tests/fields.rs:37,\n#13 8.143     fields: {keywords.impl.type.fn},\n#13 8.143     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.143     kind: Kind(SPAN),\n#13 8.143 }\n#13 8.143 [keyword_ident_in_field_name] enabled: Metadata {\n#13 8.143     name: \"fn_keyword_ident_in_field\",\n#13 8.143     target: \"fields\",\n#13 8.143     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:37,\n#13 8.144     fields: {keywords.impl.type.fn},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [keyword_ident_in_field_name] enabled -> true\n#13 8.144 [keyword_ident_in_field_name] new_span: name=\"fn_keyword_ident_in_field\"; target=\"fields\"; id=Id(1);\n#13 8.144 [keyword_ident_in_field_name] enter: fn_keyword_ident_in_field; id=Id(1);\n#13 8.144 [keyword_ident_in_field_name] exit: fn_keyword_ident_in_field; id=Id(1);\n#13 8.144 [keyword_ident_in_field_name] drop_span: fn_keyword_ident_in_field; id=Id(1); refs=1;\n#13 8.144 ok\n#13 8.144 test parameters_with_fields ... [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_keyword_ident_in_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:37,\n#13 8.144     fields: {keywords.impl.type.fn},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fn_keyword_ident_in_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:37,\n#13 8.144     fields: {keywords.impl.type.fn},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_no_param\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:5,\n#13 8.144     fields: {foo, dsa, num},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fn_no_param\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:5,\n#13 8.144     fields: {foo, dsa, num},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_expr_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:14,\n#13 8.144     fields: {s, len},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fn_expr_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:14,\n#13 8.144     fields: {s, len},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_empty_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:11,\n#13 8.144     fields: {foo, empty},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fn_empty_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:11,\n#13 8.144     fields: {foo, empty},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_clashy_expr_field2\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:27,\n#13 8.144     fields: {s},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fn_clashy_expr_field2\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:27,\n#13 8.144     fields: {s},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_clashy_expr_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:22,\n#13 8.144     fields: {s, s.len},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fn_clashy_expr_field\",\n#13 8.144     target: \"fields\",\n#13 8.144     level: Level(\n#13 8.144         Info,\n#13 8.144     ),\n#13 8.144     module_path: \"fields\",\n#13 8.144     location: tracing-attributes/tests/fields.rs:22,\n#13 8.144     fields: {s, s.len},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.144     kind: Kind(SPAN),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fake\",\n#13 8.144     target: \"tracing_mock::field\",\n#13 8.144     level: Level(\n#13 8.144         Trace,\n#13 8.144     ),\n#13 8.144     module_path: \"tracing_mock::field\",\n#13 8.144     location: tracing-mock/src/field.rs:610,\n#13 8.144     fields: {fake_field},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.144     kind: Kind(EVENT),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled: Metadata {\n#13 8.144     name: \"fake\",\n#13 8.144     target: \"tracing_mock::field\",\n#13 8.144     level: Level(\n#13 8.144         Trace,\n#13 8.144     ),\n#13 8.144     module_path: \"tracing_mock::field\",\n#13 8.144     location: tracing-mock/src/field.rs:610,\n#13 8.144     fields: {fake_field},\n#13 8.144     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.144     kind: Kind(EVENT),\n#13 8.144 }\n#13 8.144 [parameters_with_fields] enabled -> true\n#13 8.144 [parameters_with_fields] register_callsite: Metadata {\n#13 8.144     name: \"fn_param\",\n#13 8.144     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:8,\n#13 8.145     fields: {param, foo},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [parameters_with_fields] enabled: Metadata {\n#13 8.145     name: \"fn_param\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:8,\n#13 8.145     fields: {param, foo},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [parameters_with_fields] enabled -> true\n#13 8.145 [parameters_with_fields] new_span: name=\"fn_param\"; target=\"fields\"; id=Id(1);\n#13 8.145 [parameters_with_fields] enter: fn_param; id=Id(1);\n#13 8.145 [parameters_with_fields] exit: fn_param; id=Id(1);\n#13 8.145 [parameters_with_fields] drop_span: fn_param; id=Id(1); refs=1;\n#13 8.145 ok\n#13 8.145 test self_expr_field ... [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_param\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:8,\n#13 8.145     fields: {param, foo},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_param\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:8,\n#13 8.145     fields: {param, foo},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_keyword_ident_in_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:37,\n#13 8.145     fields: {keywords.impl.type.fn},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_keyword_ident_in_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:37,\n#13 8.145     fields: {keywords.impl.type.fn},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_no_param\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:5,\n#13 8.145     fields: {foo, dsa, num},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_no_param\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:5,\n#13 8.145     fields: {foo, dsa, num},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_expr_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:14,\n#13 8.145     fields: {s, len},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_expr_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:14,\n#13 8.145     fields: {s, len},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_empty_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:11,\n#13 8.145     fields: {foo, empty},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_empty_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:11,\n#13 8.145     fields: {foo, empty},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_clashy_expr_field2\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:27,\n#13 8.145     fields: {s},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_clashy_expr_field2\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:27,\n#13 8.145     fields: {s},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.145     name: \"fn_clashy_expr_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:22,\n#13 8.145     fields: {s, s.len},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled: Metadata {\n#13 8.145     name: \"fn_clashy_expr_field\",\n#13 8.145     target: \"fields\",\n#13 8.145     level: Level(\n#13 8.145         Info,\n#13 8.145     ),\n#13 8.145     module_path: \"fields\",\n#13 8.145     location: tracing-attributes/tests/fields.rs:22,\n#13 8.145     fields: {s, s.len},\n#13 8.145     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.145     kind: Kind(SPAN),\n#13 8.145 }\n#13 8.145 [self_expr_field] enabled -> true\n#13 8.145 [self_expr_field] register_callsite: Metadata {\n#13 8.146     name: \"fake\",\n#13 8.146     target: \"tracing_mock::field\",\n#13 8.146     level: Level(\n#13 8.146         Trace,\n#13 8.146     ),\n#13 8.146     module_path: \"tracing_mock::field\",\n#13 8.146     location: tracing-mock/src/field.rs:610,\n#13 8.146     fields: {fake_field},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.146     kind: Kind(EVENT),\n#13 8.146 }\n#13 8.146 [self_expr_field] enabled: Metadata {\n#13 8.146     name: \"fake\",\n#13 8.146     target: \"tracing_mock::field\",\n#13 8.146     level: Level(\n#13 8.146         Trace,\n#13 8.146     ),\n#13 8.146     module_path: \"tracing_mock::field\",\n#13 8.146     location: tracing-mock/src/field.rs:610,\n#13 8.146     fields: {fake_field},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.146     kind: Kind(EVENT),\n#13 8.146 }\n#13 8.146 [self_expr_field] enabled -> true\n#13 8.146 [self_expr_field] register_callsite: Metadata {\n#13 8.146     name: \"self_expr_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:46,\n#13 8.146     fields: {my_field},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [self_expr_field] enabled: Metadata {\n#13 8.146     name: \"self_expr_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:46,\n#13 8.146     fields: {my_field},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [self_expr_field] enabled -> true\n#13 8.146 [self_expr_field] new_span: name=\"self_expr_field\"; target=\"fields\"; id=Id(1);\n#13 8.146 [self_expr_field] enter: self_expr_field; id=Id(1);\n#13 8.146 [self_expr_field] exit: self_expr_field; id=Id(1);\n#13 8.146 [self_expr_field] drop_span: self_expr_field; id=Id(1); refs=1;\n#13 8.146 ok\n#13 8.146 test string_field ... [string_field] register_callsite: Metadata {\n#13 8.146     name: \"self_expr_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:46,\n#13 8.146     fields: {my_field},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled: Metadata {\n#13 8.146     name: \"self_expr_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:46,\n#13 8.146     fields: {my_field},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled -> true\n#13 8.146 [string_field] register_callsite: Metadata {\n#13 8.146     name: \"fn_param\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:8,\n#13 8.146     fields: {param, foo},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled: Metadata {\n#13 8.146     name: \"fn_param\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:8,\n#13 8.146     fields: {param, foo},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled -> true\n#13 8.146 [string_field] register_callsite: Metadata {\n#13 8.146     name: \"fn_keyword_ident_in_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:37,\n#13 8.146     fields: {keywords.impl.type.fn},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled: Metadata {\n#13 8.146     name: \"fn_keyword_ident_in_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:37,\n#13 8.146     fields: {keywords.impl.type.fn},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled -> true\n#13 8.146 [string_field] register_callsite: Metadata {\n#13 8.146     name: \"fn_no_param\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:5,\n#13 8.146     fields: {foo, dsa, num},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled: Metadata {\n#13 8.146     name: \"fn_no_param\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:5,\n#13 8.146     fields: {foo, dsa, num},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled -> true\n#13 8.146 [string_field] register_callsite: Metadata {\n#13 8.146     name: \"fn_expr_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:14,\n#13 8.146     fields: {s, len},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled: Metadata {\n#13 8.146     name: \"fn_expr_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:14,\n#13 8.146     fields: {s, len},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled -> true\n#13 8.146 [string_field] register_callsite: Metadata {\n#13 8.146     name: \"fn_empty_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:11,\n#13 8.146     fields: {foo, empty},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled: Metadata {\n#13 8.146     name: \"fn_empty_field\",\n#13 8.146     target: \"fields\",\n#13 8.146     level: Level(\n#13 8.146         Info,\n#13 8.146     ),\n#13 8.146     module_path: \"fields\",\n#13 8.146     location: tracing-attributes/tests/fields.rs:11,\n#13 8.146     fields: {foo, empty},\n#13 8.146     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.146     kind: Kind(SPAN),\n#13 8.146 }\n#13 8.146 [string_field] enabled -> true\n#13 8.147 [string_field] register_callsite: Metadata {\n#13 8.147     name: \"fn_clashy_expr_field2\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:27,\n#13 8.147     fields: {s},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [string_field] enabled: Metadata {\n#13 8.147     name: \"fn_clashy_expr_field2\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:27,\n#13 8.147     fields: {s},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [string_field] enabled -> true\n#13 8.147 [string_field] register_callsite: Metadata {\n#13 8.147     name: \"fn_clashy_expr_field\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:22,\n#13 8.147     fields: {s, s.len},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [string_field] enabled: Metadata {\n#13 8.147     name: \"fn_clashy_expr_field\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:22,\n#13 8.147     fields: {s, s.len},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [string_field] enabled -> true\n#13 8.147 [string_field] register_callsite: Metadata {\n#13 8.147     name: \"fake\",\n#13 8.147     target: \"tracing_mock::field\",\n#13 8.147     level: Level(\n#13 8.147         Trace,\n#13 8.147     ),\n#13 8.147     module_path: \"tracing_mock::field\",\n#13 8.147     location: tracing-mock/src/field.rs:610,\n#13 8.147     fields: {fake_field},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.147     kind: Kind(EVENT),\n#13 8.147 }\n#13 8.147 [string_field] enabled: Metadata {\n#13 8.147     name: \"fake\",\n#13 8.147     target: \"tracing_mock::field\",\n#13 8.147     level: Level(\n#13 8.147         Trace,\n#13 8.147     ),\n#13 8.147     module_path: \"tracing_mock::field\",\n#13 8.147     location: tracing-mock/src/field.rs:610,\n#13 8.147     fields: {fake_field},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.147     kind: Kind(EVENT),\n#13 8.147 }\n#13 8.147 [string_field] enabled -> true\n#13 8.147 [string_field] register_callsite: Metadata {\n#13 8.147     name: \"fn_string\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:32,\n#13 8.147     fields: {s},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [string_field] enabled: Metadata {\n#13 8.147     name: \"fn_string\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:32,\n#13 8.147     fields: {s},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [string_field] enabled -> true\n#13 8.147 [string_field] new_span: name=\"fn_string\"; target=\"fields\"; id=Id(1);\n#13 8.147 [string_field] enter: fn_string; id=Id(1);\n#13 8.147 [string_field] exit: fn_string; id=Id(1);\n#13 8.147 [string_field] drop_span: fn_string; id=Id(1); refs=1;\n#13 8.147 ok\n#13 8.147 test two_expr_fields ... [two_expr_fields] register_callsite: Metadata {\n#13 8.147     name: \"fn_string\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:32,\n#13 8.147     fields: {s},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [two_expr_fields] enabled: Metadata {\n#13 8.147     name: \"fn_string\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:32,\n#13 8.147     fields: {s},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [two_expr_fields] enabled -> true\n#13 8.147 [two_expr_fields] register_callsite: Metadata {\n#13 8.147     name: \"self_expr_field\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:46,\n#13 8.147     fields: {my_field},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [two_expr_fields] enabled: Metadata {\n#13 8.147     name: \"self_expr_field\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:46,\n#13 8.147     fields: {my_field},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [two_expr_fields] enabled -> true\n#13 8.147 [two_expr_fields] register_callsite: Metadata {\n#13 8.147     name: \"fn_param\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:8,\n#13 8.147     fields: {param, foo},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [two_expr_fields] enabled: Metadata {\n#13 8.147     name: \"fn_param\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:8,\n#13 8.147     fields: {param, foo},\n#13 8.147     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.147     kind: Kind(SPAN),\n#13 8.147 }\n#13 8.147 [two_expr_fields] enabled -> true\n#13 8.147 [two_expr_fields] register_callsite: Metadata {\n#13 8.147     name: \"fn_keyword_ident_in_field\",\n#13 8.147     target: \"fields\",\n#13 8.147     level: Level(\n#13 8.147         Info,\n#13 8.147     ),\n#13 8.147     module_path: \"fields\",\n#13 8.147     location: tracing-attributes/tests/fields.rs:37,\n#13 8.148     fields: {keywords.impl.type.fn},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_keyword_ident_in_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:37,\n#13 8.148     fields: {keywords.impl.type.fn},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fn_no_param\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:5,\n#13 8.148     fields: {foo, dsa, num},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_no_param\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:5,\n#13 8.148     fields: {foo, dsa, num},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fn_expr_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:14,\n#13 8.148     fields: {s, len},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_expr_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:14,\n#13 8.148     fields: {s, len},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fn_empty_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:11,\n#13 8.148     fields: {foo, empty},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_empty_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:11,\n#13 8.148     fields: {foo, empty},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fn_clashy_expr_field2\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:27,\n#13 8.148     fields: {s},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_clashy_expr_field2\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:27,\n#13 8.148     fields: {s},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fn_clashy_expr_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:22,\n#13 8.148     fields: {s, s.len},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_clashy_expr_field\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:22,\n#13 8.148     fields: {s, s.len},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fake\",\n#13 8.148     target: \"tracing_mock::field\",\n#13 8.148     level: Level(\n#13 8.148         Trace,\n#13 8.148     ),\n#13 8.148     module_path: \"tracing_mock::field\",\n#13 8.148     location: tracing-mock/src/field.rs:610,\n#13 8.148     fields: {fake_field},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.148     kind: Kind(EVENT),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fake\",\n#13 8.148     target: \"tracing_mock::field\",\n#13 8.148     level: Level(\n#13 8.148         Trace,\n#13 8.148     ),\n#13 8.148     module_path: \"tracing_mock::field\",\n#13 8.148     location: tracing-mock/src/field.rs:610,\n#13 8.148     fields: {fake_field},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 8.148     kind: Kind(EVENT),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] register_callsite: Metadata {\n#13 8.148     name: \"fn_two_expr_fields\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:17,\n#13 8.148     fields: {s, s.len, s.is_empty},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10070, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled: Metadata {\n#13 8.148     name: \"fn_two_expr_fields\",\n#13 8.148     target: \"fields\",\n#13 8.148     level: Level(\n#13 8.148         Info,\n#13 8.148     ),\n#13 8.148     module_path: \"fields\",\n#13 8.148     location: tracing-attributes/tests/fields.rs:17,\n#13 8.148     fields: {s, s.len, s.is_empty},\n#13 8.148     callsite: Identifier(Pointer { addr: 0x55e4b3b10070, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 8.148     kind: Kind(SPAN),\n#13 8.148 }\n#13 8.148 [two_expr_fields] enabled -> true\n#13 8.148 [two_expr_fields] new_span: name=\"fn_two_expr_fields\"; target=\"fields\"; id=Id(1);\n#13 8.148 [two_expr_fields] enter: fn_two_expr_fields; id=Id(1);\n#13 8.148 [two_expr_fields] exit: fn_two_expr_fields; id=Id(1);\n#13 8.148 [two_expr_fields] drop_span: fn_two_expr_fields; id=Id(1); refs=1;\n#13 8.148 ok\n#13 8.148 \n#13 8.148 test result: ok. 9 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 8.148 \n#13 8.149      Running tests/follows_from.rs (target/debug/deps/follows_from-d88bbf60bf2e3ba0)\n#13 8.151 \n#13 8.151 running 3 tests\n#13 8.151 test follows_from_async_test ... [follows_from_async_test] register_callsite: Metadata {\n#13 8.151     name: \"cause_a\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Trace,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:70,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled: Metadata {\n#13 8.151     name: \"cause_a\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Trace,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:70,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled -> true\n#13 8.151 [follows_from_async_test] new_span: name=\"cause_a\"; target=\"follows_from\"; id=Id(1);\n#13 8.151 [follows_from_async_test] register_callsite: Metadata {\n#13 8.151     name: \"cause_b\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Trace,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:71,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled: Metadata {\n#13 8.151     name: \"cause_b\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Trace,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:71,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled -> true\n#13 8.151 [follows_from_async_test] new_span: name=\"cause_b\"; target=\"follows_from\"; id=Id(2);\n#13 8.151 [follows_from_async_test] register_callsite: Metadata {\n#13 8.151     name: \"cause_c\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Trace,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:72,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled: Metadata {\n#13 8.151     name: \"cause_c\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Trace,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:72,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled -> true\n#13 8.151 [follows_from_async_test] new_span: name=\"cause_c\"; target=\"follows_from\"; id=Id(3);\n#13 8.151 [follows_from_async_test] register_callsite: Metadata {\n#13 8.151     name: \"with_follows_from_async\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Info,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:9,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled: Metadata {\n#13 8.151     name: \"with_follows_from_async\",\n#13 8.151     target: \"follows_from\",\n#13 8.151     level: Level(\n#13 8.151         Info,\n#13 8.151     ),\n#13 8.151     module_path: \"follows_from\",\n#13 8.151     location: tracing-attributes/tests/follows_from.rs:9,\n#13 8.151     fields: {},\n#13 8.151     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.151     kind: Kind(SPAN),\n#13 8.151 }\n#13 8.151 [follows_from_async_test] enabled -> true\n#13 8.151 [follows_from_async_test] new_span: name=\"with_follows_from_async\"; target=\"follows_from\"; id=Id(4);\n#13 8.151 [follows_from_async_test] record_follows_from: with_follows_from_async (id=Id(4)) follows cause_a (id=Id(1))\n#13 8.151 [follows_from_async_test] record_follows_from: with_follows_from_async (id=Id(4)) follows cause_b (id=Id(2))\n#13 8.151 [follows_from_async_test] record_follows_from: with_follows_from_async (id=Id(4)) follows cause_c (id=Id(3))\n#13 8.151 [follows_from_async_test] enter: with_follows_from_async; id=Id(4);\n#13 8.151 [follows_from_async_test] exit: with_follows_from_async; id=Id(4);\n#13 8.151 [follows_from_async_test] enter: with_follows_from_async; id=Id(4);\n#13 8.151 [follows_from_async_test] exit: with_follows_from_async; id=Id(4);\n#13 8.152 [follows_from_async_test] drop_span: with_follows_from_async; id=Id(4); refs=1;\n#13 8.152 [follows_from_async_test] drop_span: cause_a; id=Id(1); refs=1;\n#13 8.152 [follows_from_async_test] drop_span: cause_b; id=Id(2); refs=1;\n#13 8.152 [follows_from_async_test] drop_span: cause_c; id=Id(3); refs=1;\n#13 8.152 ok\n#13 8.152 test follows_from_current_test ... [follows_from_current_test] register_callsite: Metadata {\n#13 8.152     name: \"with_follows_from_async\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Info,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:9,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled: Metadata {\n#13 8.152     name: \"with_follows_from_async\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Info,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:9,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled -> true\n#13 8.152 [follows_from_current_test] register_callsite: Metadata {\n#13 8.152     name: \"cause_c\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:72,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled: Metadata {\n#13 8.152     name: \"cause_c\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:72,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled -> true\n#13 8.152 [follows_from_current_test] register_callsite: Metadata {\n#13 8.152     name: \"cause_b\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:71,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled: Metadata {\n#13 8.152     name: \"cause_b\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:71,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled -> true\n#13 8.152 [follows_from_current_test] register_callsite: Metadata {\n#13 8.152     name: \"cause_a\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:70,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled: Metadata {\n#13 8.152     name: \"cause_a\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:70,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled -> true\n#13 8.152 [follows_from_current_test] register_callsite: Metadata {\n#13 8.152     name: \"cause\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:98,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled: Metadata {\n#13 8.152     name: \"cause\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Trace,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:98,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled -> true\n#13 8.152 [follows_from_current_test] new_span: name=\"cause\"; target=\"follows_from\"; id=Id(1);\n#13 8.152 [follows_from_current_test] enter: cause; id=Id(1);\n#13 8.152 [follows_from_current_test] register_callsite: Metadata {\n#13 8.152     name: \"follows_from_current\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Info,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:12,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled: Metadata {\n#13 8.152     name: \"follows_from_current\",\n#13 8.152     target: \"follows_from\",\n#13 8.152     level: Level(\n#13 8.152         Info,\n#13 8.152     ),\n#13 8.152     module_path: \"follows_from\",\n#13 8.152     location: tracing-attributes/tests/follows_from.rs:12,\n#13 8.152     fields: {},\n#13 8.152     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.152     kind: Kind(SPAN),\n#13 8.152 }\n#13 8.152 [follows_from_current_test] enabled -> true\n#13 8.152 [follows_from_current_test] new_span: name=\"follows_from_current\"; target=\"follows_from\"; id=Id(2);\n#13 8.152 [follows_from_current_test] clone_span: cause; id=Id(1); refs=1;\n#13 8.152 [follows_from_current_test] record_follows_from: follows_from_current (id=Id(2)) follows cause (id=Id(1))\n#13 8.152 [follows_from_current_test] drop_span: cause; id=Id(1); refs=2;\n#13 8.152 [follows_from_current_test] enter: follows_from_current; id=Id(2);\n#13 8.152 [follows_from_current_test] exit: follows_from_current; id=Id(2);\n#13 8.152 [follows_from_current_test] drop_span: follows_from_current; id=Id(2); refs=1;\n#13 8.152 [follows_from_current_test] exit: cause; id=Id(1);\n#13 8.152 [follows_from_current_test] drop_span: cause; id=Id(1); refs=1;\n#13 8.153 ok\n#13 8.153 test follows_from_sync_test ... [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"follows_from_current\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Info,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:12,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"follows_from_current\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Info,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:12,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:98,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:98,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"with_follows_from_async\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Info,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:9,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"with_follows_from_async\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Info,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:9,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause_c\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:72,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause_c\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:72,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause_b\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:71,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause_b\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:71,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause_a\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:70,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause_a\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:70,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause_a\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:36,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a058, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause_a\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:36,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a058, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] new_span: name=\"cause_a\"; target=\"follows_from\"; id=Id(1);\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause_b\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:37,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a070, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause_b\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:37,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a070, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled -> true\n#13 8.153 [follows_from_sync_test] new_span: name=\"cause_b\"; target=\"follows_from\"; id=Id(2);\n#13 8.153 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.153     name: \"cause_c\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.153     module_path: \"follows_from\",\n#13 8.153     location: tracing-attributes/tests/follows_from.rs:38,\n#13 8.153     fields: {},\n#13 8.153     callsite: Identifier(Pointer { addr: 0x558978e0a088, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.153     kind: Kind(SPAN),\n#13 8.153 }\n#13 8.153 [follows_from_sync_test] enabled: Metadata {\n#13 8.153     name: \"cause_c\",\n#13 8.153     target: \"follows_from\",\n#13 8.153     level: Level(\n#13 8.153         Trace,\n#13 8.153     ),\n#13 8.154     module_path: \"follows_from\",\n#13 8.154     location: tracing-attributes/tests/follows_from.rs:38,\n#13 8.154     fields: {},\n#13 8.154     callsite: Identifier(Pointer { addr: 0x558978e0a088, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.154     kind: Kind(SPAN),\n#13 8.154 }\n#13 8.154 [follows_from_sync_test] enabled -> true\n#13 8.154 [follows_from_sync_test] new_span: name=\"cause_c\"; target=\"follows_from\"; id=Id(3);\n#13 8.154 [follows_from_sync_test] register_callsite: Metadata {\n#13 8.154     name: \"with_follows_from_sync\",\n#13 8.154     target: \"follows_from\",\n#13 8.154     level: Level(\n#13 8.154         Info,\n#13 8.154     ),\n#13 8.154     module_path: \"follows_from\",\n#13 8.154     location: tracing-attributes/tests/follows_from.rs:6,\n#13 8.154     fields: {},\n#13 8.154     callsite: Identifier(Pointer { addr: 0x558978e0a010, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.154     kind: Kind(SPAN),\n#13 8.154 }\n#13 8.154 [follows_from_sync_test] enabled: Metadata {\n#13 8.154     name: \"with_follows_from_sync\",\n#13 8.154     target: \"follows_from\",\n#13 8.154     level: Level(\n#13 8.154         Info,\n#13 8.154     ),\n#13 8.154     module_path: \"follows_from\",\n#13 8.154     location: tracing-attributes/tests/follows_from.rs:6,\n#13 8.154     fields: {},\n#13 8.154     callsite: Identifier(Pointer { addr: 0x558978e0a010, metadata: DynMetadata(0x558978dfa860) }),\n#13 8.154     kind: Kind(SPAN),\n#13 8.154 }\n#13 8.154 [follows_from_sync_test] enabled -> true\n#13 8.154 [follows_from_sync_test] new_span: name=\"with_follows_from_sync\"; target=\"follows_from\"; id=Id(4);\n#13 8.154 [follows_from_sync_test] record_follows_from: with_follows_from_sync (id=Id(4)) follows cause_a (id=Id(1))\n#13 8.154 [follows_from_sync_test] record_follows_from: with_follows_from_sync (id=Id(4)) follows cause_b (id=Id(2))\n#13 8.154 [follows_from_sync_test] record_follows_from: with_follows_from_sync (id=Id(4)) follows cause_c (id=Id(3))\n#13 8.154 [follows_from_sync_test] enter: with_follows_from_sync; id=Id(4);\n#13 8.154 [follows_from_sync_test] exit: with_follows_from_sync; id=Id(4);\n#13 8.154 [follows_from_sync_test] drop_span: with_follows_from_sync; id=Id(4); refs=1;\n#13 8.154 [follows_from_sync_test] drop_span: cause_a; id=Id(1); refs=1;\n#13 8.154 [follows_from_sync_test] drop_span: cause_b; id=Id(2); refs=1;\n#13 8.154 [follows_from_sync_test] drop_span: cause_c; id=Id(3); refs=1;\n#13 8.154 ok\n#13 8.154 \n#13 8.154 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 8.154 \n#13 8.154      Running tests/instrument.rs (target/debug/deps/instrument-9d49f534aeecfb87)\n#13 8.156 \n#13 8.156 running 10 tests\n#13 8.156 test fields ... [fields] register_callsite: Metadata {\n#13 8.156     name: \"fake\",\n#13 8.156     target: \"tracing_mock::field\",\n#13 8.156     level: Level(\n#13 8.156         Trace,\n#13 8.156     ),\n#13 8.156     module_path: \"tracing_mock::field\",\n#13 8.156     location: tracing-mock/src/field.rs:610,\n#13 8.156     fields: {fake_field},\n#13 8.156     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 8.156     kind: Kind(EVENT),\n#13 8.156 }\n#13 8.156 [fields] enabled: Metadata {\n#13 8.156     name: \"fake\",\n#13 8.156     target: \"tracing_mock::field\",\n#13 8.156     level: Level(\n#13 8.156         Trace,\n#13 8.156     ),\n#13 8.156     module_path: \"tracing_mock::field\",\n#13 8.156     location: tracing-mock/src/field.rs:610,\n#13 8.156     fields: {fake_field},\n#13 8.156     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 8.156     kind: Kind(EVENT),\n#13 8.156 }\n#13 8.156 [fields] enabled -> true\n#13 8.156 [fields] register_callsite: Metadata {\n#13 8.156     name: \"my_fn\",\n#13 8.156     target: \"my_target\",\n#13 8.156     level: Level(\n#13 8.156         Debug,\n#13 8.156     ),\n#13 8.156     module_path: \"instrument\",\n#13 8.156     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.156     fields: {arg1, arg2, arg3},\n#13 8.156     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.156     kind: Kind(SPAN),\n#13 8.156 }\n#13 8.156 [fields] enabled: Metadata {\n#13 8.156     name: \"my_fn\",\n#13 8.156     target: \"my_target\",\n#13 8.156     level: Level(\n#13 8.156         Debug,\n#13 8.156     ),\n#13 8.156     module_path: \"instrument\",\n#13 8.156     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.156     fields: {arg1, arg2, arg3},\n#13 8.156     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.156     kind: Kind(SPAN),\n#13 8.156 }\n#13 8.156 [fields] enabled -> true\n#13 8.156 [fields] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(1);\n#13 8.156 [fields] enter: my_fn; id=Id(1);\n#13 8.156 [fields] exit: my_fn; id=Id(1);\n#13 8.156 [fields] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.156 [fields] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(2);\n#13 8.156 [fields] enter: my_fn; id=Id(2);\n#13 8.156 [fields] exit: my_fn; id=Id(2);\n#13 8.156 [fields] drop_span: my_fn; id=Id(2); refs=1;\n#13 8.156 ok\n#13 8.156 test generics ... [generics] register_callsite: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"my_target\",\n#13 8.157     level: Level(\n#13 8.157         Debug,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.157     fields: {arg1, arg2, arg3},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [generics] enabled: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"my_target\",\n#13 8.157     level: Level(\n#13 8.157         Debug,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.157     fields: {arg1, arg2, arg3},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [generics] enabled -> true\n#13 8.157 [generics] register_callsite: Metadata {\n#13 8.157     name: \"fake\",\n#13 8.157     target: \"tracing_mock::field\",\n#13 8.157     level: Level(\n#13 8.157         Trace,\n#13 8.157     ),\n#13 8.157     module_path: \"tracing_mock::field\",\n#13 8.157     location: tracing-mock/src/field.rs:610,\n#13 8.157     fields: {fake_field},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 8.157     kind: Kind(EVENT),\n#13 8.157 }\n#13 8.157 [generics] enabled: Metadata {\n#13 8.157     name: \"fake\",\n#13 8.157     target: \"tracing_mock::field\",\n#13 8.157     level: Level(\n#13 8.157         Trace,\n#13 8.157     ),\n#13 8.157     module_path: \"tracing_mock::field\",\n#13 8.157     location: tracing-mock/src/field.rs:610,\n#13 8.157     fields: {fake_field},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 8.157     kind: Kind(EVENT),\n#13 8.157 }\n#13 8.157 [generics] enabled -> true\n#13 8.157 [generics] register_callsite: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"instrument\",\n#13 8.157     level: Level(\n#13 8.157         Info,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:164,\n#13 8.157     fields: {arg1, arg2},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [generics] enabled: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"instrument\",\n#13 8.157     level: Level(\n#13 8.157         Info,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:164,\n#13 8.157     fields: {arg1, arg2},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [generics] enabled -> true\n#13 8.157 [generics] new_span: name=\"my_fn\"; target=\"instrument\"; id=Id(1);\n#13 8.157 [generics] enter: my_fn; id=Id(1);\n#13 8.157 [generics] exit: my_fn; id=Id(1);\n#13 8.157 [generics] drop_span: my_fn; id=Id(1); refs=1;\n#13 8.157 ok\n#13 8.157 test impl_trait_return_type ... [impl_trait_return_type] register_callsite: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"instrument\",\n#13 8.157     level: Level(\n#13 8.157         Info,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:164,\n#13 8.157     fields: {arg1, arg2},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"instrument\",\n#13 8.157     level: Level(\n#13 8.157         Info,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:164,\n#13 8.157     fields: {arg1, arg2},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled -> true\n#13 8.157 [impl_trait_return_type] register_callsite: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"my_target\",\n#13 8.157     level: Level(\n#13 8.157         Debug,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.157     fields: {arg1, arg2, arg3},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled: Metadata {\n#13 8.157     name: \"my_fn\",\n#13 8.157     target: \"my_target\",\n#13 8.157     level: Level(\n#13 8.157         Debug,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.157     fields: {arg1, arg2, arg3},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled -> true\n#13 8.157 [impl_trait_return_type] register_callsite: Metadata {\n#13 8.157     name: \"fake\",\n#13 8.157     target: \"tracing_mock::field\",\n#13 8.157     level: Level(\n#13 8.157         Trace,\n#13 8.157     ),\n#13 8.157     module_path: \"tracing_mock::field\",\n#13 8.157     location: tracing-mock/src/field.rs:610,\n#13 8.157     fields: {fake_field},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 8.157     kind: Kind(EVENT),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled: Metadata {\n#13 8.157     name: \"fake\",\n#13 8.157     target: \"tracing_mock::field\",\n#13 8.157     level: Level(\n#13 8.157         Trace,\n#13 8.157     ),\n#13 8.157     module_path: \"tracing_mock::field\",\n#13 8.157     location: tracing-mock/src/field.rs:610,\n#13 8.157     fields: {fake_field},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 8.157     kind: Kind(EVENT),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled -> true\n#13 8.157 [impl_trait_return_type] register_callsite: Metadata {\n#13 8.157     name: \"returns_impl_trait\",\n#13 8.157     target: \"instrument\",\n#13 8.157     level: Level(\n#13 8.157         Info,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:230,\n#13 8.157     fields: {x},\n#13 8.157     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.157     kind: Kind(SPAN),\n#13 8.157 }\n#13 8.157 [impl_trait_return_type] enabled: Metadata {\n#13 8.157     name: \"returns_impl_trait\",\n#13 8.157     target: \"instrument\",\n#13 8.157     level: Level(\n#13 8.157         Info,\n#13 8.157     ),\n#13 8.157     module_path: \"instrument\",\n#13 8.157     location: tracing-attributes/tests/instrument.rs:230,\n#13 8.157     fields: {x},\n#13 8.158     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.158     kind: Kind(SPAN),\n#13 8.158 }\n#13 8.158 [impl_trait_return_type] enabled -> true\n#13 8.158 [impl_trait_return_type] new_span: name=\"returns_impl_trait\"; target=\"instrument\"; id=Id(1);\n#13 8.158 [impl_trait_return_type] enter: returns_impl_trait; id=Id(1);\n#13 8.158 [impl_trait_return_type] exit: returns_impl_trait; id=Id(1);\n#13 8.158 [impl_trait_return_type] drop_span: returns_impl_trait; id=Id(1); refs=1;\n#13 8.158 ok\n#13 8.158 test methods ... [methods] register_callsite: Metadata {\n#13 8.158     name: \"returns_impl_trait\",\n#13 8.158     target: \"instrument\",\n#13 8.158     level: Level(\n#13 8.158         Info,\n#13 8.158     ),\n#13 8.158     module_path: \"instrument\",\n#13 8.158     location: tracing-attributes/tests/instrument.rs:230,\n#13 8.158     fields: {x},\n#13 8.158     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.158     kind: Kind(SPAN),\n#13 8.158 }\n#13 8.158 [methods] enabled: Metadata {\n#13 8.158     name: \"returns_impl_trait\",\n#13 8.158     target: \"instrument\",\n#13 8.158     level: Level(\n#13 8.158         Info,\n#13 8.158     ),\n#13 8.158     module_path: \"instrument\",\n#13 8.158     location: tracing-attributes/tests/instrument.rs:230,\n#13 8.158     fields: {x},\n#13 8.158     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.158     kind: Kind(SPAN),\n#13 8.158 }\n#13 8.158 [methods] enabled -> true\n#13 8.158 [methods] register_callsite: Metadata {\n#13 8.158     name: \"my_fn\",\n#13 8.158     target: \"instrument\",\n#13 8.158     level: Level(\n#13 8.158         Info,\n#13 8.158     ),\n#13 8.158     module_path: \"instrument\",\n#13 8.158     location: tracing-attributes/tests/instrument.rs:164,\n#13 8.158     fields: {arg1, arg2},\n#13 8.158     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.158     kind: Kind(SPAN),\n#13 8.158 }\n#13 8.158 [methods] enabled: Metadata {\n#13 8.158     name: \"my_fn\",\n#13 8.158     target: \"instrument\",\n#13 8.158     level: Level(\n#13 8.158         Info,\n#13 8.158     ),\n#13 8.158     module_path: \"instrument\",\n#13 8.158     location: tracing-attributes/tests/instrument.rs:164,\n#13 8.158     fields: {arg1, arg2},\n#13 8.158     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.158     kind: Kind(SPAN),\n#13 8.158 }\n#13 8.158 [methods] enabled -> true\n#13 8.158 [methods] register_callsite: Metadata {\n#13 8.158     name: \"my_fn\",\n#13 8.158     target: \"my_target\",\n#13 8.158     level: Level(\n#13 8.158         Debug,\n#13 8.158     ),\n#13 8.158     module_path: \"instrument\",\n#13 8.158     location: tracing-attributes/tests/instrument.rs:54,\n#13 8.158     fields: {arg1, arg2, arg3},\n#13 8.158     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 8.158     kind: Kind(SPAN),\n#13 8.158 }\n#13 8.158 [methods] enabled: Metadata {\n#13 8.158     name: \"my_fn\",\n#13 8.158     target: \"my_target\",\n#13 8.158     level: Level(\n#13 8.158         Debug,\n#13 8.158     ),\n#13 8.158 \n#13 8.158 [output clipped, log limit 200KiB/s reached]\n#13 8.164      Running tests/levels.rs (target/debug/deps/levels-218a1349cbf08bfb)\n#13 8.169      Running tests/names.rs (target/debug/deps/names-babb4b7a0c035795)\n#13 8.173      Running tests/parents.rs (target/debug/deps/parents-f28b3e589cd2c881)\n#13 8.177      Running tests/ret.rs (target/debug/deps/ret-3bf3c0720fd12a00)\n#13 8.195      Running tests/targets.rs (target/debug/deps/targets-97a17d23db869b34)\n#13 8.198      Running tests/ui.rs (target/debug/deps/ui-3221c9d7be663047)\n#13 8.276     Checking tracing-attributes-tests v0.0.0 (/workspace/target/tests/trybuild/tracing-attributes)\n#13 8.313     Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.07s\n#13 8.365 \n#13 8.365 \n#13 8.548 test tests/ui/fail/async_instrument.rs ... ok\n#13 8.548 test tests/ui/fail/const_instrument.rs ... ok\n#13 8.548 test tests/ui/fail/unused_instrumented_fn.rs ... ok\n#13 8.548 \n#13 8.548 \n#13 8.619    Compiling tracing-attributes-tests v0.0.0 (/workspace/target/tests/trybuild/tracing-attributes)\n#13 8.756     Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.17s\n#13 8.811 \n#13 8.811 \n#13 8.811 test tests/ui/pass/type_shadowing.rs ... ok\n#13 8.929 \n#13 8.929 WARNINGS:\n#13 8.929 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 8.929 warning: unused import: `Bar::*`\n#13 8.929   --> tests/ui/pass/type_shadowing.rs:14:9\n#13 8.929    |\n#13 8.929 14 |     use Bar::*;\n#13 8.929    |         ^^^^^^\n#13 8.929    |\n#13 8.929    = note: `#[warn(unused_imports)]` on by default\n#13 8.929 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 8.929 \n#13 8.929 STDERR:\n#13 8.929 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 8.929 warning: unused import: `Bar::*`\n#13 8.929   --> /workspace/tracing-attributes/tests/ui/pass/type_shadowing.rs:14:9\n#13 8.929    |\n#13 8.929 14 |     use Bar::*;\n#13 8.929    |         ^^^^^^\n#13 8.929    |\n#13 8.929    = note: `#[warn(unused_imports)]` on by default\n#13 8.929 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n#13 8.929 \n#13 8.929 \n#13 8.929 \n#13 8.929      Running unittests src/lib.rs (target/debug/deps/tracing_core-734d01840db1e916)\n#13 8.936      Running tests/dispatch.rs (target/debug/deps/dispatch-75c9d1a443927b39)\n#13 8.938      Running tests/global_dispatch.rs (target/debug/deps/global_dispatch-e28841795b95072c)\n#13 8.941      Running tests/local_dispatch_before_init.rs (target/debug/deps/local_dispatch_before_init-de2b7849bbc31f2a)\n#13 8.943 [tracing-core/tests/local_dispatch_before_init.rs:15:47] current = Dispatch::Global(\n#13 8.943     Pointer { addr: 0x560a2d94bb76, metadata: DynMetadata(0x560a2d972510) },\n#13 8.943 )\n#13 8.943 [tracing-core/tests/local_dispatch_before_init.rs:25:21] current = Dispatch::Scoped(\n#13 8.943     0x7f051b18a610,\n#13 8.943 )\n#13 8.943 [tracing-core/tests/local_dispatch_before_init.rs:39:13] current = Dispatch::Global(\n#13 8.943     Pointer { addr: 0x7f0514000d50, metadata: DynMetadata(0x560a2d96bce0) },\n#13 8.943 )\n#13 8.943      Running tests/macros.rs (target/debug/deps/macros-1d65857f050f4003)\n#13 8.945      Running tests/missed_register_callsite.rs (target/debug/deps/missed_register_callsite-6eed3a01502a01bf)\n#13 8.958      Running unittests src/lib.rs (target/debug/deps/tracing_error-23aeb8e58b602ab1)\n#13 8.960 [tracing-error/src/backtrace.rs:298:13] &span_trace = SpanTrace []\n#13 8.961 [tracing-error/src/backtrace.rs:285:13] &span_trace = SpanTrace [\n#13 8.961     { target: \"tracing_error::backtrace::tests\", name: \"test span\", file: \"tracing-error/src/backtrace.rs\", line: 280 },\n#13 8.961 ]\n#13 8.961 [tracing-error/src/backtrace.rs:314:13] &span_trace = SpanTrace []\n#13 8.962      Running unittests src/lib.rs (target/debug/deps/tracing_flame-35f2bd68cbb6e0db)\n#13 8.964      Running tests/collapsed.rs (target/debug/deps/collapsed-107fe0355326d447)\n#13 9.582 ok\n#13 9.582 \n#13 9.582 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.62s\n#13 9.582 \n#13 9.582      Running tests/concurrent.rs (target/debug/deps/concurrent-d30dc24ba1fefae1)\n#13 9.584 \n#13 9.584 running 1 test\n#13 9.584 test capture_supported ... ThreadId(2)-capture_supported 422869\n#13 9.716 ThreadId(2)-capture_supported;concurrent::main 33529\n#13 9.716 ThreadId(3);concurrent::main;concurrent::outer 10887226\n#13 9.716 ThreadId(2)-capture_supported;concurrent::main;concurrent::outer 30415404\n#13 9.716 ThreadId(3);concurrent::main;concurrent::outer;concurrent::Inner 50182185\n#13 9.716 \n#13 9.716 ok\n#13 9.716 \n#13 9.716 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.13s\n#13 9.716 \n#13 9.716      Running unittests src/lib.rs (target/debug/deps/tracing_futures-2cbbccacd703eaf2)\n#13 9.718 \n#13 9.718 running 3 tests\n#13 9.718 test tests::futures_01_tests::future_enter_exit_is_reasonable ... [tests::futures_01_tests::future_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.718     name: \"foo\",\n#13 9.718     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.718     level: Level(\n#13 9.718         Trace,\n#13 9.718     ),\n#13 9.718     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.718     location: tracing-futures/src/lib.rs:650,\n#13 9.718     fields: {},\n#13 9.718     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.718     kind: Kind(SPAN),\n#13 9.718 }\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.718     name: \"foo\",\n#13 9.718     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.718     level: Level(\n#13 9.718         Trace,\n#13 9.718     ),\n#13 9.718     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.718     location: tracing-futures/src/lib.rs:650,\n#13 9.718     fields: {},\n#13 9.718     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.718     kind: Kind(SPAN),\n#13 9.718 }\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled -> true\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.718 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 9.719 ok\n#13 9.719 test tests::futures_01_tests::future_error_ends_span ... [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.719     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     level: Level(\n#13 9.719         Trace,\n#13 9.719     ),\n#13 9.719     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     location: tracing-futures/src/lib.rs:650,\n#13 9.719     fields: {},\n#13 9.719     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.719     kind: Kind(SPAN),\n#13 9.719 }\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.719     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     level: Level(\n#13 9.719         Trace,\n#13 9.719     ),\n#13 9.719     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     location: tracing-futures/src/lib.rs:650,\n#13 9.719     fields: {},\n#13 9.719     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.719     kind: Kind(SPAN),\n#13 9.719 }\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.719     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     level: Level(\n#13 9.719         Trace,\n#13 9.719     ),\n#13 9.719     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     location: tracing-futures/src/lib.rs:671,\n#13 9.719     fields: {},\n#13 9.719     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.719     kind: Kind(SPAN),\n#13 9.719 }\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.719     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     level: Level(\n#13 9.719         Trace,\n#13 9.719     ),\n#13 9.719     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     location: tracing-futures/src/lib.rs:671,\n#13 9.719     fields: {},\n#13 9.719     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.719     kind: Kind(SPAN),\n#13 9.719 }\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 9.719 [tests::futures_01_tests::future_error_ends_span] drop_span: foo; id=Id(1); refs=1;\n#13 9.719 ok\n#13 9.719 test tests::futures_01_tests::stream_enter_exit_is_reasonable ... [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.719     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     level: Level(\n#13 9.719         Trace,\n#13 9.719     ),\n#13 9.719     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     location: tracing-futures/src/lib.rs:671,\n#13 9.719     fields: {},\n#13 9.719     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.719     kind: Kind(SPAN),\n#13 9.719 }\n#13 9.719 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.719     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     level: Level(\n#13 9.719         Trace,\n#13 9.719     ),\n#13 9.719     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.719     location: tracing-futures/src/lib.rs:671,\n#13 9.719     fields: {},\n#13 9.719     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.719     kind: Kind(SPAN),\n#13 9.719 }\n#13 9.719 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 9.719 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.719     name: \"foo\",\n#13 9.720     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     level: Level(\n#13 9.720         Trace,\n#13 9.720     ),\n#13 9.720     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     location: tracing-futures/src/lib.rs:650,\n#13 9.720     fields: {},\n#13 9.720     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.720     kind: Kind(SPAN),\n#13 9.720 }\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.720     name: \"foo\",\n#13 9.720     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     level: Level(\n#13 9.720         Trace,\n#13 9.720     ),\n#13 9.720     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     location: tracing-futures/src/lib.rs:650,\n#13 9.720     fields: {},\n#13 9.720     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.720     kind: Kind(SPAN),\n#13 9.720 }\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.720     name: \"foo\",\n#13 9.720     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     level: Level(\n#13 9.720         Trace,\n#13 9.720     ),\n#13 9.720     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     location: tracing-futures/src/lib.rs:696,\n#13 9.720     fields: {},\n#13 9.720     callsite: Identifier(Pointer { addr: 0x55af6cdb9040, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.720     kind: Kind(SPAN),\n#13 9.720 }\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.720     name: \"foo\",\n#13 9.720     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     level: Level(\n#13 9.720         Trace,\n#13 9.720     ),\n#13 9.720     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.720     location: tracing-futures/src/lib.rs:696,\n#13 9.720     fields: {},\n#13 9.720     callsite: Identifier(Pointer { addr: 0x55af6cdb9040, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.720     kind: Kind(SPAN),\n#13 9.720 }\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.720 [tests::futures_01_tests::stream_enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 9.720 ok\n#13 9.720 \n#13 9.720 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.720 \n#13 9.720      Running tests/std_future.rs (target/debug/deps/std_future-b9f19c63b694ba50)\n#13 9.722 \n#13 9.722 running 3 tests\n#13 9.722 test enter_exit_is_reasonable ... [enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.722     name: \"foo\",\n#13 9.722     target: \"std_future\",\n#13 9.722     level: Level(\n#13 9.722         Trace,\n#13 9.722     ),\n#13 9.722     module_path: \"std_future\",\n#13 9.722     location: tracing-futures/tests/std_future.rs:22,\n#13 9.722     fields: {},\n#13 9.722     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.722     kind: Kind(SPAN),\n#13 9.722 }\n#13 9.722 [enter_exit_is_reasonable] enabled: Metadata {\n#13 9.722     name: \"foo\",\n#13 9.722     target: \"std_future\",\n#13 9.722     level: Level(\n#13 9.722         Trace,\n#13 9.722     ),\n#13 9.722     module_path: \"std_future\",\n#13 9.722     location: tracing-futures/tests/std_future.rs:22,\n#13 9.722     fields: {},\n#13 9.722     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.722     kind: Kind(SPAN),\n#13 9.722 }\n#13 9.722 [enter_exit_is_reasonable] enabled -> true\n#13 9.722 [enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.722 [enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 9.723 ok\n#13 9.723 test error_ends_span ... [error_ends_span] register_callsite: Metadata {\n#13 9.723     name: \"foo\",\n#13 9.723     target: \"std_future\",\n#13 9.723     level: Level(\n#13 9.723         Trace,\n#13 9.723     ),\n#13 9.723     module_path: \"std_future\",\n#13 9.723     location: tracing-futures/tests/std_future.rs:22,\n#13 9.723   \n#13 9.723 [output clipped, log limit 200KiB/s reached]\n#13 9.724      Running unittests src/lib.rs (target/debug/deps/tracing_journald-87169daee49b2f8b)\n#13 9.727      Running tests/journal.rs (target/debug/deps/journal-85cc291f5ef386fd)\n#13 9.729 \n#13 9.729 thread 'custom_priorities' panicked at tracing-journald/tests/journal.rs:196:10:\n#13 9.729 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.729 stack backtrace:\n#13 9.754    0: __rustc::rust_begin_unwind\n#13 9.754              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.754    1: core::panicking::panic_fmt\n#13 9.754              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.754    2: core::result::unwrap_failed\n#13 9.754              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.754    3: core::result::Result<T,E>::unwrap\n#13 9.754              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.754    4: journal::custom_priorities\n#13 9.754              at ./tests/journal.rs:196:10\n#13 9.754    5: journal::custom_priorities::{{closure}}\n#13 9.754              at ./tests/journal.rs:181:23\n#13 9.754    6: core::ops::function::FnOnce::call_once\n#13 9.754              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.757    7: core::ops::function::FnOnce::call_once\n#13 9.757              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.757 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.757 \n#13 9.757 thread 'internal_null_byte' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.757 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.757 stack backtrace:\n#13 9.757    0: __rustc::rust_begin_unwind\n#13 9.757              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.757    1: core::panicking::panic_fmt\n#13 9.757              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.757    2: core::result::unwrap_failed\n#13 9.757              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.758    3: core::result::Result<T,E>::unwrap\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.758    4: journal::with_journald\n#13 9.758              at ./tests/journal.rs:22:14\n#13 9.758    5: journal::internal_null_byte\n#13 9.758              at ./tests/journal.rs:242:5\n#13 9.758    6: journal::internal_null_byte::{{closure}}\n#13 9.758              at ./tests/journal.rs:241:24\n#13 9.758    7: core::ops::function::FnOnce::call_once\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.758    8: core::ops::function::FnOnce::call_once\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.758 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.758 \n#13 9.758 thread 'journal_fields' panicked at tracing-journald/tests/journal.rs:288:10:\n#13 9.758 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.758 stack backtrace:\n#13 9.758    0: __rustc::rust_begin_unwind\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.758    1: core::panicking::panic_fmt\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.758    2: core::result::unwrap_failed\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.758    3: core::result::Result<T,E>::unwrap\n#13 9.758              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.758    4: journal::journal_fields\n#13 9.758              at ./tests/journal.rs:288:10\n#13 9.758    5: journal::journal_fields::{{closure}}\n#13 9.758              at ./tests/journal.rs:286:20\n#13 9.759    6: core::ops::function::FnOnce::call_once\n#13 9.759              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.759    7: core::ops::function::FnOnce::call_once\n#13 9.759              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.759 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.760 \n#13 9.760 thread 'large_message' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.760 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.760 stack backtrace:\n#13 9.760    0: __rustc::rust_begin_unwind\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.760    1: core::panicking::panic_fmt\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.760    2: core::result::unwrap_failed\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.760    3: core::result::Result<T,E>::unwrap\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.760    4: journal::with_journald\n#13 9.760              at ./tests/journal.rs:22:14\n#13 9.760    5: journal::large_message\n#13 9.760              at ./tests/journal.rs:254:5\n#13 9.760    6: journal::large_message::{{closure}}\n#13 9.760              at ./tests/journal.rs:252:19\n#13 9.760    7: core::ops::function::FnOnce::call_once\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.760    8: core::ops::function::FnOnce::call_once\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.760 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.760 \n#13 9.760 thread 'multiline_message' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.760 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.760 stack backtrace:\n#13 9.760    0: __rustc::rust_begin_unwind\n#13 9.760              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.761    1: core::panicking::panic_fmt\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.761    2: core::result::unwrap_failed\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.761    3: core::result::Result<T,E>::unwrap\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.761    4: journal::with_journald\n#13 9.761              at ./tests/journal.rs:22:14\n#13 9.761    5: journal::multiline_message\n#13 9.761              at ./tests/journal.rs:217:5\n#13 9.761    6: journal::multiline_message::{{closure}}\n#13 9.761              at ./tests/journal.rs:216:23\n#13 9.761    7: core::ops::function::FnOnce::call_once\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.761    8: core::ops::function::FnOnce::call_once\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.761 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.761 \n#13 9.761 thread 'multiline_message_trailing_newline' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.761 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.761 stack backtrace:\n#13 9.761    0: __rustc::rust_begin_unwind\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.761    1: core::panicking::panic_fmt\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.761    2: core::result::unwrap_failed\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.761    3: core::result::Result<T,E>::unwrap\n#13 9.761              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.761    4: journal::with_journald\n#13 9.761              at ./tests/journal.rs:22:14\n#13 9.761    5: journal::multiline_message_trailing_newline\n#13 9.761              at ./tests/journal.rs:228:5\n#13 9.762    6: journal::multiline_message_trailing_newline::{{closure}}\n#13 9.762              at ./tests/journal.rs:227:40\n#13 9.762    7: core::ops::function::FnOnce::call_once\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.762    8: core::ops::function::FnOnce::call_once\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.762 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.762 \n#13 9.762 thread 'multiple_spans_metadata' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.762 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.762 stack backtrace:\n#13 9.762    0: __rustc::rust_begin_unwind\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.762    1: core::panicking::panic_fmt\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.762    2: core::result::unwrap_failed\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.762    3: core::result::Result<T,E>::unwrap\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.762    4: journal::with_journald\n#13 9.762              at ./tests/journal.rs:22:14\n#13 9.762    5: journal::multiple_spans_metadata\n#13 9.762              at ./tests/journal.rs:333:5\n#13 9.762    6: journal::multiple_spans_metadata::{{closure}}\n#13 9.762              at ./tests/journal.rs:332:29\n#13 9.762    7: core::ops::function::FnOnce::call_once\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.762    8: core::ops::function::FnOnce::call_once\n#13 9.762              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.762 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.763 \n#13 9.763 thread 'simple_message' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.763 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.763 stack backtrace:\n#13 9.763    0: __rustc::rust_begin_unwind\n#13 9.763              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.763    1: core::panicking::panic_fmt\n#13 9.763              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.763    2: core::result::unwrap_failed\n#13 9.763              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.763    3: core::result::Result<T,E>::unwrap\n#13 9.763              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.763    4: journal::with_journald\n#13 9.763              at ./tests/journal.rs:22:14\n#13 9.763    5: journal::simple_message\n#13 9.763              at ./tests/journal.rs:171:5\n#13 9.763    6: journal::simple_message::{{closure}}\n#13 9.763              at ./tests/journal.rs:170:20\n#13 9.763    7: core::ops::function::FnOnce::call_once\n#13 9.763              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.763    8: core::ops::function::FnOnce::call_once\n#13 9.763              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.763 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.764 \n#13 9.764 thread 'simple_metadata' panicked at tracing-journald/tests/journal.rs:269:10:\n#13 9.764 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.764 stack backtrace:\n#13 9.764    0: __rustc::rust_begin_unwind\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.764    1: core::panicking::panic_fmt\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.764    2: core::result::unwrap_failed\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.764    3: core::result::Result<T,E>::unwrap\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.764    4: journal::simple_metadata\n#13 9.764              at ./tests/journal.rs:269:10\n#13 9.764    5: journal::simple_metadata::{{closure}}\n#13 9.764              at ./tests/journal.rs:267:21\n#13 9.764    6: core::ops::function::FnOnce::call_once\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.764    7: core::ops::function::FnOnce::call_once\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.764 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.764 \n#13 9.764 thread 'span_metadata' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.764 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.764 stack backtrace:\n#13 9.764    0: __rustc::rust_begin_unwind\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.764    1: core::panicking::panic_fmt\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.764    2: core::result::unwrap_failed\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.764    3: core::result::Result<T,E>::unwrap\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.764    4: journal::with_journald\n#13 9.764              at ./tests/journal.rs:22:14\n#13 9.764    5: journal::span_metadata\n#13 9.764              at ./tests/journal.rs:309:5\n#13 9.764    6: journal::span_metadata::{{closure}}\n#13 9.764              at ./tests/journal.rs:308:19\n#13 9.764    7: core::ops::function::FnOnce::call_once\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.764    8: core::ops::function::FnOnce::call_once\n#13 9.764              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.764 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.765 \n#13 9.765 thread 'spans_field_collision' panicked at tracing-journald/tests/journal.rs:22:14:\n#13 9.765 called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n#13 9.765 stack backtrace:\n#13 9.765    0: __rustc::rust_begin_unwind\n#13 9.765              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5\n#13 9.765    1: core::panicking::panic_fmt\n#13 9.765              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14\n#13 9.765    2: core::result::unwrap_failed\n#13 9.765              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1761:5\n#13 9.765    3: core::result::Result<T,E>::unwrap\n#13 9.765              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/result.rs:1167:23\n#13 9.765    4: journal::with_journald\n#13 9.765              at ./tests/journal.rs:22:14\n#13 9.765    5: journal::spans_field_collision\n#13 9.765              at ./tests/journal.rs:359:5\n#13 9.765    6: journal::spans_field_collision::{{closure}}\n#13 9.765              at ./tests/journal.rs:358:27\n#13 9.765    7: core::ops::function::FnOnce::call_once\n#13 9.765              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.765    8: core::ops::function::FnOnce::call_once\n#13 9.765              at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5\n#13 9.765 note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n#13 9.769 error: test failed, to rerun pass `-p tracing-journald --test journal`\n#13 9.847 Metadata {\n#13 9.847     name: \"fn_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:14,\n#13 9.847     fields: {s, len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled: Metadata {\n#13 9.847     name: \"fn_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:14,\n#13 9.847     fields: {s, len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled -> true\n#13 9.847 [self_expr_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_empty_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:11,\n#13 9.847     fields: {foo, empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled: Metadata {\n#13 9.847     name: \"fn_empty_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:11,\n#13 9.847     fields: {foo, empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled -> true\n#13 9.847 [self_expr_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field2\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:27,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field2\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:27,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled -> true\n#13 9.847 [self_expr_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:22,\n#13 9.847     fields: {s, s.len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:22,\n#13 9.847     fields: {s, s.len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled -> true\n#13 9.847 [self_expr_field] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled -> true\n#13 9.847 [self_expr_field] register_callsite: Metadata {\n#13 9.847     name: \"self_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:46,\n#13 9.847     fields: {my_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled: Metadata {\n#13 9.847     name: \"self_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:46,\n#13 9.847     fields: {my_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [self_expr_field] enabled -> true\n#13 9.847 [self_expr_field] new_span: name=\"self_expr_field\"; target=\"fields\"; id=Id(1);\n#13 9.847 [self_expr_field] enter: self_expr_field; id=Id(1);\n#13 9.847 [self_expr_field] exit: self_expr_field; id=Id(1);\n#13 9.847 [self_expr_field] drop_span: self_expr_field; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test string_field ... [string_field] register_callsite: Metadata {\n#13 9.847     name: \"self_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:46,\n#13 9.847     fields: {my_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"self_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:46,\n#13 9.847     fields: {my_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:8,\n#13 9.847     fields: {param, foo},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:8,\n#13 9.847     fields: {param, foo},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_keyword_ident_in_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:37,\n#13 9.847     fields: {keywords.impl.type.fn},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_keyword_ident_in_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:37,\n#13 9.847     fields: {keywords.impl.type.fn},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_no_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:5,\n#13 9.847     fields: {foo, dsa, num},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_no_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:5,\n#13 9.847     fields: {foo, dsa, num},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:14,\n#13 9.847     fields: {s, len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:14,\n#13 9.847     fields: {s, len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_empty_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:11,\n#13 9.847     fields: {foo, empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_empty_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:11,\n#13 9.847     fields: {foo, empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field2\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:27,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field2\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:27,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:22,\n#13 9.847     fields: {s, s.len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:22,\n#13 9.847     fields: {s, s.len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] register_callsite: Metadata {\n#13 9.847     name: \"fn_string\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:32,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled: Metadata {\n#13 9.847     name: \"fn_string\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:32,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [string_field] enabled -> true\n#13 9.847 [string_field] new_span: name=\"fn_string\"; target=\"fields\"; id=Id(1);\n#13 9.847 [string_field] enter: fn_string; id=Id(1);\n#13 9.847 [string_field] exit: fn_string; id=Id(1);\n#13 9.847 [string_field] drop_span: fn_string; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test two_expr_fields ... [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_string\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:32,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_string\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:32,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100b8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"self_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:46,\n#13 9.847     fields: {my_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"self_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:46,\n#13 9.847     fields: {my_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100e8, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:8,\n#13 9.847     fields: {param, foo},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:8,\n#13 9.847     fields: {param, foo},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10028, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_keyword_ident_in_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:37,\n#13 9.847     fields: {keywords.impl.type.fn},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_keyword_ident_in_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:37,\n#13 9.847     fields: {keywords.impl.type.fn},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100d0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_no_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:5,\n#13 9.847     fields: {foo, dsa, num},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_no_param\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:5,\n#13 9.847     fields: {foo, dsa, num},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10010, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:14,\n#13 9.847     fields: {s, len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:14,\n#13 9.847     fields: {s, len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10058, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_empty_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:11,\n#13 9.847     fields: {foo, empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_empty_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:11,\n#13 9.847     fields: {foo, empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10040, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field2\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:27,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field2\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:27,\n#13 9.847     fields: {s},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b100a0, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:22,\n#13 9.847     fields: {s, s.len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_clashy_expr_field\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:22,\n#13 9.847     fields: {s, s.len},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10088, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10100, metadata: DynMetadata(0x55e4b3b08620) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] register_callsite: Metadata {\n#13 9.847     name: \"fn_two_expr_fields\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:17,\n#13 9.847     fields: {s, s.len, s.is_empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10070, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled: Metadata {\n#13 9.847     name: \"fn_two_expr_fields\",\n#13 9.847     target: \"fields\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"fields\",\n#13 9.847     location: tracing-attributes/tests/fields.rs:17,\n#13 9.847     fields: {s, s.len, s.is_empty},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e4b3b10070, metadata: DynMetadata(0x55e4b3affe08) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [two_expr_fields] enabled -> true\n#13 9.847 [two_expr_fields] new_span: name=\"fn_two_expr_fields\"; target=\"fields\"; id=Id(1);\n#13 9.847 [two_expr_fields] enter: fn_two_expr_fields; id=Id(1);\n#13 9.847 [two_expr_fields] exit: fn_two_expr_fields; id=Id(1);\n#13 9.847 [two_expr_fields] drop_span: fn_two_expr_fields; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 9 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 3 tests\n#13 9.847 test follows_from_async_test ... [follows_from_async_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:70,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:70,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled -> true\n#13 9.847 [follows_from_async_test] new_span: name=\"cause_a\"; target=\"follows_from\"; id=Id(1);\n#13 9.847 [follows_from_async_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:71,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:71,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled -> true\n#13 9.847 [follows_from_async_test] new_span: name=\"cause_b\"; target=\"follows_from\"; id=Id(2);\n#13 9.847 [follows_from_async_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:72,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:72,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled -> true\n#13 9.847 [follows_from_async_test] new_span: name=\"cause_c\"; target=\"follows_from\"; id=Id(3);\n#13 9.847 [follows_from_async_test] register_callsite: Metadata {\n#13 9.847     name: \"with_follows_from_async\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:9,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled: Metadata {\n#13 9.847     name: \"with_follows_from_async\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:9,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_async_test] enabled -> true\n#13 9.847 [follows_from_async_test] new_span: name=\"with_follows_from_async\"; target=\"follows_from\"; id=Id(4);\n#13 9.847 [follows_from_async_test] record_follows_from: with_follows_from_async (id=Id(4)) follows cause_a (id=Id(1))\n#13 9.847 [follows_from_async_test] record_follows_from: with_follows_from_async (id=Id(4)) follows cause_b (id=Id(2))\n#13 9.847 [follows_from_async_test] record_follows_from: with_follows_from_async (id=Id(4)) follows cause_c (id=Id(3))\n#13 9.847 [follows_from_async_test] enter: with_follows_from_async; id=Id(4);\n#13 9.847 [follows_from_async_test] exit: with_follows_from_async; id=Id(4);\n#13 9.847 [follows_from_async_test] enter: with_follows_from_async; id=Id(4);\n#13 9.847 [follows_from_async_test] exit: with_follows_from_async; id=Id(4);\n#13 9.847 [follows_from_async_test] drop_span: with_follows_from_async; id=Id(4); refs=1;\n#13 9.847 [follows_from_async_test] drop_span: cause_a; id=Id(1); refs=1;\n#13 9.847 [follows_from_async_test] drop_span: cause_b; id=Id(2); refs=1;\n#13 9.847 [follows_from_async_test] drop_span: cause_c; id=Id(3); refs=1;\n#13 9.847 ok\n#13 9.847 test follows_from_current_test ... [follows_from_current_test] register_callsite: Metadata {\n#13 9.847     name: \"with_follows_from_async\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:9,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled: Metadata {\n#13 9.847     name: \"with_follows_from_async\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:9,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled -> true\n#13 9.847 [follows_from_current_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:72,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:72,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled -> true\n#13 9.847 [follows_from_current_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:71,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:71,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled -> true\n#13 9.847 [follows_from_current_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:70,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:70,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled -> true\n#13 9.847 [follows_from_current_test] register_callsite: Metadata {\n#13 9.847     name: \"cause\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:98,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled: Metadata {\n#13 9.847     name: \"cause\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:98,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled -> true\n#13 9.847 [follows_from_current_test] new_span: name=\"cause\"; target=\"follows_from\"; id=Id(1);\n#13 9.847 [follows_from_current_test] enter: cause; id=Id(1);\n#13 9.847 [follows_from_current_test] register_callsite: Metadata {\n#13 9.847     name: \"follows_from_current\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:12,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled: Metadata {\n#13 9.847     name: \"follows_from_current\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:12,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_current_test] enabled -> true\n#13 9.847 [follows_from_current_test] new_span: name=\"follows_from_current\"; target=\"follows_from\"; id=Id(2);\n#13 9.847 [follows_from_current_test] clone_span: cause; id=Id(1); refs=1;\n#13 9.847 [follows_from_current_test] record_follows_from: follows_from_current (id=Id(2)) follows cause (id=Id(1))\n#13 9.847 [follows_from_current_test] drop_span: cause; id=Id(1); refs=2;\n#13 9.847 [follows_from_current_test] enter: follows_from_current; id=Id(2);\n#13 9.847 [follows_from_current_test] exit: follows_from_current; id=Id(2);\n#13 9.847 [follows_from_current_test] drop_span: follows_from_current; id=Id(2); refs=1;\n#13 9.847 [follows_from_current_test] exit: cause; id=Id(1);\n#13 9.847 [follows_from_current_test] drop_span: cause; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test follows_from_sync_test ... [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"follows_from_current\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:12,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"follows_from_current\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:12,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a040, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:98,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:98,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0e8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"with_follows_from_async\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:9,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"with_follows_from_async\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:9,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a028, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:72,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:72,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0d0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:71,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:71,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0b8, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:70,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:70,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a0a0, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:36,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a058, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause_a\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:36,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a058, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] new_span: name=\"cause_a\"; target=\"follows_from\"; id=Id(1);\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:37,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a070, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause_b\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:37,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a070, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] new_span: name=\"cause_b\"; target=\"follows_from\"; id=Id(2);\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:38,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a088, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"cause_c\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:38,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a088, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] new_span: name=\"cause_c\"; target=\"follows_from\"; id=Id(3);\n#13 9.847 [follows_from_sync_test] register_callsite: Metadata {\n#13 9.847     name: \"with_follows_from_sync\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:6,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a010, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled: Metadata {\n#13 9.847     name: \"with_follows_from_sync\",\n#13 9.847     target: \"follows_from\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"follows_from\",\n#13 9.847     location: tracing-attributes/tests/follows_from.rs:6,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x558978e0a010, metadata: DynMetadata(0x558978dfa860) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [follows_from_sync_test] enabled -> true\n#13 9.847 [follows_from_sync_test] new_span: name=\"with_follows_from_sync\"; target=\"follows_from\"; id=Id(4);\n#13 9.847 [follows_from_sync_test] record_follows_from: with_follows_from_sync (id=Id(4)) follows cause_a (id=Id(1))\n#13 9.847 [follows_from_sync_test] record_follows_from: with_follows_from_sync (id=Id(4)) follows cause_b (id=Id(2))\n#13 9.847 [follows_from_sync_test] record_follows_from: with_follows_from_sync (id=Id(4)) follows cause_c (id=Id(3))\n#13 9.847 [follows_from_sync_test] enter: with_follows_from_sync; id=Id(4);\n#13 9.847 [follows_from_sync_test] exit: with_follows_from_sync; id=Id(4);\n#13 9.847 [follows_from_sync_test] drop_span: with_follows_from_sync; id=Id(4); refs=1;\n#13 9.847 [follows_from_sync_test] drop_span: cause_a; id=Id(1); refs=1;\n#13 9.847 [follows_from_sync_test] drop_span: cause_b; id=Id(2); refs=1;\n#13 9.847 [follows_from_sync_test] drop_span: cause_c; id=Id(3); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 10 tests\n#13 9.847 test fields ... [fields] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [fields] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [fields] enabled -> true\n#13 9.847 [fields] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [fields] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [fields] enabled -> true\n#13 9.847 [fields] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [fields] enter: my_fn; id=Id(1);\n#13 9.847 [fields] exit: my_fn; id=Id(1);\n#13 9.847 [fields] drop_span: my_fn; id=Id(1); refs=1;\n#13 9.847 [fields] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(2);\n#13 9.847 [fields] enter: my_fn; id=Id(2);\n#13 9.847 [fields] exit: my_fn; id=Id(2);\n#13 9.847 [fields] drop_span: my_fn; id=Id(2); refs=1;\n#13 9.847 ok\n#13 9.847 test generics ... [generics] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [generics] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [generics] enabled -> true\n#13 9.847 [generics] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [generics] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [generics] enabled -> true\n#13 9.847 [generics] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [generics] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [generics] enabled -> true\n#13 9.847 [generics] new_span: name=\"my_fn\"; target=\"instrument\"; id=Id(1);\n#13 9.847 [generics] enter: my_fn; id=Id(1);\n#13 9.847 [generics] exit: my_fn; id=Id(1);\n#13 9.847 [generics] drop_span: my_fn; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test impl_trait_return_type ... [impl_trait_return_type] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled -> true\n#13 9.847 [impl_trait_return_type] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled -> true\n#13 9.847 [impl_trait_return_type] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled -> true\n#13 9.847 [impl_trait_return_type] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [impl_trait_return_type] enabled -> true\n#13 9.847 [impl_trait_return_type] new_span: name=\"returns_impl_trait\"; target=\"instrument\"; id=Id(1);\n#13 9.847 [impl_trait_return_type] enter: returns_impl_trait; id=Id(1);\n#13 9.847 [impl_trait_return_type] exit: returns_impl_trait; id=Id(1);\n#13 9.847 [impl_trait_return_type] drop_span: returns_impl_trait; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test methods ... [methods] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled -> true\n#13 9.847 [methods] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled -> true\n#13 9.847 [methods] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled -> true\n#13 9.847 [methods] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [methods] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [methods] enabled -> true\n#13 9.847 [methods] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [methods] enabled -> true\n#13 9.847 [methods] new_span: name=\"my_fn\"; target=\"instrument\"; id=Id(1);\n#13 9.847 [methods] enter: my_fn; id=Id(1);\n#13 9.847 [methods] exit: my_fn; id=Id(1);\n#13 9.847 [methods] drop_span: my_fn; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test name_ident ... [name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled -> true\n#13 9.847 [name_ident] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled -> true\n#13 9.847 [name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled -> true\n#13 9.847 [name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled -> true\n#13 9.847 [name_ident] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [name_ident] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [name_ident] enabled -> true\n#13 9.847 [name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [name_ident] enabled -> true\n#13 9.847 [name_ident] new_span: name=\"my_name\"; target=\"instrument\"; id=Id(1);\n#13 9.847 [name_ident] enter: my_name; id=Id(1);\n#13 9.847 [name_ident] exit: my_name; id=Id(1);\n#13 9.847 [name_ident] drop_span: my_name; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test override_everything ... [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [override_everything] enter: my_fn; id=Id(1);\n#13 9.847 [override_everything] exit: my_fn; id=Id(1);\n#13 9.847 [override_everything] drop_span: my_fn; id=Id(1); refs=1;\n#13 9.847 [override_everything] register_callsite: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [override_everything] enabled -> true\n#13 9.847 [override_everything] new_span: name=\"my_other_fn\"; target=\"my_target\"; id=Id(2);\n#13 9.847 [override_everything] enter: my_other_fn; id=Id(2);\n#13 9.847 [override_everything] exit: my_other_fn; id=Id(2);\n#13 9.847 [override_everything] drop_span: my_other_fn; id=Id(2); refs=1;\n#13 9.847 ok\n#13 9.847 test skip ... [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:106,\n#13 9.847     fields: {arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640058, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:106,\n#13 9.847     fields: {arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640058, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [skip] enter: my_fn; id=Id(1);\n#13 9.847 [skip] exit: my_fn; id=Id(1);\n#13 9.847 [skip] drop_span: my_fn; id=Id(1); refs=1;\n#13 9.847 [skip] new_span: name=\"my_fn\"; target=\"my_target\"; id=Id(2);\n#13 9.847 [skip] enter: my_fn; id=Id(2);\n#13 9.847 [skip] exit: my_fn; id=Id(2);\n#13 9.847 [skip] drop_span: my_fn; id=Id(2); refs=1;\n#13 9.847 [skip] register_callsite: Metadata {\n#13 9.847     name: \"my_fn2\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640070, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled: Metadata {\n#13 9.847     name: \"my_fn2\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640070, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [skip] enabled -> true\n#13 9.847 [skip] new_span: name=\"my_fn2\"; target=\"my_target\"; id=Id(3);\n#13 9.847 [skip] enter: my_fn2; id=Id(3);\n#13 9.847 [skip] exit: my_fn2; id=Id(3);\n#13 9.847 [skip] drop_span: my_fn2; id=Id(3); refs=1;\n#13 9.847 ok\n#13 9.847 test target_ident ... [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn2\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640070, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn2\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640070, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:106,\n#13 9.847     fields: {arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640058, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:106,\n#13 9.847     fields: {arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640058, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] register_callsite: Metadata {\n#13 9.847     name: \"target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:284,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400e8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled: Metadata {\n#13 9.847     name: \"target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:284,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400e8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_ident] enabled -> true\n#13 9.847 [target_ident] new_span: name=\"target\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [target_ident] enter: target; id=Id(1);\n#13 9.847 [target_ident] exit: target; id=Id(1);\n#13 9.847 [target_ident] drop_span: target; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test target_name_ident ... [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:284,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400e8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:284,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400e8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn2\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640070, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn2\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640070, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:106,\n#13 9.847     fields: {arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640058, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:106,\n#13 9.847     fields: {arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640058, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_other_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:21,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640028, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:18,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640010, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400d0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:200,\n#13 9.847     fields: {self, arg1},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400a0, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"returns_impl_trait\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:230,\n#13 9.847     fields: {x},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da6400b8, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"instrument\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:164,\n#13 9.847     fields: {arg1, arg2},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640088, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_fn\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:54,\n#13 9.847     fields: {arg1, arg2, arg3},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640040, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640118, metadata: DynMetadata(0x5556da6385d8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:309,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640100, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"instrument\",\n#13 9.847     location: tracing-attributes/tests/instrument.rs:309,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5556da640100, metadata: DynMetadata(0x5556da62f4f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [target_name_ident] enabled -> true\n#13 9.847 [target_name_ident] new_span: name=\"my_name\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [target_name_ident] enter: my_name; id=Id(1);\n#13 9.847 [target_name_ident] exit: my_name; id=Id(1);\n#13 9.847 [target_name_ident] drop_span: my_name; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test user_tracing_module ... ok\n#13 9.847 \n#13 9.847 test result: ok. 10 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 3 tests\n#13 9.847 test enum_levels ... [enum_levels] register_callsite: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9100, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9100, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled -> true\n#13 9.847 [enum_levels] new_span: name=\"trace\"; target=\"levels\"; id=Id(1);\n#13 9.847 [enum_levels] enter: trace; id=Id(1);\n#13 9.847 [enum_levels] exit: trace; id=Id(1);\n#13 9.847 [enum_levels] drop_span: trace; id=Id(1); refs=1;\n#13 9.847 [enum_levels] register_callsite: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:103,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9118, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:103,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9118, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled -> true\n#13 9.847 [enum_levels] new_span: name=\"debug\"; target=\"levels\"; id=Id(2);\n#13 9.847 [enum_levels] enter: debug; id=Id(2);\n#13 9.847 [enum_levels] exit: debug; id=Id(2);\n#13 9.847 [enum_levels] drop_span: debug; id=Id(2); refs=1;\n#13 9.847 [enum_levels] register_callsite: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:106,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9130, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:106,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9130, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled -> true\n#13 9.847 [enum_levels] new_span: name=\"info\"; target=\"levels\"; id=Id(3);\n#13 9.847 [enum_levels] enter: info; id=Id(3);\n#13 9.847 [enum_levels] exit: info; id=Id(3);\n#13 9.847 [enum_levels] drop_span: info; id=Id(3); refs=1;\n#13 9.847 [enum_levels] register_callsite: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9148, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9148, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled -> true\n#13 9.847 [enum_levels] new_span: name=\"warn\"; target=\"levels\"; id=Id(4);\n#13 9.847 [enum_levels] enter: warn; id=Id(4);\n#13 9.847 [enum_levels] exit: warn; id=Id(4);\n#13 9.847 [enum_levels] drop_span: warn; id=Id(4); refs=1;\n#13 9.847 [enum_levels] register_callsite: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:112,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9160, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:112,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9160, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enum_levels] enabled -> true\n#13 9.847 [enum_levels] new_span: name=\"error\"; target=\"levels\"; id=Id(5);\n#13 9.847 [enum_levels] enter: error; id=Id(5);\n#13 9.847 [enum_levels] exit: error; id=Id(5);\n#13 9.847 [enum_levels] drop_span: error; id=Id(5); refs=1;\n#13 9.847 ok\n#13 9.847 test named_levels ... [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:112,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9160, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:112,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9160, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9148, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9148, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:106,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9130, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:106,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9130, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:103,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9118, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:103,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9118, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9100, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9100, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9010, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9010, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] new_span: name=\"trace\"; target=\"levels\"; id=Id(1);\n#13 9.847 [named_levels] enter: trace; id=Id(1);\n#13 9.847 [named_levels] exit: trace; id=Id(1);\n#13 9.847 [named_levels] drop_span: trace; id=Id(1); refs=1;\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9028, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9028, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] new_span: name=\"debug\"; target=\"levels\"; id=Id(2);\n#13 9.847 [named_levels] enter: debug; id=Id(2);\n#13 9.847 [named_levels] exit: debug; id=Id(2);\n#13 9.847 [named_levels] drop_span: debug; id=Id(2); refs=1;\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9040, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9040, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] new_span: name=\"info\"; target=\"levels\"; id=Id(3);\n#13 9.847 [named_levels] enter: info; id=Id(3);\n#13 9.847 [named_levels] exit: info; id=Id(3);\n#13 9.847 [named_levels] drop_span: info; id=Id(3); refs=1;\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:17,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9058, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:17,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9058, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] new_span: name=\"warn\"; target=\"levels\"; id=Id(4);\n#13 9.847 [named_levels] enter: warn; id=Id(4);\n#13 9.847 [named_levels] exit: warn; id=Id(4);\n#13 9.847 [named_levels] drop_span: warn; id=Id(4); refs=1;\n#13 9.847 [named_levels] register_callsite: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:20,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9070, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:20,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9070, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [named_levels] enabled -> true\n#13 9.847 [named_levels] new_span: name=\"error\"; target=\"levels\"; id=Id(5);\n#13 9.847 [named_levels] enter: error; id=Id(5);\n#13 9.847 [named_levels] exit: error; id=Id(5);\n#13 9.847 [named_levels] drop_span: error; id=Id(5); refs=1;\n#13 9.847 ok\n#13 9.847 test numeric_levels ... [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:20,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9070, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:20,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9070, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:17,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9058, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:17,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9058, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9040, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9040, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9028, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9028, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9010, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9010, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:112,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9160, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:112,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9160, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9148, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:109,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9148, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:106,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9130, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:106,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9130, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:103,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9118, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:103,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9118, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9100, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9100, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:54,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9088, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"trace\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:54,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac9088, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] new_span: name=\"trace\"; target=\"levels\"; id=Id(1);\n#13 9.847 [numeric_levels] enter: trace; id=Id(1);\n#13 9.847 [numeric_levels] exit: trace; id=Id(1);\n#13 9.847 [numeric_levels] drop_span: trace; id=Id(1); refs=1;\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:57,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90a0, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"debug\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Debug,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:57,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90a0, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] new_span: name=\"debug\"; target=\"levels\"; id=Id(2);\n#13 9.847 [numeric_levels] enter: debug; id=Id(2);\n#13 9.847 [numeric_levels] exit: debug; id=Id(2);\n#13 9.847 [numeric_levels] drop_span: debug; id=Id(2); refs=1;\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:60,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90b8, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"info\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:60,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90b8, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] new_span: name=\"info\"; target=\"levels\"; id=Id(3);\n#13 9.847 [numeric_levels] enter: info; id=Id(3);\n#13 9.847 [numeric_levels] exit: info; id=Id(3);\n#13 9.847 [numeric_levels] drop_span: info; id=Id(3); refs=1;\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:63,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90d0, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"warn\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:63,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90d0, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] new_span: name=\"warn\"; target=\"levels\"; id=Id(4);\n#13 9.847 [numeric_levels] enter: warn; id=Id(4);\n#13 9.847 [numeric_levels] exit: warn; id=Id(4);\n#13 9.847 [numeric_levels] drop_span: warn; id=Id(4); refs=1;\n#13 9.847 [numeric_levels] register_callsite: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:66,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90e8, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled: Metadata {\n#13 9.847     name: \"error\",\n#13 9.847     target: \"levels\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"levels\",\n#13 9.847     location: tracing-attributes/tests/levels.rs:66,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x5642c1ac90e8, metadata: DynMetadata(0x5642c1ab8fc0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [numeric_levels] enabled -> true\n#13 9.847 [numeric_levels] new_span: name=\"error\"; target=\"levels\"; id=Id(5);\n#13 9.847 [numeric_levels] enter: error; id=Id(5);\n#13 9.847 [numeric_levels] exit: error; id=Id(5);\n#13 9.847 [numeric_levels] drop_span: error; id=Id(5); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 3 tests\n#13 9.847 test custom_name_no_equals_test ... [custom_name_no_equals_test] register_callsite: Metadata {\n#13 9.847     name: \"my_other_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc040, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_name_no_equals_test] enabled: Metadata {\n#13 9.847     name: \"my_other_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc040, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_name_no_equals_test] enabled -> true\n#13 9.847 [custom_name_no_equals_test] new_span: name=\"my_other_name\"; target=\"names\"; id=Id(1);\n#13 9.847 [custom_name_no_equals_test] enter: my_other_name; id=Id(1);\n#13 9.847 [custom_name_no_equals_test] exit: my_other_name; id=Id(1);\n#13 9.847 [custom_name_no_equals_test] drop_span: my_other_name; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test custom_name_test ... [custom_name_test] register_callsite: Metadata {\n#13 9.847     name: \"my_other_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc040, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_name_test] enabled: Metadata {\n#13 9.847     name: \"my_other_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc040, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_name_test] enabled -> true\n#13 9.847 [custom_name_test] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc028, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_name_test] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc028, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_name_test] enabled -> true\n#13 9.847 [custom_name_test] new_span: name=\"my_name\"; target=\"names\"; id=Id(1);\n#13 9.847 [custom_name_test] enter: my_name; id=Id(1);\n#13 9.847 [custom_name_test] exit: my_name; id=Id(1);\n#13 9.847 [custom_name_test] drop_span: my_name; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test default_name_test ... [default_name_test] register_callsite: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc028, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_name_test] enabled: Metadata {\n#13 9.847     name: \"my_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc028, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_name_test] enabled -> true\n#13 9.847 [default_name_test] register_callsite: Metadata {\n#13 9.847     name: \"my_other_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc040, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_name_test] enabled: Metadata {\n#13 9.847     name: \"my_other_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:14,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc040, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_name_test] enabled -> true\n#13 9.847 [default_name_test] register_callsite: Metadata {\n#13 9.847     name: \"default_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc010, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_name_test] enabled: Metadata {\n#13 9.847     name: \"default_name\",\n#13 9.847     target: \"names\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"names\",\n#13 9.847     location: tracing-attributes/tests/names.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55bcdd3dc010, metadata: DynMetadata(0x55bcdd3cd0f0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_name_test] enabled -> true\n#13 9.847 [default_name_test] new_span: name=\"default_name\"; target=\"names\"; id=Id(1);\n#13 9.847 [default_name_test] enter: default_name; id=Id(1);\n#13 9.847 [default_name_test] exit: default_name; id=Id(1);\n#13 9.847 [default_name_test] drop_span: default_name; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 2 tests\n#13 9.847 test default_parent_test ... [default_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"contextual_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:42,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f040, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_parent_test] enabled: Metadata {\n#13 9.847     name: \"contextual_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:42,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f040, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_parent_test] enabled -> true\n#13 9.847 [default_parent_test] new_span: name=\"contextual_parent\"; target=\"parents\"; id=Id(1);\n#13 9.847 [default_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"with_default_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f010, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_parent_test] enabled: Metadata {\n#13 9.847     name: \"with_default_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f010, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_parent_test] enabled -> true\n#13 9.847 [default_parent_test] new_span: name=\"with_default_parent\"; target=\"parents\"; id=Id(2);\n#13 9.847 [default_parent_test] enter: with_default_parent; id=Id(2);\n#13 9.847 [default_parent_test] exit: with_default_parent; id=Id(2);\n#13 9.847 [default_parent_test] drop_span: with_default_parent; id=Id(2); refs=1;\n#13 9.847 [default_parent_test] enter: contextual_parent; id=Id(1);\n#13 9.847 [default_parent_test] new_span: name=\"with_default_parent\"; target=\"parents\"; id=Id(3);\n#13 9.847 ----> [default_parent_test] check MockSpan { name: \"contextual_parent\" } against actual parent with Id=Id(1)\n#13 9.847 [default_parent_test] enter: with_default_parent; id=Id(3);\n#13 9.847 [default_parent_test] exit: with_default_parent; id=Id(3);\n#13 9.847 [default_parent_test] drop_span: with_default_parent; id=Id(3); refs=1;\n#13 9.847 [default_parent_test] exit: contextual_parent; id=Id(1);\n#13 9.847 [default_parent_test] drop_span: contextual_parent; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test explicit_parent_test ... [explicit_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"with_default_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f010, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled: Metadata {\n#13 9.847     name: \"with_default_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f010, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled -> true\n#13 9.847 [explicit_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"contextual_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:42,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f040, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled: Metadata {\n#13 9.847     name: \"contextual_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:42,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f040, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled -> true\n#13 9.847 [explicit_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"contextual_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:80,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f058, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled: Metadata {\n#13 9.847     name: \"contextual_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:80,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f058, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled -> true\n#13 9.847 [explicit_parent_test] new_span: name=\"contextual_parent\"; target=\"parents\"; id=Id(1);\n#13 9.847 [explicit_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"explicit_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:81,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f070, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled: Metadata {\n#13 9.847     name: \"explicit_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:81,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f070, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled -> true\n#13 9.847 [explicit_parent_test] new_span: name=\"explicit_parent\"; target=\"parents\"; id=Id(2);\n#13 9.847 [explicit_parent_test] enter: contextual_parent; id=Id(1);\n#13 9.847 [explicit_parent_test] register_callsite: Metadata {\n#13 9.847     name: \"with_explicit_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f028, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled: Metadata {\n#13 9.847     name: \"with_explicit_parent\",\n#13 9.847     target: \"parents\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"parents\",\n#13 9.847     location: tracing-attributes/tests/parents.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55e1f988f028, metadata: DynMetadata(0x55e1f987f558) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [explicit_parent_test] enabled -> true\n#13 9.847 [explicit_parent_test] new_span: name=\"with_explicit_parent\"; target=\"parents\"; id=Id(3);\n#13 9.847 [explicit_parent_test] enter: with_explicit_parent; id=Id(3);\n#13 9.847 [explicit_parent_test] exit: with_explicit_parent; id=Id(3);\n#13 9.847 [explicit_parent_test] drop_span: with_explicit_parent; id=Id(3); refs=1;\n#13 9.847 [explicit_parent_test] exit: contextual_parent; id=Id(1);\n#13 9.847 [explicit_parent_test] drop_span: explicit_parent; id=Id(2); refs=1;\n#13 9.847 [explicit_parent_test] drop_span: contextual_parent; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 11 tests\n#13 9.847 test test ... [test] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test] enabled -> true\n#13 9.847 [test] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test] enabled -> true\n#13 9.847 [test] new_span: name=\"ret\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test] enter: ret; id=Id(1);\n#13 9.847 [test] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test] enabled -> true\n#13 9.847 [test] event: event tracing-attributes/tests/ret.rs:11;\n#13 9.847 [test] exit: ret; id=Id(1);\n#13 9.847 [test] drop_span: ret; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_async ... [test_async] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_async] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_async] enabled -> true\n#13 9.847 [test_async] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_async] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_async] enabled -> true\n#13 9.847 [test_async] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_async] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_async] enabled -> true\n#13 9.847 [test_async] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_async] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_async] enabled -> true\n#13 9.847 [test_async] new_span: name=\"ret_async\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_async] enter: ret_async; id=Id(1);\n#13 9.847 [test_async] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_async] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_async] enabled -> true\n#13 9.847 [test_async] event: event tracing-attributes/tests/ret.rs:125;\n#13 9.847 [test_async] exit: ret_async; id=Id(1);\n#13 9.847 [test_async] enter: ret_async; id=Id(1);\n#13 9.847 [test_async] exit: ret_async; id=Id(1);\n#13 9.847 [test_async] drop_span: ret_async; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_custom_target ... [test_custom_target] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_custom_target] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_custom_target] enabled -> true\n#13 9.847 [test_custom_target] new_span: name=\"ret_with_target\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [test_custom_target] enter: ret_with_target; id=Id(1);\n#13 9.847 [test_custom_target] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_custom_target] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_custom_target] enabled -> true\n#13 9.847 [test_custom_target] event: event tracing-attributes/tests/ret.rs:16;\n#13 9.847 [test_custom_target] exit: ret_with_target; id=Id(1);\n#13 9.847 [test_custom_target] drop_span: ret_with_target; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_dbg ... [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] new_span: name=\"ret_display\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_dbg] enter: ret_display; id=Id(1);\n#13 9.847 [test_dbg] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg] enabled -> true\n#13 9.847 [test_dbg] event: event tracing-attributes/tests/ret.rs:177;\n#13 9.847 [test_dbg] exit: ret_display; id=Id(1);\n#13 9.847 [test_dbg] drop_span: ret_display; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_dbg_warn ... [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] new_span: name=\"ret_dbg_warn\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_dbg_warn] enter: ret_dbg_warn; id=Id(1);\n#13 9.847 [test_dbg_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_dbg_warn] enabled -> true\n#13 9.847 [test_dbg_warn] event: event tracing-attributes/tests/ret.rs:285;\n#13 9.847 [test_dbg_warn] exit: ret_dbg_warn; id=Id(1);\n#13 9.847 [test_dbg_warn] drop_span: ret_dbg_warn; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_impl_type ... [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] new_span: name=\"ret_impl_type\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_impl_type] enter: ret_impl_type; id=Id(1);\n#13 9.847 [test_impl_type] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_impl_type] enabled -> true\n#13 9.847 [test_impl_type] event: event tracing-attributes/tests/ret.rs:152;\n#13 9.847 [test_impl_type] exit: ret_impl_type; id=Id(1);\n#13 9.847 [test_impl_type] drop_span: ret_impl_type; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_mut ... [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] new_span: name=\"ret_mut\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_mut] enter: ret_mut; id=Id(1);\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] event: event tracing-attributes/tests/ret.rs:96;\n#13 9.847 [test_mut] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_mut] enabled -> true\n#13 9.847 [test_mut] event: event tracing-attributes/tests/ret.rs:93;\n#13 9.847 [test_mut] exit: ret_mut; id=Id(1);\n#13 9.847 [test_mut] drop_span: ret_mut; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_ret_and_err ... [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] new_span: name=\"ret_and_err\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_ret_and_err] enter: ret_and_err; id=Id(1);\n#13 9.847 [test_ret_and_err] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_err] enabled -> true\n#13 9.847 [test_ret_and_err] event: event tracing-attributes/tests/ret.rs:202;\n#13 9.847 [test_ret_and_err] exit: ret_and_err; id=Id(1);\n#13 9.847 [test_ret_and_err] drop_span: ret_and_err; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_ret_and_ok ... [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_ok\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851c0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"ret_and_ok\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851c0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] new_span: name=\"ret_and_ok\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_ret_and_ok] enter: ret_and_ok; id=Id(1);\n#13 9.847 [test_ret_and_ok] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:231\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851d8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:231\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851d8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_ret_and_ok] enabled -> true\n#13 9.847 [test_ret_and_ok] event: event tracing-attributes/tests/ret.rs:231;\n#13 9.847 [test_ret_and_ok] exit: ret_and_ok; id=Id(1);\n#13 9.847 [test_ret_and_ok] drop_span: ret_and_ok; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_warn ... [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:231\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851d8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:231\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851d8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_ok\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851c0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_and_ok\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851c0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"ret_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185070, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"ret_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185070, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] new_span: name=\"ret_warn\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_warn] enter: ret_warn; id=Id(1);\n#13 9.847 [test_warn] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185088, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185088, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn] enabled -> true\n#13 9.847 [test_warn] event: event tracing-attributes/tests/ret.rs:68;\n#13 9.847 [test_warn] exit: ret_warn; id=Id(1);\n#13 9.847 [test_warn] drop_span: ret_warn; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test test_warn_info ... [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185088, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:68\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185088, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185070, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:68,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185070, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:231\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851d8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:231\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851d8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_ok\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851c0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_and_ok\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:231,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851c0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:202\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Error,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {error},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1851a8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_and_err\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:202,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185178, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:93\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850d0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:96\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:96,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850b8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_mut\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:93,\n#13 9.847     fields: {a},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850a0, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:152\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185130, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_impl_type\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:152,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185118, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:285\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185250, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_dbg_warn\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:285,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185238, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:177\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185160, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_display\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:177,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185148, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:16\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185058, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_with_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185040, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:125\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185100, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_async\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:125,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e1850e8, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:11\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185028, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:11,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185010, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"fake\",\n#13 9.847     target: \"tracing_mock::field\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_mock::field\",\n#13 9.847     location: tracing-mock/src/field.rs:610,\n#13 9.847     fields: {fake_field},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185268, metadata: DynMetadata(0x55f37e1673d0) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"ret_warn_info\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185208, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"ret_warn_info\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Warn,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:260,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185208, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] new_span: name=\"ret_warn_info\"; target=\"ret\"; id=Id(1);\n#13 9.847 [test_warn_info] enter: ret_warn_info; id=Id(1);\n#13 9.847 [test_warn_info] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:260\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:260,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185220, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled: Metadata {\n#13 9.847     name: \"event tracing-attributes/tests/ret.rs:260\",\n#13 9.847     target: \"ret\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"ret\",\n#13 9.847     location: tracing-attributes/tests/ret.rs:260,\n#13 9.847     fields: {return},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55f37e185220, metadata: DynMetadata(0x55f37e15d020) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [test_warn_info] enabled -> true\n#13 9.847 [test_warn_info] event: event tracing-attributes/tests/ret.rs:260;\n#13 9.847 [test_warn_info] exit: ret_warn_info; id=Id(1);\n#13 9.847 [test_warn_info] drop_span: ret_warn_info; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 11 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 2 tests\n#13 9.847 test custom_targets ... [custom_targets] register_callsite: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388028, metadata: DynMetadata(0x55dc12378240) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_targets] enabled: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388028, metadata: DynMetadata(0x55dc12378240) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_targets] enabled -> true\n#13 9.847 [custom_targets] new_span: name=\"custom_target\"; target=\"my_target\"; id=Id(1);\n#13 9.847 [custom_targets] enter: custom_target; id=Id(1);\n#13 9.847 [custom_targets] exit: custom_target; id=Id(1);\n#13 9.847 [custom_targets] drop_span: custom_target; id=Id(1); refs=1;\n#13 9.847 [custom_targets] register_callsite: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_other_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets::my_mod\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:19,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388058, metadata: DynMetadata(0x55dc12378a38) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_targets] enabled: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_other_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets::my_mod\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:19,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388058, metadata: DynMetadata(0x55dc12378a38) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [custom_targets] enabled -> true\n#13 9.847 [custom_targets] new_span: name=\"custom_target\"; target=\"my_other_target\"; id=Id(2);\n#13 9.847 [custom_targets] enter: custom_target; id=Id(2);\n#13 9.847 [custom_targets] exit: custom_target; id=Id(2);\n#13 9.847 [custom_targets] drop_span: custom_target; id=Id(2); refs=1;\n#13 9.847 ok\n#13 9.847 test default_targets ... [default_targets] register_callsite: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_other_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets::my_mod\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:19,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388058, metadata: DynMetadata(0x55dc12378a38) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_other_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets::my_mod\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:19,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388058, metadata: DynMetadata(0x55dc12378a38) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled -> true\n#13 9.847 [default_targets] register_callsite: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388028, metadata: DynMetadata(0x55dc12378240) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled: Metadata {\n#13 9.847     name: \"custom_target\",\n#13 9.847     target: \"my_target\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:8,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388028, metadata: DynMetadata(0x55dc12378240) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled -> true\n#13 9.847 [default_targets] register_callsite: Metadata {\n#13 9.847     name: \"default_target\",\n#13 9.847     target: \"targets\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388010, metadata: DynMetadata(0x55dc12378240) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled: Metadata {\n#13 9.847     name: \"default_target\",\n#13 9.847     target: \"targets\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:5,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388010, metadata: DynMetadata(0x55dc12378240) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled -> true\n#13 9.847 [default_targets] new_span: name=\"default_target\"; target=\"targets\"; id=Id(1);\n#13 9.847 [default_targets] enter: default_target; id=Id(1);\n#13 9.847 [default_targets] exit: default_target; id=Id(1);\n#13 9.847 [default_targets] drop_span: default_target; id=Id(1); refs=1;\n#13 9.847 [default_targets] register_callsite: Metadata {\n#13 9.847     name: \"default_target\",\n#13 9.847     target: \"targets::my_mod\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets::my_mod\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388040, metadata: DynMetadata(0x55dc12378a38) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled: Metadata {\n#13 9.847     name: \"default_target\",\n#13 9.847     target: \"targets::my_mod\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"targets::my_mod\",\n#13 9.847     location: tracing-attributes/tests/targets.rs:16,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55dc12388040, metadata: DynMetadata(0x55dc12378a38) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [default_targets] enabled -> true\n#13 9.847 [default_targets] new_span: name=\"default_target\"; target=\"targets::my_mod\"; id=Id(2);\n#13 9.847 [default_targets] enter: default_target; id=Id(2);\n#13 9.847 [default_targets] exit: default_target; id=Id(2);\n#13 9.847 [default_targets] drop_span: default_target; id=Id(2); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 2 tests\n#13 9.847 test compile_fail ... ok\n#13 9.847 test pass ... ok\n#13 9.847 \n#13 9.847 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.73s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 20 tests\n#13 9.847 test dispatcher::test::default_dispatch ... ok\n#13 9.847 test dispatcher::test::default_no_subscriber ... ok\n#13 9.847 test dispatcher::test::dispatch_downcasts ... ok\n#13 9.847 test dispatcher::test::dispatch_is ... ok\n#13 9.847 test dispatcher::test::events_dont_infinite_loop ... ok\n#13 9.847 test dispatcher::test::spans_dont_infinite_loop ... ok\n#13 9.847 test field::test::empty_fields_are_skipped ... ok\n#13 9.847 test field::test::empty_value_set_is_empty ... ok\n#13 9.847 test field::test::fields_from_other_callsets_are_skipped ... ok\n#13 9.847 test field::test::index_of_field_in_fieldset_is_correct ... ok\n#13 9.847 test field::test::record_bytes ... ok\n#13 9.847 test field::test::record_debug_fn ... ok\n#13 9.847 test field::test::record_error ... ok\n#13 9.847 test field::test::sparse_value_sets_are_not_empty ... ok\n#13 9.847 test field::test::value_set_with_no_values_is_empty ... ok\n#13 9.847 test field::test::value_sets_with_fields_from_other_callsites_are_empty ... ok\n#13 9.847 test metadata::tests::filter_level_conversion ... ok\n#13 9.847 test metadata::tests::level_filter_is_usize_sized ... ok\n#13 9.847 test metadata::tests::level_filter_reprs ... ok\n#13 9.847 test metadata::tests::level_from_str ... ok\n#13 9.847 \n#13 9.847 test result: ok. 20 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 2 tests\n#13 9.847 test nested_set_default ... ok\n#13 9.847 test set_default_dispatch ... ok\n#13 9.847 \n#13 9.847 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test global_dispatch ... ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test local_dispatch_before_init ... ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test metadata_macro_api ... ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test event_before_register ... ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 3 tests\n#13 9.847 test backtrace::tests::capture_empty ... ok\n#13 9.847 test backtrace::tests::capture_supported ... ok\n#13 9.847 test backtrace::tests::capture_unsupported ... ok\n#13 9.847 \n#13 9.847 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 0 tests\n#13 9.847 \n#13 9.847 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test capture_supported ... ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.62s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test capture_supported ... ThreadId(2)-capture_supported 422869\n#13 9.847 ThreadId(2)-capture_supported;concurrent::main 33529\n#13 9.847 ThreadId(3);concurrent::main;concurrent::outer 10887226\n#13 9.847 ThreadId(2)-capture_supported;concurrent::main;concurrent::outer 30415404\n#13 9.847 ThreadId(3);concurrent::main;concurrent::outer;concurrent::Inner 50182185\n#13 9.847 \n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.13s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 3 tests\n#13 9.847 test tests::futures_01_tests::future_enter_exit_is_reasonable ... [tests::futures_01_tests::future_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:650,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:650,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] enabled -> true\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test tests::futures_01_tests::future_error_ends_span ... [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:650,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:650,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:671,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:671,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enabled -> true\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::future_error_ends_span] drop_span: foo; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test tests::futures_01_tests::stream_enter_exit_is_reasonable ... [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:671,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:671,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9028, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:650,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:650,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9010, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:696,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9040, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"tracing_futures::tests::futures_01_tests\",\n#13 9.847     location: tracing-futures/src/lib.rs:696,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x55af6cdb9040, metadata: DynMetadata(0x55af6cda9ce0) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enabled -> true\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"tracing_futures::tests::futures_01_tests\"; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [tests::futures_01_tests::stream_enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 3 tests\n#13 9.847 test enter_exit_is_reasonable ... [enter_exit_is_reasonable] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:22,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enter_exit_is_reasonable] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:22,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [enter_exit_is_reasonable] enabled -> true\n#13 9.847 [enter_exit_is_reasonable] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] enter: foo; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] exit: foo; id=Id(1);\n#13 9.847 [enter_exit_is_reasonable] drop_span: foo; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test error_ends_span ... [error_ends_span] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:22,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [error_ends_span] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:22,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [error_ends_span] enabled -> true\n#13 9.847 [error_ends_span] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:41,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062028, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [error_ends_span] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:41,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062028, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [error_ends_span] enabled -> true\n#13 9.847 [error_ends_span] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 9.847 [error_ends_span] enter: foo; id=Id(1);\n#13 9.847 [error_ends_span] exit: foo; id=Id(1);\n#13 9.847 [error_ends_span] enter: foo; id=Id(1);\n#13 9.847 [error_ends_span] exit: foo; id=Id(1);\n#13 9.847 [error_ends_span] enter: foo; id=Id(1);\n#13 9.847 [error_ends_span] exit: foo; id=Id(1);\n#13 9.847 [error_ends_span] drop_span: foo; id=Id(1); refs=1;\n#13 9.847 ok\n#13 9.847 test span_on_drop ... [span_on_drop] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:41,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062028, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:41,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062028, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled -> true\n#13 9.847 [span_on_drop] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:22,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:22,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062010, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled -> true\n#13 9.847 [span_on_drop] register_callsite: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:95,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062058, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled: Metadata {\n#13 9.847     name: \"foo\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:95,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062058, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled -> true\n#13 9.847 [span_on_drop] new_span: name=\"foo\"; target=\"std_future\"; id=Id(1);\n#13 9.847 [span_on_drop] enter: foo; id=Id(1);\n#13 9.847 [span_on_drop] register_callsite: Metadata {\n#13 9.847     name: \"event tracing-futures/tests/std_future.rs:54\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:54,\n#13 9.847     fields: {message},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062040, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled: Metadata {\n#13 9.847     name: \"event tracing-futures/tests/std_future.rs:54\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Info,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:54,\n#13 9.847     fields: {message},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062040, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(EVENT),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled -> true\n#13 9.847 [span_on_drop] event: event tracing-futures/tests/std_future.rs:54;\n#13 9.847 ----> [span_on_drop] check MockSpan { name: \"foo\" } against actual parent with Id=Id(1)\n#13 9.847 [span_on_drop] exit: foo; id=Id(1);\n#13 9.847 [span_on_drop] enter: foo; id=Id(1);\n#13 9.847 [span_on_drop] exit: foo; id=Id(1);\n#13 9.847 [span_on_drop] drop_span: foo; id=Id(1); refs=1;\n#13 9.847 [span_on_drop] register_callsite: Metadata {\n#13 9.847     name: \"bar\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062070, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled: Metadata {\n#13 9.847     name: \"bar\",\n#13 9.847     target: \"std_future\",\n#13 9.847     level: Level(\n#13 9.847         Trace,\n#13 9.847     ),\n#13 9.847     module_path: \"std_future\",\n#13 9.847     location: tracing-futures/tests/std_future.rs:100,\n#13 9.847     fields: {},\n#13 9.847     callsite: Identifier(Pointer { addr: 0x56483e062070, metadata: DynMetadata(0x56483e0518b8) }),\n#13 9.847     kind: Kind(SPAN),\n#13 9.847 }\n#13 9.847 [span_on_drop] enabled -> true\n#13 9.847 [span_on_drop] new_span: name=\"bar\"; target=\"std_future\"; id=Id(2);\n#13 9.847 [span_on_drop] enter: bar; id=Id(2);\n#13 9.847 [span_on_drop] event: event tracing-futures/tests/std_future.rs:54;\n#13 9.847 ----> [span_on_drop] check MockSpan { name: \"bar\" } against actual parent with Id=Id(2)\n#13 9.847 [span_on_drop] exit: bar; id=Id(2);\n#13 9.847 [span_on_drop] drop_span: bar; id=Id(2); refs=1;\n#13 9.847 ok\n#13 9.847 \n#13 9.847 test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 1 test\n#13 9.847 test socket::cmsg_buffer_size_for_one_fd ... ok\n#13 9.847 \n#13 9.847 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n#13 9.847 \n#13 9.847 \n#13 9.847 running 11 tests\n#13 9.847 test custom_priorities ... FAILED\n#13 9.847 test internal_null_byte ... FAILED\n#13 9.847 test journal_fields ... FAILED\n#13 9.847 test large_message ... FAILED\n#13 9.847 test multiline_message ... FAILED\n#13 9.847 test multiline_message_trailing_newline ... FAILED\n#13 9.847 test multiple_spans_metadata ... FAILED\n#13 9.847 test simple_message ... FAILED\n#13 9.847 test simple_metadata ... FAILED\n#13 9.847 test span_metadata ... FAILED\n#13 9.847 test spans_field_collision ... FAILED\n#13 9.847 \n#13 9.847 failures:\n#13 9.847 \n#13 9.847 failures:\n#13 9.847     custom_priorities\n#13 9.847     internal_null_byte\n#13 9.847     journal_fields\n#13 9.847     large_message\n#13 9.847     multiline_message\n#13 9.847     multiline_message_trailing_newline\n#13 9.847     multiple_spans_metadata\n#13 9.847     simple_message\n#13 9.847     simple_metadata\n#13 9.847     span_metadata\n#13 9.847     spans_field_collision\n#13 9.847 \n#13 9.847 test result: FAILED. 0 passed; 11 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.04s\n#13 9.847 \n#13 ERROR: process \"/bin/sh -c RUST_BACKTRACE=1 cargo test --workspace -- --nocapture --test-threads=1\" did not complete successfully: exit code: 101\n------\n > [stage-0  7/15] RUN --mount=type=cache,target=/usr/local/cargo/registry     --mount=type=cache,target=target     RUST_BACKTRACE=1 cargo test --workspace -- --nocapture --test-threads=1:\n9.847     multiline_message\n9.847     multiline_message_trailing_newline\n9.847     multiple_spans_metadata\n9.847     simple_message\n9.847     simple_metadata\n9.847     span_metadata\n9.847     spans_field_collision\n9.847 \n9.847 test result: FAILED. 0 passed; 11 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.04s\n9.847 \n------\nERROR: failed to solve: process \"/bin/sh -c RUST_BACKTRACE=1 cargo test --workspace -- --nocapture --test-threads=1\" did not complete successfully: exit code: 101\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}