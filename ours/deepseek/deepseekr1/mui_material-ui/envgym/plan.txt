Based on the hardware specifications (x86_64 architecture, no GPU, and AMD64 non-CUDA base image), here's the optimized Dockerfile:

```dockerfile
FROM node:18-alpine

WORKDIR /app

# Install dependencies with multi-core optimization
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --network-timeout 1000000

# Copy source code
COPY . .

# Build the app with production optimizations
RUN yarn build --max-old-space-size=4096

# Expose port 3000
EXPOSE 3000

# Start the app
CMD ["yarn", "start"]
```

**Key adjustments:**
1. **Node version upgrade**: Changed from Node 12 (EOL) to Node 18-alpine (current LTS) for security and compatibility
2. **Memory management**: Added `--max-old-space-size=4096` to prevent OOM errors during builds
3. **Network timeout**: Extended `--network-timeout` for unreliable connections
4. **Alpine compatibility**: Maintained Alpine base for x86_64 compatibility and smaller size (matches amd64 non-CUDA requirement)
5. **Multi-core optimization**: Yarn inherently uses available cores (matches hardware note)
6. **Path consistency**: `/app` workdir aligns with host's `/home/cc/EnvGym/data/mui_material-ui` context

No GPU-related modifications needed since hardware lacks GPU support. Alpine's x86_64 compatibility ensures smooth execution on the target architecture.