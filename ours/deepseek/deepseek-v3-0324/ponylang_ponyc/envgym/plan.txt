=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - SystemTap package (version >= 2.6)
   - SystemTap runtime
   - Linux kernel headers (for UPROBES)
   - DTrace compatible compiler
   - SystemTap script examples
   - Kernel debugging symbols
   - SystemTap development tools
   - UPROBES kernel module
   - Pony compiler (latest stable version)
   - Timer profiling tools
   - netcat (for backpressure testing)
   - Network monitoring tools
   - Pony debug tools
   - Pony behavior analysis tools
   - Subcommand framework for Pony
   - CMake (version >= 3.21)
   - Google Benchmark (v1.9.1)
   - Google Test (v1.17.0)
   - Git (for submodule management)
   - LLVM source code (specific hash: 3b5b5c1ec4a3095ab096dd780e84d7ab81f3d7ff)
   - LLVM patches (specific hash: b272d53fbbf35476362d21b0fd6141d50372f824ef5e3e02e13c83604538eaad)
   - Blake2 library
   - libstdc++ static library
   - llc (LLVM compiler)
   - Clang compiler (for bitcode generation)
   - libdl
   - libatomic
   - TCP stress test tools
   - ASIO monitoring utilities
   - High-frequency connection testing tools

2. FILES TO CREATE:
   - systemtap_validation.conf
   - kernel_probe_settings.conf
   - dtrace_compatibility_test.conf
   - probe_analysis_scripts/
   - systemtap_script_templates/
   - kernel_module_validation.conf
   - uprobes_activation_script.sh
   - probe_coverage_analysis.conf
   - systemtap_performance_test.conf
   - timer_profiling_scripts/
   - timer_example_modifications/
   - pony_build_configuration/
   - backpressure_test_config/
   - tcp_connection_test_scripts/
   - socket_option_validation/
   - network_monitoring_configs/
   - pony_yield_analysis/
   - yield_benchmark_configs/
   - subcommand_test_cases/
   - behavior_profiling_scripts/
   - debug_mode_configurations/
   - CMake configuration files for build system
   - LLVM patch verification files
   - Submodule configuration files
   - Build type configuration files
   - Platform-specific compilation flags
   - standalone.mri files for static linking
   - Build output directories for different configurations
   - dtrace_probes.h
   - dtrace_probes.o
   - except_try_catch.o
   - LLVM bitcode files for runtime
   - Build configuration verification scripts
   - Static library detection scripts
   - test/full-program-runner/CMakeLists.txt
   - test/full-program-runner/ directory structure
   - Test runner executable configuration files
   - test/libponyc/CMakeLists.txt
   - test/libponyc source files (annotations.cc, array.cc, etc.)
   - test/libponyrt/CMakeLists.txt
   - test/libponyrt source files (util.cc, ds/fun.cc, ds/hash.cc, ds/list.cc, lang/error.cc, mem/heap.cc, mem/pagemap.cc, mem/pool.cc)
   - test/rt-stress/tcp-open-close/CMakeLists.txt
   - test/rt-stress/tcp-open-close/config.json
   - test/rt-stress/tcp-open-close/stress_test.pony
   - test/rt-stress/tcp-open-close/validation_scripts/
   - test/rt-stress/tcp-open-close/asio_monitoring_scripts/

3. NECESSARY TEST CASES IN THE CODEBASE:
   - SystemTap installation validation
   - Kernel probe support verification
   - DTrace compatibility test
   - Probe coverage analysis
   - SystemTap script execution test
   - Kernel module loading test
   - UPROBES activation test
   - Probe argument validation
   - SystemTap performance impact test
   - Runtime probe triggering test
   - Multiple probe coordination test
   - Probe data collection validation
   - Kernel-space vs user-space probe test
   - Long-running probe stability test
   - High-frequency probe stress test
   - Probe argument format validation
   - Cross-version compatibility test
   - Timer behavior validation
   - Timer cancellation test
   - Timer interval accuracy test
   - Timer profiling test
   - Pony compilation test
   - Timer count modification test
   - Backpressure simulation test
   - TCP connection behavior test
   - Socket option validation test
   - Network buffer configuration test
   - Multiple TCP connection test
   - Backpressure response test
   - Network monitor integration test
   - TCP nodelay validation test
   - Send/receive buffer size test
   - Pony yield behavior test
   - Tail-recursive behavior validation
   - Subcommand parsing test
   - Debug mode verification
   - Non-interruptible behavior test
   - Punctuated stream test
   - Behavior overhead benchmark
   - Garbage collection behavior test
   - Subcommand argument parsing test
   - Parent command integration test
   - Leaf subcommand validation
   - CMake build system test
   - Submodule integrity test
   - Patch application verification
   - LLVM configuration validation
   - Google Benchmark integration test
   - Google Test integration test
   - PIC flag validation test
   - Build type configuration test
   - Static library linking test
   - MRI script validation
   - Standalone library integrity test
   - LLVM bitcode generation test
   - DTrace probes generation test
   - Exception handling validation
   - Build output verification
   - Static library deployment test
   - Bitcode linking validation
   - Full program runner compilation test
   - Test runner executable validation
   - Pony source file dependency verification
   - Custom build command validation
   - Test runner target dependency test
   - libponyc unit tests
   - Static library force-load tests
   - Whole-archive linking validation
   - LLVM library linking validation
   - libponyrt utility tests
   - Data structure functionality tests
   - Hash implementation tests
   - List implementation tests
   - Error handling tests
   - Memory management tests
   - Heap functionality tests
   - Page map tests
   - Memory pool tests
   - TCP open/close stress test
   - High-frequency connection test
   - ASIO activity monitoring test
   - Actor creation/destruction stress test
   - Connection lifecycle validation
   - Socket resource cleanup test
   - Network buffer stress test
   - Connection state tracking test

4. COMPLETE TODO LIST:
   - Install SystemTap and dependencies
   - Verify kernel probe support (UPROBES)
   - Configure PonyC with DTrace support
   - Test basic SystemTap script execution
   - Create probe validation test cases
   - Document SystemTap integration process
   - Set up kernel module testing environment
   - Verify UPROBES activation
   - Benchmark probe performance impact
   - Implement runtime probe triggering tests
   - Validate probe data collection
   - Test kernel-space vs user-space probes
   - Document probe definition standards
   - Create SystemTap script templates
   - Test long-running probe stability
   - Stress test high-frequency probes
   - Verify probe argument formats
   - Test cross-version compatibility
   - Analyze probe coverage
   - Optimize probe placement
   - Document troubleshooting procedures
   - Create systemtap_validation test suite
   - Integrate SystemTap tests with CI
   - Install Pony compiler
   - Set up timer profiling environment
   - Create timer test cases
   - Validate timer behavior
   - Test timer cancellation
   - Verify timer interval accuracy
   - Profile timer performance
   - Test Pony compilation process
   - Implement timer count modification
   - Document timer usage patterns
   - Install netcat for backpressure testing
   - Create backpressure test scenarios
   - Configure network monitoring tools
   - Test TCP connection behavior
   - Validate socket options
   - Implement network buffer tests
   - Create multiple TCP connection test
   - Document backpressure response patterns
   - Integrate network monitor tests
   - Validate TCP nodelay behavior
   - Test send/receive buffer configurations
   - Document network configuration best practices
   - Set up Pony yield behavior analysis
   - Create tail-recursive behavior tests
   - Implement subcommand parsing tests
   - Verify debug mode functionality
   - Test non-interruptible behaviors
   - Configure punctuated stream tests
   - Benchmark behavior overhead
   - Analyze garbage collection behavior
   - Implement subcommand argument tests
   - Validate parent command integration
   - Test leaf subcommand functionality
   - Document yield behavior patterns
   - Integrate yield tests with CI
   - Install CMake (>= 3.21)
   - Download Google Benchmark (v1.9.1)
   - Download Google Test (v1.17.0)
   - Verify Git installation
   - Configure submodules
   - Validate LLVM submodule hash
   - Apply LLVM patches
   - Verify patch hashes
   - Configure build types (Release/Debug)
   - Set up PIC flags
   - Validate LLVM configuration
   - Integrate benchmark tests
   - Set up test framework
   - Document build system configuration
   - Test PIC flag functionality
   - Validate build type configurations
   - Verify static C++ library availability
   - Test static library generation
   - Validate MRI script functionality
   - Test standalone library linking
   - Document static linking procedures
   - Add CI tests for all build configurations
   - Configure llc compiler path
   - Set up DTrace probes generation
   - Verify exception handling compilation
   - Implement bitcode generation tests
   - Validate LLVM linking process
   - Configure runtime bitcode generation
   - Test bitcode deployment
   - Verify static library naming conventions
   - Test build output copying mechanism
   - Validate compiler feature detection
   - Implement static library detection mechanism
   - Test C++ standard library detection
   - Validate linker options
   - Set up full program runner test environment
   - Verify test runner executable generation
   - Validate Pony source file dependencies
   - Test custom build command functionality
   - Integrate test runner with CI system
   - Document test runner configuration process
   - Verify target dependencies for test runner
   - Test runner executable path validation
   - Configure libponyc test executable
   - Set up platform-specific linking flags
   - Validate static library linking
   - Implement cross-compilation library tests
   - Configure PONYC_LLVM_LIBS integration
   - Test GTest integration for libponyc
   - Validate library paths for test executables
   - Document platform-specific linking requirements
   - Create test/libponyrt directory structure
   - Implement libponyrt test executable
   - Add utility function tests
   - Implement data structure tests
   - Create hash implementation tests
   - Develop list implementation tests
   - Configure error handling tests
   - Set up memory management tests
   - Implement heap functionality tests
   - Create page map tests
   - Develop memory pool tests
   - Integrate libponyrt tests with CI
   - Document libponyrt testing procedures
   - Set up TCP open/close stress test environment
   - Configure high-frequency connection testing
   - Implement ASIO activity monitoring
   - Create actor creation/destruction stress tests
   - Validate connection lifecycle management
   - Test socket resource cleanup
   - Implement network buffer stress scenarios
   - Document TCP stress test procedures
   - Integrate connection state tracking tests
   - Add CI tests for TCP stress scenarios
   - Monitor memory usage during stress tests
   - Analyze performance under high connection churn

Key Adjustments Made:
1. Removed Windows-specific components (dbghelp, ucrt, Ws2_32, Shlwapi)
2. Removed BSD-specific components (libc++, execinfo, atomic)
3. Removed UTRACE references (kernel version >= 3.5)
4. Removed macOS-specific components (libtool, platform-specific deployment targets)
5. Simplified platform-specific configurations to focus on x86_64 Linux
6. Removed cross-platform compilation tests (focus on native x86_64)
7. Removed GPU-related considerations
8. Simplified library dependencies to focus on Linux standard libraries
9. Adjusted paths to match /home/cc/EnvGym/data/ponylang_ponyc working directory
10. Removed redundant tests for removed components