=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED (x86_64 LINUX VERSIONS):
   - Java Development Kit (JDK) 11, 17, 21 (Linux x64 builds)
   - Gradle 8.14.2 (via wrapper) - standard Linux distribution
   - IntelliJ IDEA, Eclipse, or Fleet IDE (Linux versions)
   - Mockito-core dependency (latest version from Maven Central)
   - Tidelift subscription for enterprise support
   - Optional: Kotlin SDK (Linux x64)
   - Gradle Wrapper (version 8.14.2)
   - Android SDK (Linux version)
   - Gradle Develocity plugin 4.1.1
   - Gradle Foojay toolchains resolver plugin 1.0.0
   - Eclipse IDE plugin (Linux version)
   - Gradle Versions plugin 0.51.0
   - Google Maven repository access
   - Local Maven repository setup (~/.m2)
   - Mockito release tools for local testing
   - ByteBuddy 1.6.0-1.17.7 (standard Linux-compatible version)
   - ByteBuddy Android variant
   - Error Prone 2.41.0 and Gradle plugin 4.3.0
   - Error Prone Javac compiler (standard JDK)
   - AutoService annotations
   - Jacoco 0.8.13
   - JUnit 4.13.2 and Jupiter 5.13.4
   - Kotlin 2.2.0 and coroutines 1.6.3-native-mt (Linux x64)
   - Android testing libraries (JUnit 1.2.1, Runner 1.7.0)
   - Spotless plugin 7.2.1
   - Animal Sniffer plugin 2.0.1 and signatures
   - aQute BND plugin 7.1.0
   - OSGi core 8.0.0
   - Equinox OSGi 3.23.100
   - Test Logger plugin 4.0.0
   - License plugin 0.16.1
   - Nexus Publish plugin 2.0.0
   - Shipkit plugins (changelog 2.0.1, auto-version 2.1.2)
   - Tidelift security compliance tools
   - MIT License file
   - EditorConfig plugin for IDE
   - Git client (standard Linux package)
   - GraalVM 21 for Linux x64
   - Zulu JDK distributions (Linux x64)
   - Android Emulator for API levels 26 and 33 (Linux)
   - KVM for Linux (qemu-kvm package)
   - Codecov integration tools
   - GitHub Actions workflow dependencies
   - Dependabot GitHub app
   - Objenesis 3.1-3.2
   - Hamcrest library
   - OpenTest4J
   - AssertJ
   - JUnit Jupiter Params
   - ASM 9
   - Error Prone test API
   - JUnit Platform Launcher
   - JUnit Jupiter Engine
   - BND runtime tools

2. FILES TO CREATE (UPDATED PATHS FOR LINUX):
   - All files remain the same but with Linux-specific paths:
     - local.properties: `sdk.dir=/usr/local/android-sdk`
     - gradlew: Ensure executable permissions (`chmod +x gradlew`)
     - .gitignore: Add Linux-specific temporary files

3. NECESSARY TEST CASES:
   - All original test cases remain valid
   - Add Linux-specific tests:
     - File path separator tests (/ vs \)
     - Linux file permission tests
     - KVM emulation verification
     - Linux-specific Gradle wrapper execution
     - Linux file encoding verification

4. COMPLETE TODO LIST (LINUX-SPECIFIC ADJUSTMENTS):
   1. Install JDK 11, 17, 21 (Linux packages):
      - Use apt-get/openjdk or download Linux x64 binaries
      - Verify with `/usr/lib/jvm` paths

   2. Set up Gradle Wrapper:
      - Verify Linux line endings in gradlew
      - Set executable permissions: `chmod +x gradlew`

   3. IDE Setup:
      - Install Linux versions of IntelliJ/Eclipse
      - Configure Linux JDK paths

   15. Android Setup:
      - Install Android SDK via Android Studio for Linux
      - Configure KVM for emulation:
        ```bash
        sudo apt-get install qemu-kvm libvirt-daemon-system
        sudo adduser $USER kvm
        ```

   25. GraalVM Setup:
      - Download Linux x64 GraalVM build
      - Set up native-image tool for Linux

   26. CI Configuration:
      - Use Linux runners in GitHub Actions
      - Configure Linux-specific paths and permissions

   33. Verification:
      - Test all functionality on Linux
      - Verify Linux file permissions
      - Check Linux path handling
      - Test KVM-based Android emulation

Additional Linux-specific notes:
- All file operations should use Linux-style paths (/ instead of \)
- Ensure executables have proper permissions
- Use Linux package managers (apt-get) where possible
- Configure Linux-specific environment variables
- Verify Linux user permissions for build operations
- Test with Linux filesystem case sensitivity
- Configure Linux-specific Android SDK paths
- Use Linux-native Git client
- Set up Linux-specific KVM for Android emulation
- Verify Linux memory limits for Gradle builds
- Configure Linux-specific tmp directory handling