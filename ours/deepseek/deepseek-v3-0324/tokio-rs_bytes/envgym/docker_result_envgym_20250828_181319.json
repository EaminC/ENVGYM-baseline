{
  "timestamp": "20250828_181319",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756404715",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 1.02kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/rust:1.57\n#2 DONE 0.2s\n\n#3 [internal] load .dockerignore\n#3 transferring context: 2B done\n#3 DONE 0.0s\n\n#4 [ 1/15] FROM docker.io/library/rust:1.57@sha256:d83bf5ea7b4c3d18c2f46d5f3d288bfca085c3e7ac57822e3b8e5a1ad22ccc1a\n#4 DONE 0.0s\n\n#5 [ 2/15] WORKDIR /home/cc/EnvGym/data/tokio-rs_bytes\n#5 CACHED\n\n#6 [internal] load build context\n#6 transferring context: 104.85kB 0.0s done\n#6 DONE 0.0s\n\n#7 [ 3/15] RUN rustup install nightly-2024-09-15 --profile minimal &&     rustup default nightly-2024-09-15\n#7 0.212 info: syncing channel updates for 'nightly-2024-09-15-x86_64-unknown-linux-gnu'\n#7 0.353 info: latest update on 2024-09-15, rust version 1.83.0-nightly (9b72238eb 2024-09-14)\n#7 0.353 info: downloading component 'cargo'\n#7 0.983 info: downloading component 'rust-std'\n#7 3.606 info: downloading component 'rustc'\n#7 10.63 info: installing component 'cargo'\n#7 11.36 info: installing component 'rust-std'\n#7 13.60 info: installing component 'rustc'\n#7 18.68 \n#7 18.70   nightly-2024-09-15-x86_64-unknown-linux-gnu installed - rustc 1.83.0-nightly (9b72238eb 2024-09-14)\n#7 18.70 \n#7 18.70 info: checking for self-updates\n#7 18.70 info: downloading self-update\n#7 20.75 info: using existing install for 'nightly-2024-09-15-x86_64-unknown-linux-gnu'\n#7 20.78 info: default toolchain set to 'nightly-2024-09-15-x86_64-unknown-linux-gnu'\n#7 20.78 \n#7 20.79   nightly-2024-09-15-x86_64-unknown-linux-gnu unchanged - rustc 1.83.0-nightly (9b72238eb 2024-09-14)\n#7 20.79 \n#7 DONE 22.0s\n\n#8 [ 4/15] RUN rustup component add rust-src --toolchain nightly-2024-09-15 &&     rustup component add clippy --toolchain nightly-2024-09-15 &&     rustup component add miri --toolchain nightly-2024-09-15 || true\n#8 0.337 info: downloading component 'rust-src'\n#8 0.435 info: installing component 'rust-src'\n#8 1.119 info: downloading component 'clippy'\n#8 1.221 info: installing component 'clippy'\n#8 1.698 info: downloading component 'miri'\n#8 1.769 info: installing component 'miri'\n#8 DONE 2.4s\n\n#9 [ 5/15] RUN rustup target add x86_64-unknown-linux-gnu &&     rustup default stable\n#9 0.328 info: component 'rust-std' for target 'x86_64-unknown-linux-gnu' is up to date\n#9 0.348 info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'\n#9 5.459 info: latest update on 2025-08-07, rust version 1.89.0 (29483883e 2025-08-04)\n#9 5.459 info: downloading component 'cargo'\n#9 5.609 info: downloading component 'rust-std'\n#9 8.406 info: downloading component 'rustc'\n#9 15.19 info: installing component 'cargo'\n#9 15.96 info: installing component 'rust-std'\n#9 18.10 info: installing component 'rustc'\n#9 23.45 info: default toolchain set to 'stable-x86_64-unknown-linux-gnu'\n#9 23.45 \n#9 23.47   stable-x86_64-unknown-linux-gnu installed - rustc 1.89.0 (29483883e 2025-08-04)\n#9 23.47 \n#9 DONE 24.9s\n\n#10 [ 6/15] RUN cargo install cargo-hack ||     cargo install --git https://github.com/taiki-e/cargo-hack cargo-hack || true\n#10 0.330     Updating crates.io index\n#10 0.598  Downloading crates ...\n#10 0.659   Downloaded cargo-hack v0.6.37\n#10 0.691   Installing cargo-hack v0.6.37\n#10 0.723     Updating crates.io index\n#10 0.880      Locking 53 packages to latest compatible versions\n#10 0.892  Downloading crates ...\n#10 0.963   Downloaded toml_edit v0.23.4\n#10 0.972   Downloaded termcolor v1.4.1\n#10 0.973   Downloaded equivalent v1.0.2\n#10 0.974   Downloaded cfg_aliases v0.2.1\n#10 0.989   Downloaded cfg-if v1.0.3\n#10 0.991   Downloaded same-file v1.0.6\n#10 0.992   Downloaded serde_spanned v1.0.0\n#10 0.994   Downloaded itoa v1.0.15\n#10 0.996   Downloaded ctrlc v3.4.7\n#10 0.999   Downloaded toml_datetime v0.7.0\n#10 1.001   Downloaded toml_writer v1.0.2\n#10 1.006   Downloaded toml_parser v1.0.2\n#10 1.015   Downloaded quote v1.0.40\n#10 1.018   Downloaded lexopt v0.3.1\n#10 1.020   Downloaded unicode-ident v1.0.18\n#10 1.024   Downloaded bitflags v2.9.3\n#10 1.029   Downloaded ryu v1.0.20\n#10 1.033   Downloaded proc-macro2 v1.0.101\n#10 1.035   Downloaded toml v0.9.5\n#10 1.039   Downloaded serde_derive v1.0.219\n#10 1.042   Downloaded anyhow v1.0.99\n#10 1.046   Downloaded serde v1.0.219\n#10 1.050   Downloaded memchr v2.7.5\n#10 1.055   Downloaded indexmap v2.11.0\n#10 1.060   Downloaded cargo-config2 v0.1.35\n#10 1.064   Downloaded hashbrown v0.15.5\n#10 1.069   Downloaded winnow v0.7.13\n#10 1.079   Downloaded serde_json v1.0.143\n#10 1.106   Downloaded syn v2.0.106\n#10 1.124   Downloaded nix v0.30.1\n#10 1.153   Downloaded libc v0.2.175\n#10 1.200    Compiling serde v1.0.219\n#10 1.200    Compiling proc-macro2 v1.0.101\n#10 1.200    Compiling unicode-ident v1.0.18\n#10 1.200    Compiling winnow v0.7.13\n#10 1.200    Compiling libc v0.2.175\n#10 1.200    Compiling cfg_aliases v0.2.1\n#10 1.200    Compiling cfg-if v1.0.3\n#10 1.200    Compiling anyhow v1.0.99\n#10 1.200    Compiling bitflags v2.9.3\n#10 1.200    Compiling serde_json v1.0.143\n#10 1.200    Compiling equivalent v1.0.2\n#10 1.202    Compiling hashbrown v0.15.5\n#10 1.202    Compiling ryu v1.0.20\n#10 1.202    Compiling memchr v2.7.5\n#10 1.204    Compiling toml_writer v1.0.2\n#10 1.204    Compiling itoa v1.0.15\n#10 1.206    Compiling same-file v1.0.6\n#10 1.207    Compiling termcolor v1.4.1\n#10 1.209    Compiling lexopt v0.3.1\n#10 1.258    Compiling nix v0.30.1\n#10 1.808    Compiling indexmap v2.11.0\n#10 1.853    Compiling quote v1.0.40\n#10 1.977    Compiling syn v2.0.106\n#10 2.740    Compiling toml_parser v1.0.2\n#10 3.360    Compiling serde_derive v1.0.219\n#10 3.619    Compiling toml_datetime v0.7.0\n#10 3.619    Compiling serde_spanned v1.0.0\n#10 3.706    Compiling ctrlc v3.4.7\n#10 3.779    Compiling toml v0.9.5\n#10 3.779    Compiling toml_edit v0.23.4\n#10 5.085    Compiling cargo-config2 v0.1.35\n#10 14.33    Compiling cargo-hack v0.6.37\n#10 33.69     Finished `release` profile [optimized] target(s) in 33.38s\n#10 33.71   Installing /usr/local/cargo/bin/cargo-hack\n#10 33.71    Installed package `cargo-hack v0.6.37` (executable `cargo-hack`)\n#10 DONE 33.9s\n\n#11 [ 7/15] COPY Cargo.toml .\n#11 DONE 0.0s\n\n#12 [ 8/15] COPY src/lib.rs src/lib.rs\n#12 DONE 0.0s\n\n#13 [ 9/15] COPY ci/test-stable.sh ci/test-stable.sh\n#13 DONE 0.0s\n\n#14 [10/15] COPY ci/panic-abort.sh ci/panic-abort.sh\n#14 DONE 0.0s\n\n#15 [11/15] COPY ci/tsan.sh ci/tsan.sh\n#15 DONE 0.0s\n\n#16 [12/15] COPY ci/miri.sh ci/miri.sh\n#16 DONE 0.0s\n\n#17 [13/15] COPY clippy.toml .\n#17 DONE 0.0s\n\n#18 [14/15] RUN mkdir -p .github/workflows &&     chmod +x ci/*.sh &&     cargo build &&     cargo build --no-default-features &&     cargo build --features serde &&     cargo test\n#18 0.325     Updating crates.io index\n#18 0.547      Locking 52 packages to latest compatible versions\n#18 0.584    Compiling bytes v1.10.1 (/home/cc/EnvGym/data/tokio-rs_bytes)\n#18 0.620 error[E0583]: file not found for module `buf`\n#18 0.620   --> src/lib.rs:79:1\n#18 0.620    |\n#18 0.620 79 | pub mod buf;\n#18 0.620    | ^^^^^^^^^^^^\n#18 0.620    |\n#18 0.620    = help: to create the module `buf`, create file \"src/buf.rs\" or \"src/buf/mod.rs\"\n#18 0.620    = note: if there is a `mod buf` elsewhere in the crate already, import it with `use crate::...` instead\n#18 0.620 \n#18 0.620 error[E0583]: file not found for module `bytes`\n#18 0.620   --> src/lib.rs:82:1\n#18 0.620    |\n#18 0.620 82 | mod bytes;\n#18 0.620    | ^^^^^^^^^^\n#18 0.620    |\n#18 0.620    = help: to create the module `bytes`, create file \"src/bytes.rs\" or \"src/bytes/mod.rs\"\n#18 0.620    = note: if there is a `mod bytes` elsewhere in the crate already, import it with `use crate::...` instead\n#18 0.620 \n#18 0.620 error[E0583]: file not found for module `bytes_mut`\n#18 0.620   --> src/lib.rs:83:1\n#18 0.620    |\n#18 0.620 83 | mod bytes_mut;\n#18 0.620    | ^^^^^^^^^^^^^^\n#18 0.620    |\n#18 0.620    = help: to create the module `bytes_mut`, create file \"src/bytes_mut.rs\" or \"src/bytes_mut/mod.rs\"\n#18 0.620    = note: if there is a `mod bytes_mut` elsewhere in the crate already, import it with `use crate::...` instead\n#18 0.620 \n#18 0.620 error[E0583]: file not found for module `fmt`\n#18 0.620   --> src/lib.rs:84:1\n#18 0.620    |\n#18 0.620 84 | mod fmt;\n#18 0.620    | ^^^^^^^^\n#18 0.620    |\n#18 0.620    = help: to create the module `fmt`, create file \"src/fmt.rs\" or \"src/fmt/mod.rs\"\n#18 0.620    = note: if there is a `mod fmt` elsewhere in the crate already, import it with `use crate::...` instead\n#18 0.620 \n#18 0.620 error[E0583]: file not found for module `loom`\n#18 0.620   --> src/lib.rs:85:1\n#18 0.620    |\n#18 0.620 85 | mod loom;\n#18 0.620    | ^^^^^^^^^\n#18 0.620    |\n#18 0.620    = help: to create the module `loom`, create file \"src/loom.rs\" or \"src/loom/mod.rs\"\n#18 0.620    = note: if there is a `mod loom` elsewhere in the crate already, import it with `use crate::...` instead\n#18 0.620 \n#18 0.641 warning: unused extern crate\n#18 0.641   --> src/lib.rs:74:1\n#18 0.641    |\n#18 0.641 74 | extern crate alloc;\n#18 0.641    | ^^^^^^^^^^^^^^^^^^^ unused\n#18 0.641    |\n#18 0.641 note: the lint level is defined here\n#18 0.641   --> src/lib.rs:1:54\n#18 0.641    |\n#18 0.641 1  | #![warn(missing_docs, missing_debug_implementations, rust_2018_idioms)]\n#18 0.641    |                                                      ^^^^^^^^^^^^^^^^\n#18 0.641    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n#18 0.641 help: remove the unused `extern crate`\n#18 0.641    |\n#18 0.641 74 - extern crate alloc;\n#18 0.641    |\n#18 0.641 \n#18 0.659 For more information about this error, try `rustc --explain E0583`.\n#18 0.665 warning: `bytes` (lib) generated 1 warning\n#18 0.665 error: could not compile `bytes` (lib) due to 5 previous errors; 1 warning emitted\n#18 ERROR: process \"/bin/sh -c mkdir -p .github/workflows &&     chmod +x ci/*.sh &&     cargo build &&     cargo build --no-default-features &&     cargo build --features serde &&     cargo test\" did not complete successfully: exit code: 101\n------\n > [14/15] RUN mkdir -p .github/workflows &&     chmod +x ci/*.sh &&     cargo build &&     cargo build --no-default-features &&     cargo build --features serde &&     cargo test:\n0.641    |                                                      ^^^^^^^^^^^^^^^^\n0.641    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n0.641 help: remove the unused `extern crate`\n0.641    |\n0.641 74 - extern crate alloc;\n0.641    |\n0.641 \n0.659 For more information about this error, try `rustc --explain E0583`.\n0.665 warning: `bytes` (lib) generated 1 warning\n0.665 error: could not compile `bytes` (lib) due to 5 previous errors; 1 warning emitted\n------\nenvgym.dockerfile:26\n--------------------\n  25 |     \n  26 | >>> RUN mkdir -p .github/workflows && \\\n  27 | >>>     chmod +x ci/*.sh && \\\n  28 | >>>     cargo build && \\\n  29 | >>>     cargo build --no-default-features && \\\n  30 | >>>     cargo build --features serde && \\\n  31 | >>>     cargo test\n  32 |     \n--------------------\nERROR: failed to solve: process \"/bin/sh -c mkdir -p .github/workflows &&     chmod +x ci/*.sh &&     cargo build &&     cargo build --no-default-features &&     cargo build --features serde &&     cargo test\" did not complete successfully: exit code: 101\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}