{
  "timestamp": "20250902_054828",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756792107",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 1.22kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/golang:1.21-alpine3.19\n#2 DONE 0.1s\n\n#3 [internal] load metadata for docker.io/library/alpine:3.19\n#3 DONE 0.1s\n\n#4 [internal] load .dockerignore\n#4 transferring context: 2B done\n#4 DONE 0.0s\n\n#5 [builder 1/8] FROM docker.io/library/golang:1.21-alpine3.19@sha256:05a0855f995505bd8832ac8d5132ed097c08bf7e46119818e8c774cda954b04b\n#5 DONE 0.0s\n\n#6 [stage-1 1/5] FROM docker.io/library/alpine:3.19@sha256:3be987e6cde1d07e873c012bf6cfe941e6e85d16ca5fc5b8bedc675451d2de67\n#6 CACHED\n\n#7 [internal] load build context\n#7 transferring context: 136.78kB 0.1s done\n#7 DONE 0.1s\n\n#8 [builder 3/8] WORKDIR /app\n#8 CACHED\n\n#9 [builder 2/8] RUN apk add --no-cache     git     make     protoc     protobuf-dev     gcc     musl-dev\n#9 CACHED\n\n#10 [builder 4/8] COPY go.mod go.sum ./\n#10 CACHED\n\n#11 [builder 5/8] RUN go mod download -x || go mod download -x\n#11 0.260 go: go.mod requires go >= 1.24.0 (running go 1.21.13; GOTOOLCHAIN=local)\n#11 0.264 go: go.mod requires go >= 1.24.0 (running go 1.21.13; GOTOOLCHAIN=local)\n#11 ERROR: process \"/bin/sh -c go mod download -x || go mod download -x\" did not complete successfully: exit code: 1\n\n#12 [stage-1 2/5] RUN apk add --no-cache     bash     ca-certificates     git\n#12 0.233 fetch https://dl-cdn.alpinelinux.org/alpine/v3.19/main/x86_64/APKINDEX.tar.gz\n#12 CANCELED\n------\n > [builder 5/8] RUN go mod download -x || go mod download -x:\n0.260 go: go.mod requires go >= 1.24.0 (running go 1.21.13; GOTOOLCHAIN=local)\n0.264 go: go.mod requires go >= 1.24.0 (running go 1.21.13; GOTOOLCHAIN=local)\n------\nenvgym.dockerfile:25\n--------------------\n  23 |     \n  24 |     # Download dependencies with network fallback and verbose output\n  25 | >>> RUN go mod download -x || go mod download -x\n  26 |     \n  27 |     # Verify modules\n--------------------\nERROR: failed to build: failed to solve: process \"/bin/sh -c go mod download -x || go mod download -x\" did not complete successfully: exit code: 1\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}