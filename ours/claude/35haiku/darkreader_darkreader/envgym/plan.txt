=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - Node.js (LTS version compatible with x86_64 architecture, version 18 or 20 recommended)
   - npm (bundled with Node.js)
   - Git (latest version for x86_64 Linux)
   - Web browsers for testing:
     * Google Chrome (x86_64 compatible version)
     * Mozilla Firefox (x86_64 compatible version)
     * Microsoft Edge
   - Development Tools:
     * TypeScript (version 5.x compatible with x86_64)
     * ESLint (v8.x)
     * Rollup
     * Jest (latest version)
     * Karma
     * Prettier
     * ts-node
   - Additional Dependencies:
     * @types/node (x86_64 compatible)
     * type-fest
     * WebExtensions polyfill

2. FILES TO CREATE:
   [Unchanged from original plan, with attention to x86_64 path compatibility]
   - Ensure all path references use Linux-compatible forward slashes
   - Use `/home/cc/EnvGym/data-gpt-4.1mini/darkreader_darkreader` as base project path
   - Modify file paths to use Linux/Ubuntu standard conventions

3. SYSTEM CONSIDERATIONS:
   - Optimize for Ubuntu 22.04 / Debian Bullseye environment
   - Use multi-stage Docker builds
   - Leverage overlay2 storage driver
   - Configure for limited RAM environments
   - Minimize layer count in Dockerfile

4. PERFORMANCE OPTIMIZATIONS:
   - Use npm ci instead of npm install for faster, more reliable dependency installation
   - Implement node_modules caching in Docker build
   - Use slim base images to reduce overall image size
   - Configure Node.js with minimal memory overhead
   - Use Alpine-based Node.js images if possible

5. COMPATIBILITY ADJUSTMENTS:
   - Ensure all tools are x86_64 Linux compatible
   - Test all scripts on Ubuntu 22.04 environment
   - Verify Docker compatibility with version 28.3.2
   - Remove any ARM-specific or macOS-specific configurations
   - Prioritize Linux/x86_64 tool versions

6. STORAGE AND RESOURCE MANAGEMENT:
   - Implement volume management for node_modules
   - Use bind mounts for persistent data
   - Configure disk space limits in Docker
   - Implement cleanup strategies for build artifacts

7. DEVELOPMENT ENVIRONMENT CONFIGURATION:
   - Use /tmp for temporary build files
   - Configure Node.js to use system-level certificate store
   - Set appropriate ulimits for build processes
   - Implement non-root user for security

The core setup remains largely unchanged, with specific optimizations for the x86_64 Linux environment and Ubuntu 22.04 base image.