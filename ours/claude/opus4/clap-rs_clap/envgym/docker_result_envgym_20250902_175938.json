{
  "timestamp": "20250902_175938",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756835978",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 11.40kB done\n#1 DONE 0.0s\nenvgym.dockerfile:289\n--------------------\n 288 |     \n 289 | >>> COPY <<EOF clap_builder/README.md\n 290 | >>> # clap_builder\n 291 | >>> \n 292 | >>> > **Command Line Argument Parser for Rust**\n 293 | >>> \n 294 | >>> [![Crates.io](https://img.shields.io/crates/v/clap.svg)](https://crates.io/crates/clap)\n 295 | >>> [![Crates.io](https://img.shields.io/crates/d/clap.svg)](https://crates.io/crates/clap)\n 296 | >>> [![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/clap-rs/clap/blob/master/LICENSE-APACHE)\n 297 | >>> [![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/clap-rs/clap/blob/master/LICENSE-MIT)\n 298 | >>> [![Build Status](https://github.com/clap-rs/clap/workflows/CI/badge.svg?branch=master)](https://github.com/clap-rs/clap/actions/workflows/ci.yml?query=branch%3Amaster)\n 299 | >>> [![Coverage Status](https://coveralls.io/repos/github/clap-rs/clap/badge.svg?branch=master)](https://coveralls.io/github/clap-rs/clap?branch=master)\n 300 | >>> [![Contributors](https://img.shields.io/github/contributors/clap-rs/clap.svg)](https://github.com/clap-rs/clap/graphs/contributors)\n 301 | >>> \n 302 | >>> Dual-licensed under [Apache 2.0](LICENSE-APACHE) or [MIT](LICENSE-MIT).\n 303 | >>> \n 304 | >>> 1. [About](#about)\n 305 | >>> 2. Tutorial: [Builder API](https://docs.rs/clap/latest/clap/_tutorial/index.html),  [Derive API](https://docs.rs/clap/latest/clap/_derive/_tutorial/index.html)\n 306 | >>> 3. [Examples](https://github.com/clap-rs/clap/tree/master/examples)\n 307 | >>> 4. [API Reference](https://docs.rs/clap)\n 308 | >>>     - [Derive Reference](https://docs.rs/clap/latest/clap/_derive/index.html)\n 309 | >>>     - [Feature Flags](#feature-flags)\n 310 | >>> 5. [CHANGELOG](https://github.com/clap-rs/clap/blob/master/CHANGELOG.md)\n 311 | >>> 6. [FAQ](https://github.com/clap-rs/clap/blob/master/docs/FAQ.md)\n 312 | >>> 7. [Questions & Discussions](https://github.com/clap-rs/clap/discussions)\n 313 | >>> 8. [Contributing](https://github.com/clap-rs/clap/blob/master/CONTRIBUTING.md)\n 314 | >>> 8. [Sponsors](https://github.com/clap-rs/clap/blob/master/README.md#sponsors)\n 315 | >>> \n 316 | >>> ## About\n 317 | >>> \n 318 | >>> Create your command-line parser, with all of the bells and whistles, declaratively or procedurally.\n 319 | >>> \n 320 | >>> ### Example\n 321 | >>> \n 322 | >>> This uses our\n 323 | >>> [Derive API](https://docs.rs/clap/latest/clap/_derive/index.html)\n 324 | >>> which provides access to the [Builder API](https://docs.rs/clap/latest/clap/index.html) as attributes on a `struct`:\n 325 | >>> \n 326 | >>> <!-- Copied from examples/demo.{rs,md} -->\n 327 | >>> ```rust\n 328 | >>> use clap::Parser;\n 329 | >>> \n 330 | >>> /// Simple program to greet a person\n 331 | >>> #[derive(Parser, Debug)]\n 332 | >>> #[command(version, about, long_about = None)]\n 333 | >>> struct Args {\n 334 | >>>     /// Name of the person to greet\n 335 | >>>     #[arg(short, long)]\n 336 | >>>     name: String,\n 337 | >>> \n 338 | >>>     /// Number of times to greet\n 339 | >>>     #[arg(short, long, default_value_t = 1)]\n 340 | >>>     count: u8,\n 341 | >>> }\n 342 | >>> \n 343 | >>> fn main() {\n 344 | >>>     let args = Args::parse();\n 345 | >>> \n 346 | >>>     for _ in 0..args.count {\n 347 | >>>         println!(\"Hello {}!\", args.name);\n 348 | >>>     }\n 349 | >>> }\n 350 | >>> ```\n 351 | >>> \n 352 | >>> Add this to `Cargo.toml`:\n 353 | >>> ```toml\n 354 | >>> [dependencies]\n 355 | >>> clap = { version = \"4.5.45\", features = [\"derive\"] }\n 356 | >>> ```\n 357 | >>> \n 358 | >>> You can then run your application with:\n 359 | >>> ```console\n 360 | >>> $ demo --help\n 361 | >>> A simple to use, efficient, and full-featured Command Line Argument Parser\n 362 | >>> \n 363 | >>> Usage: demo[EXE] [OPTIONS] --name <NAME>\n 364 | >>> \n 365 | >>> Options:\n 366 | >>>   -n, --name <NAME>    Name of the person to greet\n 367 | >>>   -c, --count <COUNT>  Number of times to greet [default: 1]\n 368 | >>>   -h, --help           Print help\n 369 | >>>   -V, --version        Print version\n 370 | >>> \n 371 | >>> $ demo --name Me\n 372 | >>> Hello Me!\n 373 | >>> ```\n 374 | >>> \n 375 | >>> ### Aspirations\n 376 | >>> \n 377 | >>> - Out of the box, users get a polished CLI experience\n 378 | >>>   - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap\n--------------------\nERROR: failed to solve: unterminated heredoc\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}