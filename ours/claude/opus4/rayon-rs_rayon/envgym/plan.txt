=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - Rust toolchain (rustc 1.80.0 or greater - x86_64-unknown-linux-gnu target)
   - Cargo (comes with Rust installation)
   - Git (for cloning repository and version control)
   - Visual Studio Code or another code editor with Rust support
   - rust-analyzer (for IDE support)
   - wasm-pack (for WebAssembly support with web_spin_lock feature)
   - wasm-bindgen-cli (for WebAssembly support - version 0.2.100 compatible)
   - wasm_sync (for WebAssembly spin-lock implementation - version 0.1.2)
   - Node.js and npm (for WebAssembly demos and web-sys integration)
   - cargo-workspaces (for managing workspace members)
   - Build tools for native dependencies (gcc/clang for build.rs)
   - libc development headers (for Unix dev-dependencies)
   - Mesa/OpenGL development libraries (software rendering for glium graphics - version 0.36.0)
   - X11 development libraries (for Unix windowing with x11-dl)
   - pkg-config (for system library detection)
   - Benchmark data download tools (wget/curl for fetching public domain datasets)
   - Data processing utilities (for benchmark data preparation)
   - TSPLIB format parser libraries or tools (for TSP problem data)
   - Valgrind or similar memory profiling tools (for sleep/wake cycle analysis)
   - perf or similar CPU profiling tools (for atomic operations performance)
   - Thread sanitizer tools (for detecting race conditions in sleep module)
   - ctags/etags (for TAGS file generation)
   - Wayland development libraries (for wayland-client support)
   - XCB development libraries (for x11rb support)
   - Mesa/EGL development libraries (for glutin support)
   - GLX development libraries (for glutin_glx_sys)
   - GitHub CLI (gh) or similar tool for GitHub Actions management
   - cargo-outdated (for dependency version checking)
   - cargo-audit (for security vulnerability scanning)
   - rustfmt (component of Rust toolchain for code formatting)
   - gcc-multilib (for i686 cross-compilation on x86_64)
   - wasmtime v35.0.0 or later (for WASI testing)
   - jq (for JSON processing in CI scripts and PR workflow)
   - act (optional - for running GitHub Actions locally)
   - Bash shell (for executing CI shell scripts like highlander.sh)
   - GNU coreutils (for dirname, pwd commands in shell scripts)
   - either crate dependencies (for partition_map support)
   - coco library (for deque implementation in rayon-core 1.1.0+)
   - crossbeam-deque (version compatible with workspace)
   - crossbeam-utils (version compatible with workspace)
   - num_cpus replacement (std::thread::available_parallelism)
   - cargo-release (for managing version releases)
   - mdbook (for documentation generation)
   - musl-tools (for Alpine Linux compatibility if using rust:alpine base)
   - cargo-vendor (for offline builds and dependency caching)
   - sccache (for Rust compilation caching in Docker builds)

2. FILES TO CREATE:
   - /home/cc/EnvGym/data/rayon-rs_rayon/Cargo.toml (workspace configuration with rayon-core and rayon-demo members)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/Cargo.toml (core library manifest - already exists)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/build.rs (build script for rayon-core - already exists)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/Cargo.toml (demo application manifest - already exists)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/lib.rs (main library entry point with feature flags)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/plumbing/README.md (already exists - documentation for parallel iterator design)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/plumbing/mod.rs (parallel iterator plumbing implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/plumbing/producer.rs (Producer and UnindexedProducer trait implementations)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/plumbing/consumer.rs (Consumer and UnindexedConsumer trait implementations)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/plumbing/bridge.rs (bridge and bridge_unindexed implementations)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/indexed.rs (IndexedParallelIterator trait and implementations)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/mod.rs (parallel iterator module exports)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/map.rs (Map parallel iterator implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/zip.rs (Zip parallel iterator implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/flat_map.rs (FlatMap parallel iterator implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/for_each.rs (ForEach consumer implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/reduce.rs (Reduce consumer implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/src/iter/collect.rs (collect_into_vec implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/lib.rs (core library implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/sleep/README.md (already exists - documentation for sleep module)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/sleep/mod.rs (sleep module implementation with Sleep struct)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/sleep/counters.rs (AtomicCounters implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/sleep/worker.rs (worker thread sleep/wake protocols)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/registry.rs (registry with embedded Sleep struct)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/src/injector.rs (injection queue implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/main.rs (demo application entry point)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/nbody/mod.rs (N-body simulation implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/visualize/mod.rs (visualization module)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/shaders/vertex.glsl (vertex shader for graphics)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/shaders/fragment.glsl (fragment shader for graphics)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/README.md (already exists - documentation for benchmark data)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/.gitignore (to manage large benchmark data files)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/download.sh (script to fetch public domain benchmark datasets)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/tsp/README.md (already exists - documentation for TSP problem inputs)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/tsp/dj10.tsp (TSP problem file - derived from dj38.tsp)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/tsp/dj15.tsp (TSP problem file - derived from dj38.tsp)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/data/tsp/dj38.tsp (TSP problem file - from University of Waterloo)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/tsp/mod.rs (TSP solver implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/tsp/parser.rs (TSPLIB format parser)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/tsp/solver.rs (parallel TSP solver algorithms)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/examples/README.md (already exists - documentation for interactive tests)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.gitignore (already exists with: Cargo.lock, target, *~, TAGS, *.bk, .idea)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rustfmt.toml (code formatting configuration)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.cargo/config.toml (with wasm32-unknown-unknown target configuration)
   - /home/cc/EnvGym/data/rayon-rs_rayon/tests/integration_tests.rs (for integration testing)
   - /home/cc/EnvGym/data/rayon-rs_rayon/tests/plumbing_tests.rs (for testing parallel iterator plumbing)
   - /home/cc/EnvGym/data/rayon-rs_rayon/tests/producer_consumer_tests.rs (for testing producer/consumer patterns)
   - /home/cc/EnvGym/data/rayon-rs_rayon/tests/sleep_tests.rs (for testing sleep module functionality)
   - /home/cc/EnvGym/data/rayon-rs_rayon/benches/benchmarks.rs (for performance benchmarking)
   - /home/cc/EnvGym/data/rayon-rs_rayon/benches/plumbing_benchmarks.rs (for parallel iterator plumbing benchmarks)
   - /home/cc/EnvGym/data/rayon-rs_rayon/benches/sleep_benchmarks.rs (for sleep/wake cycle performance)
   - /home/cc/EnvGym/data/rayon-rs_rayon/examples/basic_usage.rs (example implementations)
   - /home/cc/EnvGym/data/rayon-rs_rayon/examples/custom_producer.rs (custom producer implementation example)
   - /home/cc/EnvGym/data/rayon-rs_rayon/examples/custom_consumer.rs (custom consumer implementation example)
   - /home/cc/EnvGym/data/rayon-rs_rayon/examples/sleep_patterns.rs (demonstrating sleep module behavior)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/ directory (excluded from package)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/alt-core/Cargo.toml (alternative rayon-core implementation for CI testing)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/alt-core/build.rs (already exists - empty build script with fn main() {})
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/alt-core/src/lib.rs (minimal alt-core implementation)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/highlander/Cargo.toml (already exists - tests mutual exclusion of rayon-core implementations)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/highlander/src/main.rs (test program for highlander)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/compat-Cargo.lock (already exists - lockfile for CI compatibility testing)
   - /home/cc/EnvGym/data/rayon-rs_rayon/ci/highlander.sh (already exists - shell script for highlander test execution)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.github/workflows/ directory (excluded from package)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.github/workflows/ci.yaml (already exists - CI workflow configuration)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.github/workflows/main.yaml (already exists - main branch CI workflow)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.github/workflows/pr.yaml (already exists - PR validation workflow)
   - /home/cc/EnvGym/data/rayon-rs_rayon/.github/dependabot.yml (already exists - Dependabot configuration for automated dependency updates)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/tests/ directory (for rayon-core specific tests)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/tests/sleep_protocol_tests.rs (tests for sleep/wake protocols)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/benches/ directory (for rayon-core benchmarks)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/benches/atomic_counters_bench.rs (benchmarks for AtomicCounters)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-core/README.md (already exists - documentation for rayon-core stable APIs)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/README.md (documentation for demo applications)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/tests/demo_tests.rs (tests for demo applications)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/tests/tsp_tests.rs (tests for TSP solver)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/benches/data_benchmarks.rs (benchmarks using public domain datasets)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/benches/tsp_benchmarks.rs (benchmarks for TSP solver performance)
   - /home/cc/EnvGym/data/rayon-rs_rayon/rayon-demo/src/benchmarks/mod.rs (benchmark implementations using data files)
   - /