=== ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - Rust toolchain (stable, minimum version 1.65.0 based on CI matrix, 1.80+ recommended for workspace.lints) - x86_64-unknown-linux-gnu target
   - Rust nightly toolchain (for documentation builds, nightly-only RustDoc features, and minimal-versions testing) - x86_64-unknown-linux-gnu target
   - Rust 1.81 toolchain (specifically for WASM testing) - with wasm32-unknown-unknown target
   - Cargo (comes with Rust)
   - Git for version control
   - Visual Studio Code or preferred IDE with Rust support
   - rust-analyzer extension for IDE
   - cargo-edit (optional, for managing dependencies)
   - cargo-watch (optional, for auto-recompilation)
   - cargo-workspaces (for managing workspace members)
   - cargo-audit (for security vulnerability scanning - required for scheduled security audits)
   - cargo-nextest (for advanced test execution and CI integration)
   - cargo-hack (for feature powerset testing)
   - cargo-minimal-versions (for MSRV testing with minimal dependency versions)
   - wasm-pack (for WASM target testing)
   - wasm-bindgen-cli (for WASM development)
   - actions-rs/clippy-check (for CI clippy integration)
   - actions-rs/audit-check (for GitHub Actions security audit workflow)
   - taiki-e/create-gh-release-action@v1 (for automated GitHub release creation)
   - journald development libraries (for tracing-journald) - libsystemd-dev for Debian/Ubuntu base images
   - systemd development headers (libsystemd-dev on Debian/Ubuntu, systemd-devel on Fedora/RHEL)
   - pkg-config (for finding systemd libraries)
   - libc (0.2.126+ for tracing-journald)
   - flamegraph tools (for tracing-flame)
   - inferno (0.11.6+ for flamegraph generation, install via: cargo install inferno)
   - perf (Linux performance analysis tool for flamegraph generation) - linux-tools-generic package
   - Netlify CLI (optional, for local testing of documentation deployment)
   - Node.js (for potential tooling dependencies)
   - GitHub CLI (for PR management and release workflows)
   - criterion (0.3.6+ for benchmarking, already in dev-dependencies)
   - tokio (1.20.1+ for async examples and testing with full features)
   - futures (0.3.21+ for async/await integration and tracing-futures)
   - futures 0.1.31 (for futures-01 feature compatibility in tracing-futures)
   - futures-task (0.3.21+ for tracing-futures futures-03 feature)
   - log (0.4.0+ with std feature for log crate compatibility and test-log-support)
   - env_logger (for example applications)
   - crossbeam-channel (0.5.6+ for tracing-appender)
   - time crate (0.3.2+ for tracing-appender and tracing-subscriber)
   - parking_lot (0.12.1+ optional for tracing-appender and tracing-subscriber)
   - thiserror (2.0+ for tracing-appender and fmt examples)
   - tempfile (3.0+ for tracing-appender, tracing-flame tests, and inferno example)
   - proc-macro2 (1.0.60+ for tracing-attributes)
   - syn (2.0+ for tracing-attributes)
   - quote (1.0.20+ for tracing-attributes)
   - async-trait (0.1.67+ for tracing-attributes tests)
   - trybuild (1.0.64+ for proc-macro testing)
   - rustversion (1.0.9+ for version-specific tests)
   - tokio-test (0.4.2+ for async testing, tracing-futures, and tracing-test; 0.2.0+ for test_static_max_level_features)
   - once_cell (1.13.0+ for tracing-core std feature, tracing-flame, tracing-log, and tracing-subscriber)
   - valuable (0.1.0+ with derive feature for examples, optional for tracing-core unstable features, tracing-serde, and tracing-subscriber)
   - liballoc (required for no_std support in tracing-core)
   - color-spantrace (optional, for SpanTrace formatting)
   - color-eyre (optional, for enhanced error reporting)
   - smallvec (1.9.0+ optional for tracing-flame and tracing-subscriber)
   - pin-project-lite (0.2.9+ for tracing-futures std-future feature and tracing-tower tower-make feature)
   - tokio 0.1.22 (for tracing-futures tokio feature compatibility)
   - tokio-executor (0.1.10+ optional for tracing-futures)
   - tokio-threadpool (0.1.18+ optional for tracing-futures minimal-versions)
   - mio (0.6.23+ optional for tracing-futures minimal-versions)
   - serde (1.0.140+ for tracing-serde, tracing-journald tests, and tracing-subscriber)
   - serde_json (1.0.82+ for tracing-serde dev-dependencies, tracing-journald tests, tracing-subscriber, and examples)
   - systemd-journald service (running on the system for tracing-journald integration)
   - tracing-subscriber (0.3.0+ with json and env-filter features for examples, 0.3.19+ for Layer implementation, tracing-macros dev-dependencies, and tracing-mock optional dependency)
   - lru (0.7.7+ optional for tracing-log interest-cache feature)
   - ahash (0.7.7+ optional for tracing-log interest-cache feature)
   - tokio-stream (0.1.9+ optional for tracing-mock minimal-versions compatibility)
   - valuable-serde (0.1.0+ optional for tracing-serde valuable feature and tracing-subscriber)
   - std::sync::atomic::AtomicUsize (for tracing-serde example implementation)
   - matchers (0.2.0+ for tracing-subscriber env-filter feature)
   - regex-automata (0.4+ for tracing-subscriber env-filter feature)
   - nu-ansi-term (0.50.0+ for tracing-subscriber ansi feature and sloggish example)
   - sharded-slab (0.1.4+ for tracing-subscriber registry feature)
   - thread_local (1.1.4+ for tracing-subscriber registry feature)
   - chrono (0.4.26+ optional for tracing-subscriber)
   - regex (1.0+ for tracing-subscriber dev-dependencies)
   - tracing-mock (for testing utilities, referenced by tracing-test)
   - tower-service (0.3.2+ for tracing-tower)
   - tower (0.4.13+ with full features for examples)
   - tower-layer (0.3.1+ optional for tracing-tower)
   - tower-make (0.3.0+ optional for tracing-tower tower-make feature)
   - http (0.2.8+ for tracing-tower and examples)
   - hyper (0.14.20+ with full features for tower examples)
   - rand (0.7.3+ for examples)
   - bytes (1.0+ for examples)
   - argh (0.1.8+ for command-line argument parsing in examples)
   - humantime (2.1.0+ for sloggish example)
   - snafu (0.6.10+ for fmt examples)
   - ansi-to-tui (7.0.0+ for env-filter-explorer example)
   - ratatui (0.29.0+ for env-filter-explorer example)
   - crossterm (0.28.1+ for env-filter-explorer example)
   - tui-textarea (0.7.0+ for env-filter-explorer example)
   - tracing-appender (0.2.0+ for examples)
   - tracing-serde (for examples)
   - slog-term (for sloggish example reference)
   - hyper 0.12.x (for hyper-echo example compatibility)
   - build-essential (for compiling native dependencies on Debian/Ubuntu)
   - cmake (for some native dependencies)
   - libssl-dev (for TLS support in various crates)
   - ca-certificates (for HTTPS downloads)
   - curl or wget (for downloading tools)

2. FILES TO CREATE (all paths relative to /home/cc/EnvGym/data/tokio-rs_tracing):
   - .gitignore (version control ignore file - already provided)
   - .github/workflows/CI.yml (GitHub Actions CI configuration - already provided)
   - .github/workflows/audit.yml (GitHub Actions security audit workflow - already provided)
   - .github/workflows/release.yml (GitHub Actions release automation workflow - already provided)
   - Cargo.toml (workspace root manifest - already provided)
   - tracing/Cargo.toml (main tracing crate - already provided)
   - tracing/README.md (with documentation links - already provided)
   - tracing/CHANGELOG.md (following Keep A Changelog format, required for release automation)
   - tracing/test-log-support/Cargo.toml (test crate for log feature integration - already provided)
   - tracing/test-log-support/src/lib.rs (library entry point for log support testing)
   - tracing/test-log-support/tests/log_always.rs (tests for log-always feature)
   - tracing/test-log-support/tests/log_compat.rs (tests for log feature compatibility)
   - tracing/test-log-support/tests/log_interop.rs (tests for tracing and log crate interoperability)
   - tracing/test_static_max_level_features/Cargo.toml (isolated workspace for max level feature testing - already provided)
   - tracing/test_static_max_level_features/src/lib.rs (library entry point for max level feature tests)
   - tracing/test_static_max_level_features/tests/max_level_debug.rs (tests for max_level_debug feature)
   - tracing/test_static_max_level_features/tests/release_max_level_info.rs (tests for release_max_level_info feature)
   - tracing/test_static_max_level_features/tests/combined_features.rs (tests for combined max level features)
   - tracing-core/Cargo.toml (core functionality, version 0.1.34 - already provided)
   - tracing-core/README.md (with documentation links and version 0.1.34 - already provided)
   - tracing-core/CHANGELOG.md (following Keep A Changelog format, required for release automation)
   - tracing-core/src/lib.rs (with #![cfg_attr(docsrs, feature(doc_cfg))])
   - tracing-core/src/callsite.rs (callsite registration and trait implementation)
   - tracing-core/src/dispatcher.rs (global dispatcher and Dispatch struct)
   - tracing-core/src/event.rs (Event struct and event primitives)
   - tracing-core/src/field.rs (Field, FieldSet, Value, and ValueSet implementations)
   - tracing-core/src/metadata.rs (Metadata struct for spans and events)
   - tracing-core/src/span.rs (span::Id and span primitives)
   - tracing-core/src/subscriber.rs (Subscriber trait definition)
   - tracing-core/tests/*.rs (integration tests)
   - tracing-attributes/Cargo.toml (proc macros, version 0.1.30 - already provided)
   - tracing-attributes/README.md (documentation for proc macros - already provided)
   - tracing-attributes/CHANGELOG.md (following Keep A Changelog format, required for release automation)
   - tracing-attributes/src/lib.rs (proc-macro entry point)
   - tracing-attributes/src/expand.rs (macro expansion logic)
   - tracing-attributes/src/parse.rs (attribute parsing)
   - tracing-attributes/tests/ui/*.rs (compile-fail tests for trybuild)
   - tracing-attributes/tests/ui/*.stderr (expected error output)
   - tracing-attributes/tests/instrument.rs (integration tests)
   - tracing-attributes/tests/async_fn.rs (async function tests)
   - tracing-attributes/tests/err.rs (error handling tests)
   - tracing-attributes/tests/ret.rs (return value tests)
   - tracing-attributes/tests/fields.rs (field recording tests)
   - tracing-attributes/tests/levels.rs (level configuration tests)
   - tracing-attributes/tests/names.rs (span naming tests)
   - tracing-attributes/tests/targets.rs (target configuration tests)
   - tracing-attributes/tests/skips.rs (skip field tests)
   - tracing-attributes/tests/follows_from.rs (follows_from tests)
   - tracing-attributes/tests/destructuring.rs (argument destructuring tests)
   - tracing-attributes/tests/async_trait.rs (async-trait compatibility tests)
   - tracing-error/Cargo.toml (error integration, version 0.2.1 - already provided)
   - tracing-error/README.md (with documentation links and v0.2.x tag instructions - already provided)
   - tracing-error/CHANGELOG.md (following Keep A Changelog format, required for release automation)
   - tracing-error/src/lib.rs (with #![cfg_attr(docsrs, feature(doc_cfg))])
   - tracing-error/src/error.rs (error enrichment utilities)
   - tracing-error/src/layer.rs (ErrorLayer implementation)
   - tracing-error/src/backtrace.rs (backtrace capture and formatting)
   - tracing-error/src/span_trace.rs (SpanTrace type implementation)
   - tracing-error/src/traced_error.rs (TracedError wrapper type)
   - tracing-error/src/instrument.rs (InstrumentResult and InstrumentError traits)
   - tracing-error/src/extract.rs (ExtractSpanTrace trait)
   - tracing-error/tests/*.rs (integration tests)
   - tracing-error/examples/*.rs (error handling examples)
   - tracing-error/examples/usage.rs (basic SpanTrace usage example)
   - tracing-error/examples/traced_error.rs (TracedError wrapping example)
   - tracing-error/examples/extract_span_trace.rs (ExtractSpanTrace demonstration)
   - tracing-error/examples/error_layer.rs (ErrorLayer setup example)
   - tracing-flame/Cargo.toml (flamegraph support, version 0.2.0 - already provided)
   - tracing-flame/README.md (documentation for flamegraph generation - already provided)
   - tracing-flame/CHANGELOG.md (following Keep A Changelog format, required for release automation)
   - tracing-flame/src/lib.rs (main library file with FlameLayer implementation)
   - tracing-flame/src/layer.rs (FlameLayer subscriber implementation)
   - tracing-flame/src/writer.rs (flamegraph data writer implementation)
   - tracing-flame/src/flush.rs (FlushGuard implementation for buffered writers)
   - tracing-flame/tests/*.rs (integration tests)
   - tracing-flame/examples/*.rs (flamegraph generation examples)
   - tracing-flame/examples/basic_flamegraph.rs (basic flamegraph generation)
   - tracing-flame/examples/async_flamegraph.rs (async code profiling)
   - tracing-flame/examples/multi_thread_flamegraph.rs (multi-threaded profiling)
   - tracing-flame/examples/file_output.rs (using FlameLayer::with_file example)
   - tracing-flame/examples/custom_writer.rs (using custom Write implementation)
   - tracing-futures/Cargo.toml (futures integration, version 0.2.5 - already provided)
   - tracing-futures/README.md (documentation for futures instrumentation - already provided)
   - tracing-