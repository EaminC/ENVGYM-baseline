=== ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - Rust programming language (version 1.70 or higher, latest stable recommended)
   - Rust stable toolchain (version 1.82 for stress tests)
   - Rust nightly toolchain (nightly-2025-01-25 for CI compatibility and target spec generation)
   - Rust miri nightly toolchain (nightly-2025-06-02 for miri testing)
   - Rust clippy version 1.88 for linting (as defined in CI)
   - Cargo (comes with Rust installation)
   - Git version control system
   - Visual Studio Code or another code editor with Rust support
   - rust-analyzer (Rust language server for IDE support)
   - cargo-edit (for managing dependencies)
   - cargo-watch (for auto-recompiling during development)
   - cargo-spellcheck (for spell checking documentation and comments)
   - hunspell (spell checking backend, may be bundled with cargo-spellcheck)
   - hunspell-en-us (US English dictionary for spellcheck - Debian/Ubuntu package name)
   - cargo-doc (comes with Rust, for generating documentation)
   - cargo-deny (for dependency auditing and license compliance)
   - cross (for cross-compilation testing)
   - Docker for containerized testing and cross-compilation (version 28.1.1 already available)
   - rustfmt for code formatting
   - clippy for linting
   - cargo-workspaces (for managing workspace operations)
   - cargo-audit (for security vulnerability scanning)
   - cargo-tarpaulin (for code coverage - x86_64 Linux compatible)
   - cargo-nextest (for faster test execution)
   - cargo-hack (for feature powerset testing)
   - cargo-semver-checks (for semver compatibility checking)
   - cargo-fuzz (for fuzzing tests)
   - cargo-check-external-types (for checking external type exposure)
   - cargo-docs-rs (for building docs.rs-equivalent documentation)
   - wasm-pack (for WebAssembly testing)
   - wasmtime (for WASI runtime)
   - valgrind (for memory leak detection and stress testing - x86_64 Linux compatible)
   - llvm (for ASAN support)
   - jq (for JSON processing in scripts)
   - grep (for text processing in target spec generation)
   - sed (for text manipulation in target spec generation)
   - act (for local GitHub Actions testing)
   - loom (for concurrency testing, installed as a dependency)
   - build-essential (for Linux kernel compilation)
   - bison (for Linux kernel compilation)
   - flex (for Linux kernel compilation)
   - libssl-dev (for Linux kernel compilation)
   - libelf-dev (for Linux kernel compilation)
   - qemu-system-x86 (for kernel testing in virtual environment - x86_64 specific)
   - busybox-static (for minimal Linux userspace)
   - cpio (for initramfs creation)
   - xz-utils (for kernel archive extraction)
   - wget (for downloading kernel sources)
   - x86_64-unknown-linux-musl target (for static binary compilation - native for x86_64)
   - i686-unknown-linux-gnu target (for 32-bit testing and target spec generation - x86_64 can cross-compile to i686)
   - GitHub CLI (gh) for GitHub Sponsors verification
   - liburing-dev (for Linux io_uring support - Debian/Ubuntu package name)
   - wasm-bindgen-test (for WASM testing)
   - proc-macro2 (version 1.0.60 or higher, for tokio-macros)
   - quote (version 1.x, for tokio-macros)
   - syn (version 2.0 with full features, for tokio-macros)
   - futures-core (version 0.3.0 or higher, for tokio-stream, tokio-test, and tokio-util)
   - futures-sink (version 0.3.0 or higher, for tokio-util)
   - futures-io (version 0.3.0 or higher, for tokio-util compat feature)
   - futures-util (version 0.3.0 or higher, for tokio-util rt feature)
   - pin-project-lite (version 0.2.11 or higher, for tokio-stream and tokio-util)
   - async-stream (version 0.3 or higher, for tokio-stream and tokio-util dev)
   - parking_lot (version 0.12.0 or higher, for tokio-stream and tokio-util dev)
   - futures (version 0.3.0 with thread-pool and async-await features, for tokio-stream, tokio-test, tokio-util dev, examples, and tests-integration)
   - futures-test (version 0.3.5 or higher, for tokio-util dev)
   - bytes (version 1.0.0 or higher, for tokio-util, examples, and tests-integration)
   - slab (version 0.4.4 or higher, for tokio-util time feature)
   - tracing (version 0.1 or higher with std feature, for tokio-util and examples)
   - tracing-subscriber (version 0.3.1 with fmt, ansi, env-filter, tracing-log features, for examples)
   - hashbrown (version 0.15.0 or higher, for tokio-util join-map feature)
   - tempfile (version 3.1.0 or higher, for tokio-util dev)
   - criterion (version 0.5.1, for benchmarking)
   - rand (version 0.9, for benchmarks and stress-test dev-dependencies)
   - rand_chacha (version 0.9, for benchmarks)
   - libc (version 0.2.42 or higher, for Unix benchmarks)
   - http (version 0.2, for examples)
   - serde (version 1.0, for examples)
   - serde_derive (version 1.0, for examples)
   - serde_json (version 1.0, for examples)
   - httparse (version 1.0, for examples)
   - httpdate (version 1.0, for examples)
   - once_cell (version 1.5.2, for examples)
   - windows-sys (version 0.59, for Windows examples - will be cross-compiled from Linux)
   - trybuild (version 1.0, for tests-build dev-dependencies)
   - doc-comment (version 0.3.1, for tests-integration)
   - gcc-multilib (for 32-bit cross-compilation support on x86_64)
   - g++-multilib (for 32-bit cross-compilation support on x86_64)
   - libc6-dev-i386 (for 32-bit Linux development on x86_64)
   - Discord account (for joining Tokio dev channel)
   - Email client (for reporting Code of Conduct violations to moderation@tokio.rs and security issues to security@tokio.rs)
   - Optional: Netlify CLI for testing Netlify deployments locally
   - Optional: QEMU 7.2 for cross-architecture testing (ARM emulation on x86_64)
   - Optional: Cirrus CLI for testing Cirrus CI configurations locally
   - Optional: FreeBSD VM or environment for local FreeBSD testing (can run in QEMU on x86_64)
   - Optional: Buildomat CLI for testing Oxide Buildomat CI locally
   - Optional: illumos development environment (can run in VM on x86_64)

2. FILES TO CREATE:
   - LICENSE (MIT License for root workspace) - ALREADY EXISTS
   - Cargo.toml (workspace root configuration with resolver = "2")
   - CODE_OF_CONDUCT.md (Code of Conduct adhering to Rust Code of Conduct with moderation@tokio.rs contact) - ALREADY EXISTS
   - SECURITY.md (Security policy with security@tokio.rs contact and vulnerability coordination process) - ALREADY EXISTS
   - tokio/Cargo.toml (tokio crate manifest with loom dev dependency) - ALREADY EXISTS
   - tokio/README.md (tokio crate documentation) - ALREADY EXISTS
   - tokio/CHANGELOG.md (tokio version history)
   - tokio-macros/Cargo.toml (tokio-macros crate manifest, version 2.5.0) - ALREADY EXISTS
   - tokio-macros/README.md (tokio-macros crate documentation) - ALREADY EXISTS
   - tokio-macros/CHANGELOG.md (tokio-macros version history)
   - tokio-macros/src/lib.rs (proc-macro library entry point)
   - tokio-test/Cargo.toml (tokio-test crate manifest, version 0.4.4) - ALREADY EXISTS
   - tokio-test/README.md (tokio-test crate documentation) - ALREADY EXISTS
   - tokio-test/CHANGELOG.md (tokio-test version history)
   - tokio-test/src/lib.rs (tokio-test library entry point)
   - tokio-stream/Cargo.toml (tokio-stream crate manifest, version 0.1.17) - ALREADY EXISTS
   - tokio-stream/README.md (tokio-stream crate documentation) - ALREADY EXISTS
   - tokio-stream/CHANGELOG.md (tokio-stream version history)
   - tokio-stream/src/lib.rs (tokio-stream library entry point)
   - tokio-stream/src/stream_ext.rs (stream extension traits)
   - tokio-stream/src/wrappers.rs (stream wrappers module)
   - tokio-util/Cargo.toml (tokio-util crate manifest, version 0.7.16) - ALREADY EXISTS
   - tokio-util/README.md (tokio-util crate documentation) - ALREADY EXISTS
   - tokio-util/CHANGELOG.md (tokio-util version history)
   - tokio-util/src/lib.rs (tokio-util library entry point)
   - tokio-util/src/codec/mod.rs (codec utilities module)
   - tokio-util/src/compat/mod.rs (compatibility utilities module)
   - tokio-util/src/io/mod.rs (I/O utilities module)
   - tokio-util/src/time/mod.rs (time utilities module with DelayQueue)
   - tokio-util/src/sync/mod.rs (sync utilities module)
   - tokio-util/src/task/mod.rs (task utilities module)
   - tokio-util/src/join_map.rs (JoinMap utility module)
   - benches/Cargo.toml (benchmarks crate manifest) - ALREADY EXISTS
   - benches/spawn.rs (spawn benchmark implementation)
   - benches/sync_broadcast.rs (broadcast channel benchmark)
   - benches/sync_mpsc.rs (mpsc channel benchmark)
   - benches/sync_mpsc_oneshot.rs (mpsc oneshot benchmark)
   - benches/sync_watch.rs (watch channel benchmark)
   - benches/rt_current_thread.rs (current thread runtime benchmark)
   - benches/rt_multi_threaded.rs (multi-threaded runtime benchmark)
   - benches/sync_notify.rs (notify primitive benchmark)
   - benches/sync_rwlock.rs (RwLock benchmark)
   - benches/sync_semaphore.rs (semaphore benchmark)
   - benches/signal.rs (signal handling benchmark)
   - benches/fs.rs (filesystem operations benchmark)
   - benches/copy.rs (I/O copy benchmark)
   - benches/time_now.rs (time::Instant benchmark)
   - benches/time_timeout.rs (timeout operations benchmark)
   - examples/Cargo.toml (examples crate manifest) - ALREADY EXISTS
   - examples/README.md (documentation for examples directory) - ALREADY EXISTS
   - examples/hello_world.rs (basic hello world example - starting point)
   - examples/echo-tcp.rs (TCP echo server example - starting point)
   - examples/tcp_echo_server.rs (TCP echo server example matching README)
   - examples/chat.rs (chat application example)
   - examples/connect-tcp.rs (TCP connection example)
   - examples/connect-udp.rs (UDP connection example)
   - examples/echo-udp.rs (UDP echo server example)
   - examples/print_each_packet.rs (packet printing example)
   - examples/proxy.rs (proxy server example)
   - examples/tinydb.rs (tiny database example)
   - examples/udp-client.rs (UDP client example)
   - examples/udp-codec.rs (UDP codec example)
   - examples/tinyhttp.rs (tiny HTTP server example)
   - examples/custom-executor.rs (custom executor example)
   - examples/custom-executor-tokio-context.rs (custom executor with tokio context example)
   - examples/named-pipe.rs (named pipe example for Windows)
   - examples/named-pipe-ready.rs (named pipe ready example for Windows)
   - examples/named-pipe-multi-client.rs (named pipe multi-client example for Windows)
   - examples/dump.rs (task dump example)
   - stress-test/Cargo.toml (stress testing crate manifest) - ALREADY EXISTS
   - stress-test/src/lib.rs (stress test library entry point)
   - stress-test/src/main.rs (stress test main entry point)
   - tests-build/Cargo.toml (build tests crate manifest) - ALREADY EXISTS
   - tests-build/README.md (documentation for tests-build directory) - ALREADY EXISTS
   - tests-build/src/lib.rs (build tests library entry point)
   - tests-build/tests/test_full_features.rs (compile-time tests for full features)
   - tests-build/tests/test_rt_macros.rs (compile-time tests for rt and macros features)
   - tests-integration/Cargo.toml (integration tests crate manifest) - ALREADY EXISTS
   - tests-integration/README.md (Tests that require additional components than just the `tokio` crate.) - ALREADY EXISTS
   - tests-integration/src/bin/test-cat.rs (test-cat binary implementation)
   - tests-integration/src/bin/test-mem.rs (memory test binary)
   - tests-integration/src/bin/test-process-signal.rs (process signal test binary)
   - tests-integration/tests/macros_main.rs (macros main test)
   - tests-integration/tests/macros_pin.rs (macros pin test)
   - tests-integration/tests/macros_select.rs (macros select test)
   - tests-integration/tests/rt_yield.rs (runtime yield tests for WASI)
   - tests-integration/tests/tcp_tests.rs (integration tests for TCP functionality)
   - tests-integration/tests/async_send_sync.rs (Send/Sync trait tests)
   - target-specs/README.md (documentation for custom target specifications) - ALREADY EXISTS
   - target-specs/i686-unknown-linux-gnu.json (custom target spec for no-atomic-u64 testing) - ALREADY EXISTS
   - Cross.toml (cross-compilation configuration)
   - spellcheck.toml (spellcheck configuration with Hunspell settings)
   - spellcheck.dic (custom dictionary for project-specific terms)
   - deny.toml (cargo-deny configuration for dependency auditing)
   - netlify.toml (Netlify deployment configuration for documentation)
   - .cirrus.yml (Cirrus CI configuration for FreeBSD testing)
   - .github/buildomat/config.toml (Oxide Buildomat CI configuration)
   - .github/buildomat/README.md (Buildomat illumos CI documentation) - ALREADY EXISTS
   - .github/ISSUE_TEMPLATE/config.yml (GitHub issue template configuration)
   - .github/labeler.yml (PR labeling configuration with R-loom-sync, R-loom-time-driver, R-loom-current-thread, R-loom-multi-thread labels)
   - .github/FUNDING.yml (GitHub Sponsors configuration for tokio-rs organization)
   - .github/workflows/no-atomic-u64-test.yml (CI workflow for testing without AtomicU64)
   - .github/workflows/ci.yml (main CI workflow with env.rust_clippy: 1.88