=== ADJUSTED ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - Conda/Miniconda (latest stable version for Linux x86_64)
   - Python 3.6, 3.7, or 3.8 (due to astunparse library compatibility)
   - R base package (via conda-forge)
   - R eva package (via conda-forge)
   - Git (for cloning repositories)
   - pip (Python package manager)
   - arviz==0.6.1 (Bayesian data analysis)
   - astunparse (AST manipulation - required for get_setup_extras.py)
   - rpy2==3.2.0 (R-Python interface)
   - scipy==1.5.4 (scientific computing)
   - numpy (numerical computing - CPU-only version)
   - statsmodels (statistical modeling)
   - hyperopt (hyperparameter optimization)
   - tabulate (table formatting)
   - pandas (data manipulation)
   - diff-match-patch (diff generation)
   - pytest (testing framework)
   - pytest-timeout (test timeout management)
   - jax==0.2.9 (for coax project - CPU-only version)
   - jaxlib (JAX's XLA compiler support library - CPU-only version)
   - System dependencies for ML projects (Ubuntu 20.04 compatible):
     - libsdl-image1.2-dev, libsdl-mixer1.2-dev, libsdl-ttf2.0-dev, libsdl1.2-dev
     - libsmpeg-dev, subversion, libportmidi-dev, ffmpeg
     - libswscale-dev, libavformat-dev, libavcodec-dev, libfreetype6-dev
     - build-essential, libasound2-dev, libjack-dev, portaudio19-dev
     - libsndfile1-dev, pkg-config, libgmp3-dev, libopenmpi-dev
     - libeigen3-dev, cmake, libgl1-mesa-dev, libsdl2-dev
     - libsdl2-image-dev, libsdl2-ttf-dev, libsdl2-gfx-dev
     - libboost-all-dev, libdirectfb-dev, libst-dev, mesa-utils
     - xvfb, x11vnc, libsdl-sge-dev, libmysqlclient-dev
     - libmariadbclient-dev, libpq-dev, gdal-bin, libgdal-dev
     - clang, curl, swig, mysql-server

2. FILES TO CREATE:
   - /home/cc/EnvGym/data/flex/projects/ directory
   - /home/cc/EnvGym/data/flex/tool/logs/ directory for logging output
   - /home/cc/EnvGym/data/flex/tool/scripts/extra_deps/ directory for project-specific dependencies
   - /home/cc/EnvGym/data/flex/tool/scripts/extra_deps/coax.txt (content: jax==0.2.9)
   - /home/cc/EnvGym/data/flex/tool/scripts/get_setup_extras.py (content provided - extracts extras_require from setup.py)
   - /home/cc/EnvGym/data/flex/.gitignore file (content provided - includes .idea/, *.pyc, __pycache__, venv, logs/, tool/scripts/data, .vscode, obj/, projects/, *.tar.gz, build_logs/, tool/scripts/azure/results/)
   - /home/cc/EnvGym/data/flex/conda_environments.txt to track created conda environments
   - /home/cc/EnvGym/data/flex/test_results/ directory for storing test outputs
   - /home/cc/EnvGym/data/flex/patches/ directory for storing generated patches
   - /home/cc/EnvGym/data/flex/diffs/ directory for storing generated diffs
   - /home/cc/EnvGym/data/flex/requirements-frozen.txt for exact dependency versions
   - /home/cc/EnvGym/data/flex/environment.yml for conda environment export
   - commit.txt files for tracking project commits
   - evalreqs.txt for consolidated requirements
   - allevalreqs.txt for unique requirements list
   - {project_name}_install_log.txt for installation logs
   - printExtra.py in project directories (auto-generated by get_setup_extras.py)
   - Symbolic links: /usr/include/xlocale.h -> /usr/include/locale.h (if needed)
   - Symbolic links: /usr/include/Eigen -> /usr/include/eigen3/Eigen (if needed)
   - /home/cc/EnvGym/data/flex/build_logs/ directory for build output logs
   - /home/cc/EnvGym/data/flex/tool/scripts/data/ directory for script data storage
   - /home/cc/EnvGym/data/flex/tool/scripts/azure/ directory for Azure-related scripts
   - /home/cc/EnvGym/data/flex/tool/scripts/azure/results/ directory for Azure results
   - /home/cc/EnvGym/data/flex/obj/ directory for object files

3. NECESSARY TEST CASES IN THE CODEBASE:
   - Unit test for boundschecker.py main functionality
   - Test for Extreme Value Theory implementation
   - Test for Box-Cox transformation functionality
   - Test for patch generation mechanism
   - Test for diff generation mechanism
   - Test for assertion bound detection and parsing
   - Test for multi-threading functionality (CPU-only)
   - Test for different assertion types handling
   - Integration test for complete FLEX workflow
   - Test for Config.py parameter validation
   - Test for rpy2 R-Python interface functionality
   - Test for diff-match-patch integration
   - Test for statistical analysis with scipy/statsmodels
   - Test for hyperopt optimization functionality
   - Test for data processing with pandas
   - Test for Bayesian analysis with arviz
   - Test for general_setup.sh script functionality
   - Test for get_setup_extras.py script functionality
   - Test for AST parsing and modification with astunparse
   - Test for setup.py extras_require extraction
   - Test for printExtra.py generation
   - Test for handling different setup.py formats and encodings
   - Test for conda environment creation and activation
   - Test for system dependency installation on Ubuntu 20.04
   - Test for project cloning and checkout
   - Test for requirements extraction from multiple files
   - Test for setup.py extras handling
   - Test for symbolic link creation
   - Test for pytest and pytest-timeout integration
   - Test for project-specific extra dependencies loading from tool/scripts/extra_deps/
   - Test for JAX CPU functionality and compatibility with coax project
   - Test for handling multiple project-specific dependency files
   - Test for merging project-specific dependencies with general requirements
   - Test for .gitignore functionality (verify ignored files are not tracked)
   - Test for build logs directory creation and usage
   - Test for Azure scripts directory structure
   - Test for virtual environment exclusion from version control
   - Test for Python cache files exclusion
   - Test for IDE configuration files exclusion

4. COMPLETE TODO LIST:
   - Change to working directory: `cd /home/cc/EnvGym/data/flex`
   - Install system dependencies on Ubuntu 20.04: `sudo apt-get update && sudo apt-get install -y` all listed system packages
   - Create symbolic links if needed for xlocale.h and Eigen
   - Download and install Miniconda for Linux x86_64: `wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh`
   - Install Miniconda: `bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda3`
   - Source conda profile: `source $HOME/miniconda3/etc/profile.d/conda.sh`
   - Create new conda environment: `conda create -n flex-env python=3.8`
   - Activate conda environment: `conda activate flex-env`
   - Install R packages: `conda install -c conda-forge r-base r-eva`
   - Verify R installation: `R --version`
   - Navigate to repository root directory: `cd /home/cc/EnvGym/data/flex`
   - Create necessary directories: `mkdir -p projects tool/logs tool/scripts/extra_deps test_results patches diffs build_logs tool/scripts/data tool/scripts/azure/results obj`
   - Create .gitignore file with provided content
   - Verify .gitignore is working: `git status` (should not show ignored directories/files)
   - Copy get_setup_extras.py content to tool/scripts/get_setup_extras.py
   - Create tool/scripts/extra_deps/coax.txt with content: `echo "jax==0.2.9" > tool/scripts/extra_deps/coax.txt`
   - Make scripts executable: `chmod +x tool/scripts/*.sh tool/scripts/*.py`
   - Install conda packages: `conda install -y pip pytest pytest-timeout`
   - Install specific version requirements first: `pip install arviz==0.6.1 rpy2==3.2.0 scipy==1.5.4`
   - Install CPU-only JAX for coax project: `pip install jax==0.2.9 jaxlib==0.1.61`
   - Install remaining Python requirements: `pip install astunparse numpy statsmodels hyperopt tabulate pandas diff-match-patch`
   - Verify astunparse installation: `python -c "import astunparse; print(astunparse.__version__)"`
   - Test get_setup_extras.py functionality: `python tool/scripts/get_setup_extras.py test_setup.py` (create test setup.py first)
   - Verify all package installations: `pip list`
   - Create frozen requirements: `pip freeze > requirements-frozen.txt`
   - Verify astunparse installation and compatibility
   - Verify rpy2 can interface with R: `python -c "import rpy2.robjects as ro; print(ro.r('R.version.string')[0])"`
   - Test AST manipulation: `python -c "import ast, astunparse; print('AST tools working')"`
   - Test JAX CPU installation: `python -c "import jax; print(jax.__version__); print('CPU devices:', jax.devices())"`
   - Test general_setup.sh script with a sample project from newbugs.csv
   - Verify boundschecker.py can be imported without errors
   - Test arviz import: `python -c "import arviz; print(arviz.__version__)"`
   - Test diff-match-patch functionality: `python -c "import diff_match_patch"`
   - Test pytest installation: `pytest --version`
   - Verify project-specific dependencies loading: `cat tool/scripts/extra_deps/coax.txt`
   - Run a test execution with coax example: `cd /home/cc/EnvGym/data/flex/tool && python boundschecker.py -r coax -test test_update -file coax/coax/experience_replay/_prioritized_test.py -line 137 -conda coax -deps "numpy jax==0.2.9" -bc`
   - Test general_setup.sh with coax project to ensure it reads extra_deps/coax.txt
   - Test general_setup.sh with a sample project: `cd /home/cc/EnvGym/data/flex && ./tool/scripts/general_setup.sh projects sample/project local`
   - Verify get_setup_extras.py generates printExtra.py correctly in project directories
   - Check for any project-specific extra dependencies in tool/scripts/extra_deps/
   - Verify printExtra.py output format matches expected pattern (dep>package_name)
   - Test that coax project installation includes jax==0.2.9 from extra_deps
   - Verify .gitignore patterns work correctly: `touch test.pyc && git status` (should not show test.pyc)
   - Test directory exclusion: `touch projects/test.txt && git status` (should not show projects/test.txt)
   - Clean up test files: `rm -f test.pyc projects/test.txt`
   - Document any system-specific dependencies encountered
   - Create environment backup: `conda env export > environment.yml`
   - Test deactivation and reactivation of environment
   - Verify all Config.py parameters are accessible
   - Run any existing unit tests if available
   - Document successful setup in conda_environments.txt
   - Verify all statistical libraries work together: `python -c "import scipy, statsmodels, numpy, pandas"`
   - Test logging functionality with timestamp format
   - Verify conda environment naming convention works correctly
   - Test requirements consolidation from multiple requirement files including extra_deps
   - Verify setup.py extras extraction functionality with various setup.py formats
   - Test project installation with editable mode (-e flag)
   - Verify Git commit tracking functionality
   - Test environment isolation between different projects
   - Verify get_setup_extras.py handles encoding errors gracefully
   - Test printExtra.py execution for extracting extra dependencies
   - Verify JAX CPU compatibility with other numerical libraries
   - Test that project-specific dependencies override general requirements when conflicts arise
   - Document the pattern for adding new project-specific dependencies in extra_deps/
   - Verify build_logs/ directory is properly excluded from version control
   - Test Azure scripts directory structure if applicable
   - Confirm all ignored patterns in .gitignore are working as expected
   - Check available disk space before downloading large packages: `df -h /home/cc/EnvGym/data/flex`
   - Monitor memory usage during package installations: `free -h`
   - Verify x86_64 architecture compatibility for all binary packages
   - Test Docker compatibility if needed: `docker --version` (Docker 28.1.1 with BuildKit)
   - Ensure all paths use absolute references starting with /home/cc/EnvGym/data/flex