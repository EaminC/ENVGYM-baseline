=== ENVIRONMENT SETUP PLAN ===

1. DOWNLOADS NEEDED:
   - Go Programming Language (version 1.21.13 or higher - confirmed from release workflow and go.mod requirement)
   - goctl tool (version 1.8.4-beta as specified in build.env, via go install, brew, docker, or build from source)
   - Git (for version control)
   - Visual Studio Code (optional, with goctl plugin)
   - Docker (version 28.1.1 already available with BuildKit support)
   - Docker Compose (for multi-container orchestration)
   - curl (for API testing and SSE client testing)
   - Make (required for build automation using Makefile)
   - UPX (Ultimate Packer for eXecutables - optional, for binary compression)
   - go-zero framework (v1.4.4 or higher - minimum supported version per security policy)
   - GOPROXY configuration (https://goproxy.cn for China users)
   - goctl-swagger plugin (for API documentation)
   - goctl-android plugin (for Android client generation)
   - goctl-go-compact plugin (for handler consolidation)
   - etcd (v3.5.15 or compatible, using quay.io/coreos/etcd:latest image) for service discovery
   - Redis server (v9.12.1 compatible driver) for caching and session management
   - MySQL database (v1.9.0 compatible driver)
   - PostgreSQL database (pgx/v5 v5.7.4 compatible driver)
   - MongoDB (required for document-based data storage with mongo model generation)
   - MongoDB Go Driver (go.mongodb.org/mongo-driver for BSON and MongoDB operations)
   - Prometheus (v1.21.1 client library compatible)
   - Grafana (for metrics visualization)
   - Jaeger (v1.17.0 exporter compatible) for distributed tracing
   - Zipkin (v1.24.0 exporter compatible) as alternative tracer
   - Pyroscope (v1.2.4 compatible) for continuous profiling
   - grpcurl (for gRPC API testing)
   - protoc compiler (Alpine package or binary release - required for RPC service generation and ProtoSet generation)
   - protoc-gen-go (v1.36.5 compatible or latest - required for proto file compilation)
   - protoc-gen-go-grpc (v1.65.0 compatible or latest - required for gRPC code generation)
   - ANTLR (v0.0.1 zeromicro/antlr for parser generation)
   - ANTLR4 runtime (for API syntax parsing)
   - DDL Parser (v1.0.5 for database schema parsing)
   - Kubernetes client-go (v0.29.3 for K8s integration)
   - kubectl (for Kubernetes cluster management and namespace operations)
   - Kubernetes cluster (local via minikube, kind, or k3s; or remote cluster access)
   - OpenTelemetry SDK (v1.24.0 for observability)
   - automaxprocs (v1.6.0 for container CPU optimization)
   - go.uber.org/mock (v0.4.0 for mock testing)
   - miniredis (v2.35.0 for Redis testing)
   - cobra (v1.9.1 for CLI framework)
   - structtag (v1.2.0 for struct tag manipulation)
   - go-openapi/spec (v0.21.1-0.20250328170532-a3928469592e for OpenAPI support)
   - gookit/color (v1.5.4 for terminal colors)
   - withfig autocomplete tools (v1.2.1 for shell completion)
   - DATA-DOG/go-sqlmock (v1.5.2 for SQL mocking)
   - stretchr/testify (v1.11.0 for testing assertions)
   - go.uber.org/goleak (v1.3.0 for goroutine leak detection)
   - alicebob/miniredis/v2 (v2.35.0 for Redis mocking)
   - emicklei/proto (v1.14.2 for proto file parsing)
   - iancoleman/strcase (v0.3.0 for string case conversion)
   - go-openapi/swag (v0.23.1 for OpenAPI definitions)
   - logrusorgru/aurora (v2.0.3+incompatible for terminal colors)
   - kylelemons/godebug (v1.1.0 for diff debugging)
   - h2non/parth (v0.0.0-20190131123155-b4df798d6542 for path parsing)
   - grpc-gateway/v2 (v2.20.0 for REST to gRPC gateway)
   - mailru/easyjson (v0.9.0 for fast JSON serialization)
   - yuin/gopher-lua (v1.1.1 for Lua scripting support)
   - gopkg.in/h2non/gock.v1 (v1.1.2 for HTTP mocking)
   - Alpine Linux packages (tzdata for timezone support)
   - golangci-lint (for code quality checks)
   - gofmt (Go code formatter - included with Go installation)
   - GitHub CLI (for easier PR management and security advisory creation)
   - Fork tool (optional, for repository forking from CLI)
   - License compliance checker (optional, for MIT license verification)
   - Trivy or similar security scanner (for vulnerability scanning)
   - SAST tools (Static Application Security Testing)
   - Dependabot CLI (optional, for local dependency checks and validation)
   - Security advisory tools (for vulnerability reporting)
   - GitHub Actions CLI (act) (optional, for local workflow testing)
   - Docker vulnerability scanner (for image security checks)
   - go vet (Go static analysis tool - included with Go installation)
   - Codecov CLI (optional, for local coverage report validation)
   - CodeQL CLI (optional, for local security analysis matching GitHub Actions)
   - GitHub CodeQL Action dependencies (automatically managed by GitHub Actions)
   - zeromicro/go-zero-release-action (GitHub Action for automated releases)
   - goreleaser (optional, for local release testing and validation)
   - Cross-compilation toolchain (for linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, windows/arm64, darwin/amd64, darwin/arm64)
   - GPG key tools (for signing releases)
   - GitHub Release CLI (for manual release management)
   - YAML parser (gopkg.in/yaml.v3 for YAML config support)
   - TOML parser (github.com/BurntSushi/toml for TOML config support)
   - JSON parser (encoding/json - included with Go)
   - Environment variable parser (os package - included with Go)
   - Kafka client (github.com/zeromicro/go-queue/kq for log streaming)
   - zap logging library (go.uber.org/zap for third-party logging integration)
   - logrus logging library (github.com/sirupsen/logrus for third-party logging integration)
   - zero-contrib repository (github.com/zeromicro/zero-contrib for logging extensions)
   - zero-examples repository (github.com/zeromicro/zero-examples for logging examples and MapReduce examples)
   - go-zero/core/mr package (MapReduce library for concurrent data processing)
   - sync.WaitGroup (Go standard library for simple concurrent scenarios)
   - context package (Go standard library for cancellation propagation)
   - channel operations knowledge (for understanding MapReduce implementation)
   - String case conversion utilities (for namingFormat support)
   - Regular expression engine (for format validation and API syntax validation)
   - go-zero/core/stores/monc package (MongoDB cache support)
   - go-zero/core/stores/mon package (MongoDB base support)
   - MongoDB primitive package (go.mongodb.org/mongo-driver/bson/primitive for ObjectID)
   - MongoDB BSON package (go.mongodb.org/mongo-driver/bson for BSON operations)
   - MongoDB update operations knowledge (for ReplaceOne, DeleteOne methods)
   - MongoDB connection string format knowledge
   - MongoDB database and collection naming conventions
   - go-zero/core/stores/builder package (for SQL field name building)
   - go-zero/core/stores/cache package (for Redis cache implementation)
   - go-zero/core/stores/sqlc package (for SQL with cache support)
   - go-zero/core/stores/sqlx package (for SQL operations)
   - go-zero/core/stringx package (for string utilities)
   - database/sql package (Go standard library for SQL operations)
   - sql.NullString, sql.NullInt64, sql.NullFloat64, sql.NullTime, sql.NullBool, sql.NullByte types (for nullable SQL fields)
   - MySQL DDL knowledge (for table creation and schema design)
   - SQL index types knowledge (single field index, composite index, full-text index)
   - CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP knowledge
   - Protocol Buffers syntax knowledge (proto3 syntax for RPC service definitions)
   - gRPC service design patterns (for implementing RPC services)
   - go-zero RPC template system (for code generation from proto files)
   - API syntax v1 knowledge (for writing .api files with proper syntax)
   - API tag system knowledge (json, path, form tags and modifiers like optional, options, default, range)
   - API import path validation regex: `(?m)"(/?[a-zA-Z0-9_#-])+\.api"`
   - API version validation regex: `(?m)"v[1-9][0-9]*"`
   - API handler naming regex: `[_a-zA-Z][a-zA-Z_-]*`
   - Golang keyword checker (for avoiding reserved words in API definitions)
   - Golang built-in types knowledge (for API type definitions)
   - API doc/comment parser (for extracting documentation from .api files)
   - go-zero/gateway package (for API gateway implementation)
   - gRPC reflection API (for dynamic service discovery in gateway)
   - Protocol Buffer descriptor sets knowledge (for ProtoSet file handling)
   - protoc --descriptor_set_out flag usage (for generating .pb descriptor files)
   - protoc --include_imports flag usage (for including external proto imports in descriptor sets)
   - gRPC service naming conventions (service.Service/Method format)
   - HTTP method mapping knowledge (GET, POST, PUT, DELETE to gRPC)
   - Path parameter extraction (/:param format in gateway mappings)
   - go-zero gateway configuration structure (GatewayConf)
   - Etcd-based service discovery for gateway upstreams
   - gRPC endpoint-based routing for gateway
   - ProtoSet-based service definition loading
   - Reflection-based service discovery mode
   - Server-Sent Events (SSE) client library (for testing MCP server)
   - JSON-RPC 2.0 specification knowledge (for MCP protocol implementation)
   - Base64 encoding/decoding utilities (for image content in MCP)
   - MIME type detection library (for resource content types)
   - WebSocket client (optional, for future MCP transport support)
   - httptest package (Go standard library for HTTP server testing)
   - time package (Go standard library for timeout handling)
   - sync.Mutex knowledge (for concurrent client management)
   - go-zero/mcp package (MCP server implementation)
   - MCP protocol specification documentation
   - Claude Desktop or similar MCP-compatible client (for testing)
   - Postman or similar tool with SSE support (for MCP API testing)
   - JSON Schema validator (for validating tool input schemas)
   - UUID generator (for client session tracking)
   - Kubernetes namespace knowledge (for service isolation)
   - Kubernetes RBAC knowledge (for service account permissions)
   - Kubernetes ConfigMap and Secret management
   - Kubernetes Service and Endpoint resources understanding
   - go-zero/core/discov/kubernetes package (for K8s-based service discovery)
   - Kubernetes StatefulSet knowledge (for stateful service deployment)
   - Kubernetes PersistentVolumeClaim (PVC) understanding (for etcd data persistence)
   - Kubernetes volume mounting with subPathExpr (for pod-specific data directories)
   - etcd cluster initialization knowledge (--initial-cluster-state new)
   - etcd peer communication configuration (port 2380)
   - etcd client communication configuration (port 2379)
   - etcd auto-compaction settings (--auto-compaction-retention)
   - etcd zap logger configuration
   - Kubernetes headless service understanding (for StatefulSet DNS)
   - Kubernetes pod hostname resolution in StatefulSets
   - Shell scripting for dynamic configuration in containers
   - Kubernetes Pod resource management (for individual etcd node deployment)
   - Kubernetes Service per-pod configuration (for etcd node-specific services)
   - Kubernetes pod anti-affinity rules (requiredDuringSchedulingIgnoredDuringExecution)
   - Kubernetes topology key understanding (kubernetes.io/hostname)
   - etcd 5-node cluster configuration knowledge
   - etcd cluster member naming conventions (etcd0-etcd4)
   - Kubernetes namespace creation and management (discov namespace)
   - Kubernetes label selectors (app=etcd, etcd_node=etcdX)
   - Kubernetes service discovery within namespace (etcdX.discov DNS names)
   - etcd advertise URLs configuration for cluster communication
   - Kubernetes container port naming (client/server ports)
   - etcd cluster size planning (5 nodes for high availability)
   - Kubernetes service clusterIP configuration
   - etcd data persistence strategy (consider adding PersistentVolumes)
   - SQL data type mapping knowledge (for goctl model generation)
   - Understanding of nullable SQL types (sql.NullString, sql.NullInt64, sql.NullFloat64, sql.NullTime, sql.NullBool, sql.NullByte)
   - Understanding of unsigned integer types in Go (uint64)
   - MySQL/PostgreSQL data type compatibility knowledge
   - Time package (Go standard library for time.Time type)
   - SQL numeric precision types understanding (decimal, numeric, double)
   - SQL string types understanding (char, varchar, text, blob)
   - SQL binary types understanding (binary, varbinary)
   - SQL date/time types understanding (date, datetime, timestamp, time, year)
   - SQL boolean types understanding (bool, boolean)
   - SQL bit type understanding
   - SQL JSON type understanding
   - SQL enum and set types understanding
   - SQL spatial types understanding (linestring, multilinestring)
   - goctl config file structure knowledge (YAML format)
   - goctl model type mapping customization knowledge
   - File server capabilities (for serving files via HTTP)
   - Static file serving middleware understanding
   - Path traversal security knowledge (for safe file serving)
   - HTTP file upload/download patterns
   - File system operations (os package for file management)
   - MIME type detection for served files
   - Directory listing capabilities (optional)
   - File path security validation
   - HTTP range requests support (for partial file downloads)
   - File caching strategies
   - Compression support for served files (gzip, deflate)
   - Go build tools (for building goctl from source)
   - Go module proxy configuration (for dependency resolution)
   - Build artifact management knowledge (for dist directory handling)
   - Docker build context optimization knowledge (for .dockerignore usage)
   - Go version management tools (.go-version file support)

2. FILES TO CREATE:
   - `/home/cc/EnvGym/data/zeromicro_go-zero/.gitignore` - Version control ignore file (with comprehensive ignore patterns)
   - `/home/cc/EnvGym/data/zeromicro_go-zero/greet.api` - API definition file in project root (following API syntax v1 specification)
   - `/home/cc/EnvGym/data/zeromicro_go-zero/greet/etc/greet-api.yaml` - Configuration file for the service (YAML format with env variable support)
   - `/home/cc/EnvGym/data/zeromicro_go-zero/greet/etc/greet-api.toml` - Alternative TOML configuration file (optional)
   - `/home/cc/EnvGym/data/zeromicro_go-zero/greet/etc/greet-api.json` - Alternative JSON configuration file (optional)
   - `/home/cc/EnvGym/data/zeromicro_go-zero/go.mod` - Go module file